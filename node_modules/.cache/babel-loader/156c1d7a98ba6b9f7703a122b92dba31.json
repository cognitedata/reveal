{"ast":null,"code":"import chunk from 'lodash/chunk';\nimport { MAX_RESULT_LIMIT_DATAPOINTS } from '../../../constants';\nexport const getTimeseriesDatapoints = (sdk, {\n  items,\n  ...query\n}) => {\n  const chunkTimeseriesIds = chunk(items, MAX_RESULT_LIMIT_DATAPOINTS);\n  const chunkedPromises = chunkTimeseriesIds.map(timeseriesIds => sdk.datapoints.retrieve({\n    items: timeseriesIds,\n    ...query\n  }));\n  return Promise.all(chunkedPromises).then(result => result.flat());\n};","map":{"version":3,"names":["chunk","MAX_RESULT_LIMIT_DATAPOINTS","getTimeseriesDatapoints","sdk","items","query","chunkTimeseriesIds","chunkedPromises","map","timeseriesIds","datapoints","retrieve","Promise","all","then","result","flat"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/timeseries/service/network/getTimeseriesDatapoints.ts"],"sourcesContent":["import chunk from 'lodash/chunk';\n\nimport { CogniteClient, DatapointsMultiQuery } from '@cognite/sdk/dist/src';\n\nimport { MAX_RESULT_LIMIT_DATAPOINTS } from '../../../constants';\n\nexport const getTimeseriesDatapoints = (\n  sdk: CogniteClient,\n  { items, ...query }: DatapointsMultiQuery\n) => {\n  const chunkTimeseriesIds = chunk(items, MAX_RESULT_LIMIT_DATAPOINTS);\n  const chunkedPromises = chunkTimeseriesIds.map((timeseriesIds) =>\n    sdk.datapoints.retrieve({ items: timeseriesIds, ...query })\n  );\n  return Promise.all(chunkedPromises).then((result) => result.flat());\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,cAAc;AAIhC,SAASC,2BAA2B,QAAQ,oBAAoB;AAEhE,OAAO,MAAMC,uBAAuB,GAAG,CACrCC,GAAkB,EAClB;EAAEC,KAAK;EAAE,GAAGC;AAA4B,CAAC,KACtC;EACH,MAAMC,kBAAkB,GAAGN,KAAK,CAACI,KAAK,EAAEH,2BAA2B,CAAC;EACpE,MAAMM,eAAe,GAAGD,kBAAkB,CAACE,GAAG,CAAEC,aAAa,IAC3DN,GAAG,CAACO,UAAU,CAACC,QAAQ,CAAC;IAAEP,KAAK,EAAEK,aAAa;IAAE,GAAGJ;EAAM,CAAC,CAAC,CAC5D;EACD,OAAOO,OAAO,CAACC,GAAG,CAACN,eAAe,CAAC,CAACO,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,EAAE,CAAC;AACrE,CAAC"},"metadata":{},"sourceType":"module"}