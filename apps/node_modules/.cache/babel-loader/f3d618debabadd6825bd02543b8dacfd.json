{"ast":null,"code":"export const StreamlitActions = [{\n  type: 'GENERATE_APP',\n  name: 'Generate App',\n  description: 'I want to generate a new Streamlit app'\n}];\nexport const getActionsForStreamlit = async (pastMessages, sendMessage) => {\n  if (pastMessages.filter(el => el.source === 'user').length === 0) {\n    return StreamlitActions.map(el => ({\n      onClick: async () => {\n        sendMessage({\n          content: el.description,\n          type: 'text'\n        });\n      },\n      content: el.name\n    }));\n  }\n  return [];\n};","map":{"version":3,"names":["StreamlitActions","type","name","description","getActionsForStreamlit","pastMessages","sendMessage","filter","el","source","length","map","onClick","content"],"sources":["/Volumes/csvol/fusion/libs/copilot-core/src/lib/features/streamlit/getActions.ts"],"sourcesContent":["import { GetActionsFunc } from '../../types';\n\nexport const StreamlitActions = [\n  {\n    type: 'GENERATE_APP',\n    name: 'Generate App',\n    description: 'I want to generate a new Streamlit app',\n  },\n];\n\nexport const getActionsForStreamlit: GetActionsFunc = async (\n  pastMessages,\n  sendMessage\n) => {\n  if (pastMessages.filter((el) => el.source === 'user').length === 0) {\n    return StreamlitActions.map((el) => ({\n      onClick: async () => {\n        sendMessage({ content: el.description, type: 'text' });\n      },\n      content: el.name,\n    }));\n  }\n  return [];\n};\n"],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAG,CAC9B;EACEC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE,cAAc;EACpBC,WAAW,EAAE;AACf,CAAC,CACF;AAED,OAAO,MAAMC,sBAAsC,GAAG,OACpDC,YAAY,EACZC,WAAW,KACR;EACH,IAAID,YAAY,CAACE,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACC,MAAM,KAAK,MAAM,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;IAClE,OAAOV,gBAAgB,CAACW,GAAG,CAAEH,EAAE,KAAM;MACnCI,OAAO,EAAE,YAAY;QACnBN,WAAW,CAAC;UAAEO,OAAO,EAAEL,EAAE,CAACL,WAAW;UAAEF,IAAI,EAAE;QAAO,CAAC,CAAC;MACxD,CAAC;MACDY,OAAO,EAAEL,EAAE,CAACN;IACd,CAAC,CAAC,CAAC;EACL;EACA,OAAO,EAAE;AACX,CAAC"},"metadata":{},"sourceType":"module"}