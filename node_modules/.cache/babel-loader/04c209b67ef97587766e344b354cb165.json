{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport isEmpty from 'lodash/isEmpty';\nimport keyBy from 'lodash/keyBy';\nimport { useSDK } from '@cognite/sdk-provider';\nimport { queryKeys } from '../../../queryKeys';\nimport { useAssetsSearchResultWithLabelsQuery } from '../../internal';\nimport { buildTree } from '../utils/buildTree';\nimport { concatParents } from '../utils/concatParents';\nexport const useSearchAssetTree = ({\n  query,\n  assetFilter,\n  sortBy\n}, searchConfig) => {\n  _s();\n  const sdkClient = useSDK();\n  const {\n    data,\n    ...rest\n  } = useAssetsSearchResultWithLabelsQuery({\n    query,\n    assetFilter,\n    sortBy: sortBy\n  }, undefined, searchConfig);\n\n  // get all parent ids from path aggregates\n  const parentIds = useMemo(() => {\n    return data.reduce((previousValue, currentValue) => {\n      const pathIds = currentValue.aggregates?.path?.reduce((ids, path) => {\n        if ('id' in path && currentValue.id !== path.id) {\n          return [...ids, path.id];\n        }\n        return ids;\n      }, []) || [];\n      return Array.from(new Set([...previousValue, ...pathIds]));\n    }, []);\n  }, [data]);\n  const {\n    data: parentAssets,\n    refetch\n  } = useQuery([queryKeys.assets(), 'parent-assets'], () => {\n    return sdkClient.assets.retrieve(parentIds.map(id => ({\n      id\n    })), {\n      aggregatedProperties: ['childCount']\n    }).then(response => {\n      return keyBy(response, 'id');\n    });\n  }, {\n    enabled: !!parentIds.length\n  });\n  useEffect(() => {\n    // We use the 'refetch' function to get the data when new parentIds arrive instead of updating the query key\n    // this way the table doesn't jump\n    refetch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parentIds]);\n  return useMemo(() => {\n    if (parentAssets !== undefined) {\n      const tree = data.reduce((previousValue, currentValue) => {\n        return [...previousValue, buildTree(currentValue, parentAssets)];\n      }, []);\n      const concattedParentsTree = concatParents(tree);\n      const flaggedTreeForMore = isEmpty(concattedParentsTree) ? [] : [setIsLastFetched(concattedParentsTree[0])];\n      return {\n        data: flaggedTreeForMore,\n        ...rest\n      };\n    }\n    return {\n      data,\n      ...rest\n    };\n  }, [parentAssets, data, rest]);\n};\n\n// Compare childCount and children.length for each asset in the tree,\n// if not equal set shouldShowMoreAssetsRow flag true to the last child in the children array.\n_s(useSearchAssetTree, \"c8WcrdTDoxdUSW5nZ22Q6oMZYnU=\", false, function () {\n  return [useSDK, useAssetsSearchResultWithLabelsQuery, useQuery];\n});\nconst setIsLastFetched = rootAsset => {\n  const aggregateChildCount = rootAsset?.aggregates?.childCount || 0;\n  let childrenArr = rootAsset?.children || [];\n  if (aggregateChildCount > childrenArr.length) {\n    childrenArr = childrenArr.map((asset, index, arr) => {\n      return {\n        ...asset,\n        // Flag for last fetched child of an asset's parent in hierarchy view.\n        // Means that parent still have some children that are not fetched to be shown in the table.\n        shouldShowMoreAssetsRow: index === arr.length - 1\n      };\n    });\n  }\n  return {\n    ...rootAsset,\n    children: [...childrenArr.map(asset => setIsLastFetched(asset))]\n  };\n};","map":{"version":3,"names":["useEffect","useMemo","useQuery","isEmpty","keyBy","useSDK","queryKeys","useAssetsSearchResultWithLabelsQuery","buildTree","concatParents","useSearchAssetTree","query","assetFilter","sortBy","searchConfig","sdkClient","data","rest","undefined","parentIds","reduce","previousValue","currentValue","pathIds","aggregates","path","ids","id","Array","from","Set","parentAssets","refetch","assets","retrieve","map","aggregatedProperties","then","response","enabled","length","tree","concattedParentsTree","flaggedTreeForMore","setIsLastFetched","rootAsset","aggregateChildCount","childCount","childrenArr","children","asset","index","arr","shouldShowMoreAssetsRow"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/assets/service/queries/useSearchAssetTree.ts"],"sourcesContent":["import { useEffect, useMemo } from 'react';\n\nimport { useQuery } from '@tanstack/react-query';\nimport isEmpty from 'lodash/isEmpty';\nimport keyBy from 'lodash/keyBy';\n\nimport { useSDK } from '@cognite/sdk-provider';\n\nimport {\n  AssetConfigType,\n  InternalAssetFilters,\n} from '@data-exploration-lib/core';\n\nimport { queryKeys } from '../../../queryKeys';\nimport { TableSortBy } from '../../../types';\nimport {\n  InternalAssetTreeData,\n  useAssetsSearchResultWithLabelsQuery,\n} from '../../internal';\nimport { buildTree } from '../utils/buildTree';\nimport { concatParents } from '../utils/concatParents';\n\nexport const useSearchAssetTree = (\n  {\n    query,\n    assetFilter,\n    sortBy,\n  }: {\n    query?: string;\n    assetFilter: InternalAssetFilters;\n    sortBy: TableSortBy[];\n  },\n  searchConfig?: AssetConfigType\n) => {\n  const sdkClient = useSDK();\n  const { data, ...rest } = useAssetsSearchResultWithLabelsQuery(\n    {\n      query,\n      assetFilter,\n      sortBy: sortBy,\n    },\n    undefined,\n    searchConfig\n  );\n\n  // get all parent ids from path aggregates\n  const parentIds = useMemo(() => {\n    return data.reduce((previousValue, currentValue) => {\n      const pathIds =\n        currentValue.aggregates?.path?.reduce((ids, path) => {\n          if ('id' in path && currentValue.id !== path.id) {\n            return [...ids, path.id];\n          }\n\n          return ids;\n        }, [] as number[]) || [];\n\n      return Array.from(new Set([...previousValue, ...pathIds]));\n    }, [] as number[]);\n  }, [data]);\n\n  const { data: parentAssets, refetch } = useQuery<\n    Record<string, InternalAssetTreeData>\n  >(\n    [queryKeys.assets(), 'parent-assets'],\n    () => {\n      return sdkClient.assets\n        .retrieve(\n          parentIds.map((id) => ({ id })),\n          { aggregatedProperties: ['childCount'] }\n        )\n        .then((response) => {\n          return keyBy(response, 'id');\n        });\n    },\n    { enabled: !!parentIds.length }\n  );\n\n  useEffect(() => {\n    // We use the 'refetch' function to get the data when new parentIds arrive instead of updating the query key\n    // this way the table doesn't jump\n    refetch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parentIds]);\n\n  return useMemo(() => {\n    if (parentAssets !== undefined) {\n      const tree = data.reduce((previousValue, currentValue) => {\n        return [...previousValue, buildTree(currentValue, parentAssets)];\n      }, [] as InternalAssetTreeData[]);\n\n      const concattedParentsTree = concatParents(tree);\n\n      const flaggedTreeForMore = isEmpty(concattedParentsTree)\n        ? ([] as InternalAssetTreeData[])\n        : [setIsLastFetched(concattedParentsTree[0])];\n\n      return { data: flaggedTreeForMore, ...rest };\n    }\n\n    return { data, ...rest };\n  }, [parentAssets, data, rest]);\n};\n\n// Compare childCount and children.length for each asset in the tree,\n// if not equal set shouldShowMoreAssetsRow flag true to the last child in the children array.\nconst setIsLastFetched = (\n  rootAsset: InternalAssetTreeData\n): InternalAssetTreeData => {\n  const aggregateChildCount = rootAsset?.aggregates?.childCount || 0;\n  let childrenArr = rootAsset?.children || [];\n  if (aggregateChildCount > childrenArr.length) {\n    childrenArr = childrenArr.map((asset, index, arr) => {\n      return {\n        ...asset,\n        // Flag for last fetched child of an asset's parent in hierarchy view.\n        // Means that parent still have some children that are not fetched to be shown in the table.\n        shouldShowMoreAssetsRow: index === arr.length - 1,\n      };\n    });\n  }\n\n  return {\n    ...rootAsset,\n    children: [...childrenArr.map((asset) => setIsLastFetched(asset))],\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}