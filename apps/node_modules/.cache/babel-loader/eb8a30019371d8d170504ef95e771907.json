{"ast":null,"code":"import { SPACE } from '../constants';\nexport const formatNumber = new Intl.NumberFormat().format;\nexport const decimalToPercent = value => Math.round((value + Number.EPSILON) * 100);\nexport const withThousandSeparator = (value, separator = SPACE) => {\n  if (value) return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\n  return '0';\n};\n\n// TODO: This is added to handle '1K+' phrase we get due to the aggregate limitations for advanced filters.\nexport const withThousandSeparatorStringExtended = (value, separator = SPACE) => {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return withThousandSeparator(value, separator);\n};\nexport const formatBigNumbersWithSuffix = value => {\n  const MILLION = 1000000;\n  const TEN_THOUSAND = 10000;\n  const THOUSAND = 1000;\n  const isMillions = value > MILLION;\n  const isTenThousands = value > TEN_THOUSAND;\n\n  // if value is >1M display suffix with 'M+'\n  if (isMillions) {\n    const millions = (value / MILLION).toFixed(1);\n    // remove any .0\n    const cleanMillions = millions[millions.length - 1] === '0' ? millions.split('.')[0] : millions;\n    return `${cleanMillions}M+`;\n  }\n\n  // if value is >10k and <999k display suffix with 'K+'.\n  if (isTenThousands) {\n    const hundreds = (value / THOUSAND).toFixed(1);\n    const cleanHundreds = hundreds[hundreds.length - 1] === '0' ? hundreds.split('.')[0] : hundreds;\n    return `${cleanHundreds}K+`;\n  }\n\n  // if value below <10k, just display the original value.\n  return String(value);\n};\n\n// TODO: This is added to handle '1K+' phrase we get due to the aggregate limitations for advanced filters.\nexport const formatBigNumbersWithSuffixStringExtended = value => {\n  if (typeof value === 'string') {\n    return value;\n  }\n  return formatBigNumbersWithSuffix(value);\n};\nexport const isNumber = value => !Number.isNaN(value);\nexport const isNumeric = value => {\n  return /^-?\\d+$/.test(value);\n};","map":{"version":3,"names":["SPACE","formatNumber","Intl","NumberFormat","format","decimalToPercent","value","Math","round","Number","EPSILON","withThousandSeparator","separator","toString","replace","withThousandSeparatorStringExtended","formatBigNumbersWithSuffix","MILLION","TEN_THOUSAND","THOUSAND","isMillions","isTenThousands","millions","toFixed","cleanMillions","length","split","hundreds","cleanHundreds","String","formatBigNumbersWithSuffixStringExtended","isNumber","isNaN","isNumeric","test"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/core/src/utils/number.ts"],"sourcesContent":["import { SPACE } from '../constants';\n\nexport const formatNumber = new Intl.NumberFormat().format;\n\nexport const decimalToPercent = (value: number) =>\n  Math.round((value + Number.EPSILON) * 100);\n\nexport const withThousandSeparator = (value?: number, separator = SPACE) => {\n  if (value)\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, separator);\n  return '0';\n};\n\n// TODO: This is added to handle '1K+' phrase we get due to the aggregate limitations for advanced filters.\nexport const withThousandSeparatorStringExtended = (\n  value: number | string,\n  separator = SPACE\n) => {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  return withThousandSeparator(value, separator);\n};\n\nexport const formatBigNumbersWithSuffix = (value: number): string => {\n  const MILLION = 1000000;\n  const TEN_THOUSAND = 10000;\n  const THOUSAND = 1000;\n\n  const isMillions = value > MILLION;\n  const isTenThousands = value > TEN_THOUSAND;\n\n  // if value is >1M display suffix with 'M+'\n  if (isMillions) {\n    const millions = (value / MILLION).toFixed(1);\n    // remove any .0\n    const cleanMillions =\n      millions[millions.length - 1] === '0' ? millions.split('.')[0] : millions;\n    return `${cleanMillions}M+`;\n  }\n\n  // if value is >10k and <999k display suffix with 'K+'.\n  if (isTenThousands) {\n    const hundreds = (value / THOUSAND).toFixed(1);\n    const cleanHundreds =\n      hundreds[hundreds.length - 1] === '0' ? hundreds.split('.')[0] : hundreds;\n    return `${cleanHundreds}K+`;\n  }\n\n  // if value below <10k, just display the original value.\n  return String(value);\n};\n\n// TODO: This is added to handle '1K+' phrase we get due to the aggregate limitations for advanced filters.\nexport const formatBigNumbersWithSuffixStringExtended = (\n  value: number | string\n) => {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  return formatBigNumbersWithSuffix(value);\n};\n\nexport const isNumber = (value: number) => !Number.isNaN(value);\n\nexport const isNumeric = (value: string) => {\n  return /^-?\\d+$/.test(value);\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,cAAc;AAEpC,OAAO,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAACC,YAAY,EAAE,CAACC,MAAM;AAE1D,OAAO,MAAMC,gBAAgB,GAAIC,KAAa,IAC5CC,IAAI,CAACC,KAAK,CAAC,CAACF,KAAK,GAAGG,MAAM,CAACC,OAAO,IAAI,GAAG,CAAC;AAE5C,OAAO,MAAMC,qBAAqB,GAAG,CAACL,KAAc,EAAEM,SAAS,GAAGZ,KAAK,KAAK;EAC1E,IAAIM,KAAK,EACP,OAAOA,KAAK,CAACO,QAAQ,EAAE,CAACC,OAAO,CAAC,uBAAuB,EAAEF,SAAS,CAAC;EACrE,OAAO,GAAG;AACZ,CAAC;;AAED;AACA,OAAO,MAAMG,mCAAmC,GAAG,CACjDT,KAAsB,EACtBM,SAAS,GAAGZ,KAAK,KACd;EACH,IAAI,OAAOM,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EAEA,OAAOK,qBAAqB,CAACL,KAAK,EAAEM,SAAS,CAAC;AAChD,CAAC;AAED,OAAO,MAAMI,0BAA0B,GAAIV,KAAa,IAAa;EACnE,MAAMW,OAAO,GAAG,OAAO;EACvB,MAAMC,YAAY,GAAG,KAAK;EAC1B,MAAMC,QAAQ,GAAG,IAAI;EAErB,MAAMC,UAAU,GAAGd,KAAK,GAAGW,OAAO;EAClC,MAAMI,cAAc,GAAGf,KAAK,GAAGY,YAAY;;EAE3C;EACA,IAAIE,UAAU,EAAE;IACd,MAAME,QAAQ,GAAG,CAAChB,KAAK,GAAGW,OAAO,EAAEM,OAAO,CAAC,CAAC,CAAC;IAC7C;IACA,MAAMC,aAAa,GACjBF,QAAQ,CAACA,QAAQ,CAACG,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,GAAGH,QAAQ,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGJ,QAAQ;IAC3E,OAAQ,GAAEE,aAAc,IAAG;EAC7B;;EAEA;EACA,IAAIH,cAAc,EAAE;IAClB,MAAMM,QAAQ,GAAG,CAACrB,KAAK,GAAGa,QAAQ,EAAEI,OAAO,CAAC,CAAC,CAAC;IAC9C,MAAMK,aAAa,GACjBD,QAAQ,CAACA,QAAQ,CAACF,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,GAAGE,QAAQ,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGC,QAAQ;IAC3E,OAAQ,GAAEC,aAAc,IAAG;EAC7B;;EAEA;EACA,OAAOC,MAAM,CAACvB,KAAK,CAAC;AACtB,CAAC;;AAED;AACA,OAAO,MAAMwB,wCAAwC,GACnDxB,KAAsB,IACnB;EACH,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;EACd;EAEA,OAAOU,0BAA0B,CAACV,KAAK,CAAC;AAC1C,CAAC;AAED,OAAO,MAAMyB,QAAQ,GAAIzB,KAAa,IAAK,CAACG,MAAM,CAACuB,KAAK,CAAC1B,KAAK,CAAC;AAE/D,OAAO,MAAM2B,SAAS,GAAI3B,KAAa,IAAK;EAC1C,OAAO,SAAS,CAAC4B,IAAI,CAAC5B,KAAK,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"module"}