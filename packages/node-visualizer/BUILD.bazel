load("@npm//rollup:index.bzl", "rollup")
load("@npm//jest:index.bzl", "jest")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin", "js_library", "pkg_npm")
load("//rules/test:jest.bzl", "jest_test")
load("//rules/lint:index.bzl", "eslint_config", "eslint_test", "prettier_test")
load("//rules/package_json_helpers:generate.bzl", "generate_package_json_helpers")
load("//rules/package_json_helpers:module_mappings.bzl", "module_mappings")
load("//rules/npm:is_published.bzl", "is_published")
load("//rules/npm:package_info.bzl", "package_info")
load("//rules/npm:append_deps.bzl", "append_deps")
load("@npm//@storybook/react:index.bzl", "start_storybook")

SOURCES = glob(
    [
        "src/*.ts",
        "src/*.tsx",
        "src/**/*.ts",
        "src/**/*.tsx",
        "src/**/*.png",
    ],
    exclude = ["src/**/*.spec.ts"],
)

TESTS = glob(["src/**/*.spec.ts"])

# Generates the below helpers.
#
# Usage:
#   bazel run :generate_package_json_helpers
generate_package_json_helpers(
    name = "generate_package_json_helpers",
    local_package_json = ":package.json",
    out_dir = "dist",
    package_json = "//:package.json",
    src_dir = "src",
    workspace = "@npm",
)

### start of auto-generated helpers ###

# Dependencies from package.json
DEPENDENCIES = [
    "@npm//@cognite/geospatial-sdk-js",
    "@npm//@cognite/potree-core",
    "@npm//@cognite/cogs.js",
    "@npm//@cognite/seismic-sdk-js",
    "@npm//@reduxjs/toolkit",
    "@npm//color",
    "@npm//react",
    "@npm//react-color",
    "@npm//react-draggable",
    "@npm//react-is",
    "@npm//react-redux",
    "@npm//react-split-pane",
    "@npm//react-virtualized",
    "@npm//react-dom",
    "@npm//redux",
    "@npm//three",
    "@npm//utm",
    "@npm//uuid",
    "@npm//styled-components",
    "@npm//camera-controls",
    "@npm//immer",
]

# Type dependencies from package.json
TYPE_DEPENDENCIES = [
    "@npm//@types/lodash",
    "@npm//@types/color",
    "@npm//@types/react",
    "@npm//@types/react-dom",
    "@npm//@types/react-color",
    "@npm//@types/react-virtualized",
    "@npm//@types/react-redux",
    "@npm//@types/styled-components",
    "@npm//@types/utm",
    "@npm//@types/uuid",
]

# Dev dependencies from package.json
DEV_DEPENDENCIES = [
    "@npm//@rollup/plugin-image",
    "@npm//@testing-library/jest-dom",
    "@npm//@testing-library/react",
    "@npm//rollup-plugin-json",
    "@npm//rollup-plugin-typescript2",
    "@npm//@rollup/plugin-alias",
    "@npm//@rollup/plugin-node-resolve",
    "@npm//typescript",
]

_RUNTIME_DEPS = [
    "chdir.js",
    "copy_static_files",
    "//:tsconfig",
]

# Mappings for absolute imports from baseUrl @unused
mappings_dict = {
    "__tests__": "dist/__tests__",
}

### end of auto-generated helpers ###

eslint_config(
    name = "eslint_config",
    src = ":.eslintrc.js",
    deps = [
        "//:eslint_config",
        "//packages:eslint_config",
    ],
)

eslint_test(
    name = "eslint_test",
    data = SOURCES + TESTS + [
        ":tsconfig.json",
        "//packages:tsconfig.json",
        "//:tsconfig.json",
    ],
    eslint_config = ":eslint_config",
)

prettier_test(
    name = "prettier_test",
    data = SOURCES + TESTS,
    prettier_config = "//:prettier_config",
)

jest_test(
    name = "jest_test",
    srcs = SOURCES + TESTS + [
        "//packages:jest.config.js",
        "//packages:jest.react.config.js",
        ":tsconfig.json",
        "//:tsconfig.json",
        "//packages:tsconfig.json",
    ],
    jest_args = [],
    jest_config = "jest.config.js",
    service_name = "node-visualizer",
    deps = DEPENDENCIES + DEV_DEPENDENCIES + TYPE_DEPENDENCIES,
)

# For ibazel run to properly pick the changes we need to run from the Workspace directory
write_file(
    name = "write_chdir_worspace_script",
    out = "chdir-workspace.js",
    content = ["process.chdir(require('path').join(process.env.BUILD_WORKSPACE_DIRECTORY, '" + package_name() + "'));"],
)

jest(
    name = "jest",
    args = [
        "--node_options=--require=./$(rootpath chdir-workspace.js)",
        "--config",
        "jest.config.js",
        "--runInBand",
        "--watchAll",
    ],
    data = [
        "chdir-workspace.js",
        "jest.config.js",
        "tsconfig.json",
        "//:tsconfig.json",
        "//packages:jest.config.js",
        "//packages:tsconfig.json",
    ],
    tags = [
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)

write_file(
    name = "write_chdir_script",
    out = "chdir.js",
    content = ["process.chdir(__dirname)"],
)

copy_to_bin(
    name = "copy_static_files",
    srcs = SOURCES + [
        ":rollup.config.js",
        ":tsconfig.json",
    ],
)

rollup(
    name = "dist",
    args = [
        "--banner=//node-visualizer",
        "--node_options=--require=./$(execpath //scripts:log.js)",
        "--node_options=--require=./$(execpath chdir.js)",
        "-c",
        "rollup.config.js",
    ],
    data = DEPENDENCIES + DEV_DEPENDENCIES + TYPE_DEPENDENCIES + [
        "//scripts:log.js",
        ":chdir.js",
        ":copy_static_files",
        ":package-json",
        "//packages:tsconfig",
        "//:tsconfig",
        "@npm//@types/jest",
        "@npm//@types/node",
        "@npm//tslib",
    ],
    output_dir = True,
)

_mappings = module_mappings(
    name = "mappings",
    mappings = mappings_dict,
)

js_library(
    name = "node-visualizer",
    package_name = "@cognite/node-visualizer",
    srcs = ["package-json"],
    visibility = ["//visibility:public"],
    deps = DEPENDENCIES + ["dist"],
)

append_deps(
    name = "package-json",
    dependencies = DEPENDENCIES,
    dev_dependencies = DEV_DEPENDENCIES + TYPE_DEPENDENCIES,
    package = "package.json",
)

pkg_npm(
    name = "npm-package",
    package_name = "@cognite/node-visualizer",
    visibility = ["//visibility:public"],
    deps = [
        "dist",
        "package-json",
    ] + _mappings,
)

is_published(
    name = "is_published",
    package = ":npm-package",
)

package_info(
    name = "package_info",
    display_name = "node-visualizer",
    package = ":npm-package",
)

## Storybook ##
_STORYBOOK = [
    ".storybook/*",
    "stories/**/*",
]

STORYBOOK = glob(_STORYBOOK)

copy_to_bin(
    name = "copy_storybook_files",
    srcs = STORYBOOK,
)

start_storybook(
    name = "start-storybook",
    args = [
        "--node_options=--require=./$(rootpath chdir-workspace.js)",
        "-p",
        "6006",
    ],
    data = _RUNTIME_DEPS + DEPENDENCIES + DEV_DEPENDENCIES + [
        "//packages/node-visualizer",
        "chdir-workspace.js",
        "copy_storybook_files",
        "@npm//@types",
        "@npm//@storybook/addon-essentials",
        "@npm//@storybook/addon-links",
        "@npm//@storybook/addon-viewport",
        "@npm//@storybook/preset-create-react-app",
    ],
    tags = [
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and target will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)
