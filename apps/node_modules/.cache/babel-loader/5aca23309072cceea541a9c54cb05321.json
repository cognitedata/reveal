{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport { isNumeric, METADATA_ALL_VALUE } from '@data-exploration-lib/core';\nimport { AdvancedFilterBuilder } from '../../../builders';\nimport { getSearchConfig } from '../../../utils';\nexport const mapFiltersToSequenceAdvancedFilters = ({\n  dataSetIds,\n  createdTime,\n  lastUpdatedTime,\n  externalIdPrefix,\n  metadata,\n  internalId\n}, query, searchConfig = getSearchConfig().sequence) => {\n  const builder = new AdvancedFilterBuilder();\n  const filterBuilder = new AdvancedFilterBuilder().in('dataSetId', () => {\n    return dataSetIds?.reduce((acc, {\n      value\n    }) => {\n      if (typeof value === 'number') {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).equals('id', internalId).prefix('externalId', externalIdPrefix).range('createdTime', {\n    lte: createdTime?.max,\n    gte: createdTime?.min\n  }).range('lastUpdatedTime', {\n    lte: lastUpdatedTime?.max,\n    gte: lastUpdatedTime?.min\n  });\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder();\n    for (const {\n      key,\n      value\n    } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n  builder.and(filterBuilder);\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder();\n    if (searchConfig.name.enabled) {\n      searchQueryBuilder.equals('name', query);\n      searchQueryBuilder.prefix('name', query);\n      if (searchConfig.name.enabledFuzzySearch) {\n        searchQueryBuilder.search('name', query);\n      }\n    }\n    if (searchConfig.description.enabled) {\n      searchQueryBuilder.equals('description', query);\n      searchQueryBuilder.prefix('description', query);\n      if (searchConfig.description.enabledFuzzySearch) {\n        searchQueryBuilder.search('description', query);\n      }\n    }\n\n    /**\n     * We want to filter all the metadata keys with the search query, to give a better result\n     * to the user when using our search.\n     */\n    if (searchConfig.metadata.enabled) {\n      searchQueryBuilder.equals(`metadata`, query);\n      searchQueryBuilder.prefix(`metadata`, query);\n    }\n    if (isNumeric(query) && searchConfig.id.enabled) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals(`externalId`, query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n    builder.or(searchQueryBuilder);\n  }\n  return new AdvancedFilterBuilder().and(builder).build();\n};","map":{"version":3,"names":["isEmpty","isNumeric","METADATA_ALL_VALUE","AdvancedFilterBuilder","getSearchConfig","mapFiltersToSequenceAdvancedFilters","dataSetIds","createdTime","lastUpdatedTime","externalIdPrefix","metadata","internalId","query","searchConfig","sequence","builder","filterBuilder","in","reduce","acc","value","equals","prefix","range","lte","max","gte","min","metadataBuilder","key","exists","or","and","searchQueryBuilder","name","enabled","enabledFuzzySearch","search","description","id","Number","externalId","build"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/sequence/internal/transformers/mapFiltersToSequenceAdvancedFilters.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\n\nimport {\n  InternalSequenceFilters,\n  isNumeric,\n  SequenceConfigType,\n  METADATA_ALL_VALUE,\n} from '@data-exploration-lib/core';\n\nimport { AdvancedFilter, AdvancedFilterBuilder } from '../../../builders';\nimport { getSearchConfig } from '../../../utils';\n\nexport type SequenceProperties = {\n  assetIds: number[];\n  dataSetId: number[];\n  externalId: string;\n  name: string;\n  description: string;\n  id: number;\n  metadata: string;\n  [key: `metadata|${string}`]: string;\n};\n\nexport const mapFiltersToSequenceAdvancedFilters = (\n  {\n    dataSetIds,\n    createdTime,\n    lastUpdatedTime,\n    externalIdPrefix,\n    metadata,\n    internalId,\n  }: InternalSequenceFilters,\n  query?: string,\n  searchConfig: SequenceConfigType = getSearchConfig().sequence\n): AdvancedFilter<SequenceProperties> | undefined => {\n  const builder = new AdvancedFilterBuilder<SequenceProperties>();\n\n  const filterBuilder = new AdvancedFilterBuilder<SequenceProperties>()\n    .in('dataSetId', () => {\n      return dataSetIds?.reduce((acc, { value }) => {\n        if (typeof value === 'number') {\n          return [...acc, value];\n        }\n        return acc;\n      }, [] as number[]);\n    })\n    .equals('id', internalId)\n    .prefix('externalId', externalIdPrefix)\n    .range('createdTime', {\n      lte: createdTime?.max as number,\n      gte: createdTime?.min as number,\n    })\n    .range('lastUpdatedTime', {\n      lte: lastUpdatedTime?.max as number,\n      gte: lastUpdatedTime?.min as number,\n    });\n\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder<SequenceProperties>();\n    for (const { key, value } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n\n  builder.and(filterBuilder);\n\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder<SequenceProperties>();\n\n    if (searchConfig.name.enabled) {\n      searchQueryBuilder.equals('name', query);\n      searchQueryBuilder.prefix('name', query);\n\n      if (searchConfig.name.enabledFuzzySearch) {\n        searchQueryBuilder.search('name', query);\n      }\n    }\n\n    if (searchConfig.description.enabled) {\n      searchQueryBuilder.equals('description', query);\n      searchQueryBuilder.prefix('description', query);\n\n      if (searchConfig.description.enabledFuzzySearch) {\n        searchQueryBuilder.search('description', query);\n      }\n    }\n\n    /**\n     * We want to filter all the metadata keys with the search query, to give a better result\n     * to the user when using our search.\n     */\n    if (searchConfig.metadata.enabled) {\n      searchQueryBuilder.equals(`metadata`, query);\n      searchQueryBuilder.prefix(`metadata`, query);\n    }\n\n    if (isNumeric(query) && searchConfig.id.enabled) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals(`externalId`, query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n\n    builder.or(searchQueryBuilder);\n  }\n\n  return new AdvancedFilterBuilder<SequenceProperties>().and(builder).build();\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AAEpC,SAEEC,SAAS,EAETC,kBAAkB,QACb,4BAA4B;AAEnC,SAAyBC,qBAAqB,QAAQ,mBAAmB;AACzE,SAASC,eAAe,QAAQ,gBAAgB;AAahD,OAAO,MAAMC,mCAAmC,GAAG,CACjD;EACEC,UAAU;EACVC,WAAW;EACXC,eAAe;EACfC,gBAAgB;EAChBC,QAAQ;EACRC;AACuB,CAAC,EAC1BC,KAAc,EACdC,YAAgC,GAAGT,eAAe,EAAE,CAACU,QAAQ,KACV;EACnD,MAAMC,OAAO,GAAG,IAAIZ,qBAAqB,EAAsB;EAE/D,MAAMa,aAAa,GAAG,IAAIb,qBAAqB,EAAsB,CAClEc,EAAE,CAAC,WAAW,EAAE,MAAM;IACrB,OAAOX,UAAU,EAAEY,MAAM,CAAC,CAACC,GAAG,EAAE;MAAEC;IAAM,CAAC,KAAK;MAC5C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,CAAC,GAAGD,GAAG,EAAEC,KAAK,CAAC;MACxB;MACA,OAAOD,GAAG;IACZ,CAAC,EAAE,EAAE,CAAa;EACpB,CAAC,CAAC,CACDE,MAAM,CAAC,IAAI,EAAEV,UAAU,CAAC,CACxBW,MAAM,CAAC,YAAY,EAAEb,gBAAgB,CAAC,CACtCc,KAAK,CAAC,aAAa,EAAE;IACpBC,GAAG,EAAEjB,WAAW,EAAEkB,GAAa;IAC/BC,GAAG,EAAEnB,WAAW,EAAEoB;EACpB,CAAC,CAAC,CACDJ,KAAK,CAAC,iBAAiB,EAAE;IACxBC,GAAG,EAAEhB,eAAe,EAAEiB,GAAa;IACnCC,GAAG,EAAElB,eAAe,EAAEmB;EACxB,CAAC,CAAC;EAEJ,IAAIjB,QAAQ,EAAE;IACZ,MAAMkB,eAAe,GAAG,IAAIzB,qBAAqB,EAAsB;IACvE,KAAK,MAAM;MAAE0B,GAAG;MAAET;IAAM,CAAC,IAAIV,QAAQ,EAAE;MACrC,IAAIU,KAAK,KAAKlB,kBAAkB,EAAE;QAChC0B,eAAe,CAACE,MAAM,CAAE,YAAWD,GAAI,EAAC,CAAC;MAC3C,CAAC,MAAM;QACLD,eAAe,CAACP,MAAM,CAAE,YAAWQ,GAAI,EAAC,EAAET,KAAK,CAAC;MAClD;IACF;IACAJ,aAAa,CAACe,EAAE,CAACH,eAAe,CAAC;EACnC;EAEAb,OAAO,CAACiB,GAAG,CAAChB,aAAa,CAAC;EAE1B,IAAIJ,KAAK,IAAI,CAACZ,OAAO,CAACY,KAAK,CAAC,EAAE;IAC5B,MAAMqB,kBAAkB,GAAG,IAAI9B,qBAAqB,EAAsB;IAE1E,IAAIU,YAAY,CAACqB,IAAI,CAACC,OAAO,EAAE;MAC7BF,kBAAkB,CAACZ,MAAM,CAAC,MAAM,EAAET,KAAK,CAAC;MACxCqB,kBAAkB,CAACX,MAAM,CAAC,MAAM,EAAEV,KAAK,CAAC;MAExC,IAAIC,YAAY,CAACqB,IAAI,CAACE,kBAAkB,EAAE;QACxCH,kBAAkB,CAACI,MAAM,CAAC,MAAM,EAAEzB,KAAK,CAAC;MAC1C;IACF;IAEA,IAAIC,YAAY,CAACyB,WAAW,CAACH,OAAO,EAAE;MACpCF,kBAAkB,CAACZ,MAAM,CAAC,aAAa,EAAET,KAAK,CAAC;MAC/CqB,kBAAkB,CAACX,MAAM,CAAC,aAAa,EAAEV,KAAK,CAAC;MAE/C,IAAIC,YAAY,CAACyB,WAAW,CAACF,kBAAkB,EAAE;QAC/CH,kBAAkB,CAACI,MAAM,CAAC,aAAa,EAAEzB,KAAK,CAAC;MACjD;IACF;;IAEA;AACJ;AACA;AACA;IACI,IAAIC,YAAY,CAACH,QAAQ,CAACyB,OAAO,EAAE;MACjCF,kBAAkB,CAACZ,MAAM,CAAE,UAAS,EAAET,KAAK,CAAC;MAC5CqB,kBAAkB,CAACX,MAAM,CAAE,UAAS,EAAEV,KAAK,CAAC;IAC9C;IAEA,IAAIX,SAAS,CAACW,KAAK,CAAC,IAAIC,YAAY,CAAC0B,EAAE,CAACJ,OAAO,EAAE;MAC/CF,kBAAkB,CAACZ,MAAM,CAAC,IAAI,EAAEmB,MAAM,CAAC5B,KAAK,CAAC,CAAC;IAChD;IACA,IAAIC,YAAY,CAAC4B,UAAU,CAACN,OAAO,EAAE;MACnCF,kBAAkB,CAACZ,MAAM,CAAE,YAAW,EAAET,KAAK,CAAC;MAC9CqB,kBAAkB,CAACX,MAAM,CAAC,YAAY,EAAEV,KAAK,CAAC;IAChD;IAEAG,OAAO,CAACgB,EAAE,CAACE,kBAAkB,CAAC;EAChC;EAEA,OAAO,IAAI9B,qBAAqB,EAAsB,CAAC6B,GAAG,CAACjB,OAAO,CAAC,CAAC2B,KAAK,EAAE;AAC7E,CAAC"},"metadata":{},"sourceType":"module"}