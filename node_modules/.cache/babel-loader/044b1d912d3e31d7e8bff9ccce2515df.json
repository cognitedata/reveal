{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport omit from 'lodash/omit';\nimport { mergeDynamicFilterOptions } from '../../../utils/mergeDynamicFilterOptions';\nimport { useDocumentsLabelAggregateQuery } from '../../service';\nimport { mapFiltersToDocumentSearchFilters } from '../transformers';\nexport const useDocumentsLabelsFilterOptions = ({\n  searchQuery,\n  filter = {},\n  query\n}) => {\n  _s();\n  const {\n    data = [],\n    isLoading,\n    isError\n  } = useDocumentsLabelAggregateQuery({\n    query\n  });\n  const {\n    data: dynamicData = []\n  } = useDocumentsLabelAggregateQuery({\n    filter: mapFiltersToDocumentSearchFilters(omit(filter, 'labels'), searchQuery),\n    query\n  });\n  const options = useMemo(() => {\n    return mergeDynamicFilterOptions(data, dynamicData);\n  }, [data, dynamicData]);\n  return {\n    options,\n    isLoading,\n    isError\n  };\n};\n_s(useDocumentsLabelsFilterOptions, \"iSF1qXb2BKY4oDBXeMqXGrNz+X4=\", false, function () {\n  return [useDocumentsLabelAggregateQuery, useDocumentsLabelAggregateQuery];\n});","map":{"version":3,"names":["useMemo","omit","mergeDynamicFilterOptions","useDocumentsLabelAggregateQuery","mapFiltersToDocumentSearchFilters","useDocumentsLabelsFilterOptions","searchQuery","filter","query","data","isLoading","isError","dynamicData","options"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/documents/internal/queries/useDocumentsLabelsFilterOptions.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport omit from 'lodash/omit';\n\nimport { InternalDocumentFilter } from '@data-exploration-lib/core';\n\nimport { mergeDynamicFilterOptions } from '../../../utils/mergeDynamicFilterOptions';\nimport { useDocumentsLabelAggregateQuery } from '../../service';\nimport { mapFiltersToDocumentSearchFilters } from '../transformers';\n\ninterface Props {\n  searchQuery?: string;\n  filter?: InternalDocumentFilter;\n  query?: string;\n}\n\nexport const useDocumentsLabelsFilterOptions = ({\n  searchQuery,\n  filter = {},\n  query,\n}: Props) => {\n  const {\n    data = [],\n    isLoading,\n    isError,\n  } = useDocumentsLabelAggregateQuery({\n    query,\n  });\n\n  const { data: dynamicData = [] } = useDocumentsLabelAggregateQuery({\n    filter: mapFiltersToDocumentSearchFilters(\n      omit(filter, 'labels'),\n      searchQuery\n    ),\n    query,\n  });\n\n  const options = useMemo(() => {\n    return mergeDynamicFilterOptions(data, dynamicData);\n  }, [data, dynamicData]);\n\n  return {\n    options,\n    isLoading,\n    isError,\n  };\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,OAAOC,IAAI,MAAM,aAAa;AAI9B,SAASC,yBAAyB,QAAQ,0CAA0C;AACpF,SAASC,+BAA+B,QAAQ,eAAe;AAC/D,SAASC,iCAAiC,QAAQ,iBAAiB;AAQnE,OAAO,MAAMC,+BAA+B,GAAG,CAAC;EAC9CC,WAAW;EACXC,MAAM,GAAG,CAAC,CAAC;EACXC;AACK,CAAC,KAAK;EAAA;EACX,MAAM;IACJC,IAAI,GAAG,EAAE;IACTC,SAAS;IACTC;EACF,CAAC,GAAGR,+BAA+B,CAAC;IAClCK;EACF,CAAC,CAAC;EAEF,MAAM;IAAEC,IAAI,EAAEG,WAAW,GAAG;EAAG,CAAC,GAAGT,+BAA+B,CAAC;IACjEI,MAAM,EAAEH,iCAAiC,CACvCH,IAAI,CAACM,MAAM,EAAE,QAAQ,CAAC,EACtBD,WAAW,CACZ;IACDE;EACF,CAAC,CAAC;EAEF,MAAMK,OAAO,GAAGb,OAAO,CAAC,MAAM;IAC5B,OAAOE,yBAAyB,CAACO,IAAI,EAAEG,WAAW,CAAC;EACrD,CAAC,EAAE,CAACH,IAAI,EAAEG,WAAW,CAAC,CAAC;EAEvB,OAAO;IACLC,OAAO;IACPH,SAAS;IACTC;EACF,CAAC;AACH,CAAC;AAAC,GA9BWN,+BAA+B;EAAA,QAStCF,+BAA+B,EAIAA,+BAA+B;AAAA"},"metadata":{},"sourceType":"module"}