{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s10 = $RefreshSig$();\nimport { useInfiniteQuery, useQuery } from '@tanstack/react-query';\nimport { isEqual as equal } from 'lodash';\nimport { useSDK } from '@cognite/sdk-provider';\nimport { aggregateApi, post, listApi as _listApi, searchApi } from '../api';\nimport { aggregateKey, byIdKey, listGroupsKey, infiniteListCacheKey, infiniteSearchCacheKey, listKey, retrieveItemsKey, searchCacheKey, capabilitiesKey } from '../keys';\n\n/**\n * @deprecated this was exported out of the package by mistake, will be removed\n */\nexport const aggregate = aggregateApi;\n/**\n * @deprecated this was exported out of the package by mistake, will be removed\n */\nexport const listApi = _listApi;\n\n/**\n * The valid resoruce types these hooks are intended to work with\n */\n\n/**\n * ## Example\n * ```typescript\n * const { data } = useAggregate('assets', { dataSetIds: [{id: 5334549879450276}]} );\n * console.log(data?.count)\n * ```\n */\nexport const useAggregate = (type, filter, config) => {\n  _s();\n  const sdk = useSDK();\n  return useQuery(aggregateKey(type, filter), () => aggregateApi(sdk, type, filter), config);\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: myAsset, isFetched } = useCdfItem('assets', 2173222508977208, { cacheTime: 42 });\n * const { data: myTs, isFetched } = useCdfItem('timeseries', 16341836877020, { enabled: isFetched });\n * ```\n */\n_s(useAggregate, \"PmNYcoJFBmvG9WfZuMOcBXEzd1A=\", false, function () {\n  return [useSDK, useQuery];\n});\nexport const useCdfItem = (type, id, config) => {\n  _s2();\n  const sdk = useSDK();\n  const ids = [id];\n  return useQuery(byIdKey(type, id), () => post(sdk, `/${type}/byids`, {\n    items: ids\n  }).then(d => d?.items[0]), config);\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: twoAssets } = useCdfItems('assets',[{id: 42}, {externalId: 'everything'}]);\n * ```\n */\n_s2(useCdfItem, \"PmNYcoJFBmvG9WfZuMOcBXEzd1A=\", false, function () {\n  return [useSDK, useQuery];\n});\nexport const useCdfItems = (type, ids, ignoreUnknownIds = false, config) => {\n  _s3();\n  const sdk = useSDK();\n  const sortedIds = ids.filter(i => !!i.id || !!i.externalId).sort((a, b) => `${a?.id}${a?.externalId}`.localeCompare(`${b?.id}${b?.externalId}`));\n  return useQuery(retrieveItemsKey(type, sortedIds), () => {\n    if (sortedIds.length > 0) {\n      return post(sdk, `/${type}/byids`, {\n        items: sortedIds,\n        ignoreUnknownIds\n      }).then(d => d?.items);\n    }\n    return [];\n  }, config);\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: events } = useList('events');\n * const { data: assets } = useList('assets', { filter: { dataSetIds: [{id: 5334549879450276}]} })\n * ```\n */\n_s3(useCdfItems, \"PmNYcoJFBmvG9WfZuMOcBXEzd1A=\", false, function () {\n  return [useSDK, useQuery];\n});\nexport const useList = (type, body, config, noCleanUp = false) => {\n  _s4();\n  const sdk = useSDK();\n  const processedBody = noCleanUp ? body : cleanupBody(body);\n  return useQuery(listKey(type, processedBody), () => _listApi(sdk, type, processedBody), config);\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: searchResult } = useSearch('assets', '10 19');\n * ```\n */\n_s4(useList, \"PmNYcoJFBmvG9WfZuMOcBXEzd1A=\", false, function () {\n  return [useSDK, useQuery];\n});\nexport const useSearch = (type, query, body, config) => {\n  _s5();\n  const sdk = useSDK();\n  const processedBody = cleanupBody(body);\n  return useQuery(searchCacheKey(type, query, processedBody), () => searchApi(sdk, type, query, processedBody), config);\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: searchResult, hasNextPage, fetchNextPage } = useInfiniteList('assets', '10 19');\n * ```\n */\n_s5(useSearch, \"PmNYcoJFBmvG9WfZuMOcBXEzd1A=\", false, function () {\n  return [useSDK, useQuery];\n});\nexport const useInfiniteSearch = (type, query, limit = 10, filter, config) => {\n  _s6();\n  const sdk = useSDK();\n  return useInfiniteQuery(infiniteSearchCacheKey(type, query, filter), async ({\n    pageParam: offset\n  }) => {\n    const offsetLimit = offset ? limit + offset : limit;\n    const body = filter ? {\n      filter,\n      limit: offsetLimit\n    } : {\n      limit: offsetLimit\n    };\n    const result = await searchApi(sdk, type, query, body);\n    if (offset) {\n      return result.slice(offset, offset + limit);\n    }\n    return result;\n  }, {\n    getNextPageParam: (page, allPages) => {\n      const itemCount = allPages.reduce((accl, p) => accl + p.length, 0);\n      if (page.length === limit) {\n        return itemCount;\n      }\n      return undefined;\n    },\n    ...config\n  });\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data, hasNextPage, fetchNextPage } = useInfiniteList('assets', 10);\n * ```\n */\n_s6(useInfiniteSearch, \"d6A0fwr4GOP6j8hbc2RI8uLwBLI=\", false, function () {\n  return [useSDK, useInfiniteQuery];\n});\nexport const useInfiniteList = (type, limit = 100, filter, config) => {\n  _s7();\n  const sdk = useSDK();\n  return useInfiniteQuery(infiniteListCacheKey(type, filter), ({\n    pageParam\n  }) => post(sdk, `/${type}/list`, cleanupBody({\n    limit,\n    filter,\n    cursor: pageParam\n  })), {\n    getNextPageParam: r => r?.nextCursor,\n    ...config\n  });\n};\n_s7(useInfiniteList, \"d6A0fwr4GOP6j8hbc2RI8uLwBLI=\", false, function () {\n  return [useSDK, useInfiniteQuery];\n});\nconst cleanupBody = body => {\n  let processedBody = {\n    ...body\n  };\n  if (processedBody.filter && typeof processedBody.filter === 'object' && Object.keys(processedBody.filter).length === 0) {\n    // filter should always be non-empty\n    delete processedBody.filter;\n  }\n  // body should always be non-empty\n  if (Object.keys(processedBody).length === 0) {\n    processedBody = undefined;\n  }\n  return processedBody;\n};\n\n/**\n * This hook uses the groups API for legacy auth flow and token/inspect for OIDC.\n * It returns false until the groups are fetched. You can use `isLoading` or\n * `isFetching` booleans to check loading state.\n *\n * If you don't provide a scope parameter, it will check if the user has the\n * capability for **any** scope.\n *\n * ## Example\n * ```typescript\n * const { data: hasAssetRead } = usePermissions(flow, 'assetsAcl', 'READ');\n * const { data: hasAssetWrite} = usePermissions(flow, 'assetsAcl', 'WRITE');\n * const { data: hasAssetRead } = usePermissions(flow, 'assetsAcl', 'READ', { all: {} });\n * ```\n */\n\nexport const usePermissions = (flow, capability, action, scope, options) => {\n  _s8();\n  const {\n    data,\n    ...queryProps\n  } = useCapabilities(flow, options);\n  const capabilities = data?.filter(c => c.acl === capability && (scope ? equal(c.scope, scope) : true)) ?? [];\n  return {\n    ...queryProps,\n    data: !!capabilities.length && (action ? capabilities.some(c => c.actions.some(a => a.toLowerCase() === action.toLowerCase())) : true)\n  };\n};\n\n/**\n * A hook to lookup a group in cdf.\n *\n * @param name the group name you want to find\n * @returns the result of useQuery plus a data field with Group | undefined\n */\n_s8(usePermissions, \"JOhDHB0kcKnzbCTipiOksotgDd0=\", false, function () {\n  return [useCapabilities];\n});\nexport const useGroup = (name, config) => {\n  _s9();\n  const sdk = useSDK();\n  const request = useQuery(listGroupsKey({\n    all: true\n  }), () => sdk.groups.list({\n    all: true\n  }), config);\n  return {\n    ...request,\n    data: (request.data || []).find(group => group.name === name)\n  };\n};\n_s9(useGroup, \"xXqVw4wLG6QRRj1s6SUDVzACtMI=\", false, function () {\n  return [useSDK, useQuery];\n});\nconst groupCapabilities = async sdk => {\n  const groups = await sdk.groups.list();\n  const capabilities = [];\n  groups.forEach(g => {\n    g.capabilities?.forEach(c => {\n      const acl = Object.keys(c).filter(k => k.includes('Acl'))[0];\n      const {\n        actions,\n        scope\n      } = c[acl];\n      const preExisting = capabilities.find(c => c.acl === acl && equal(scope, c.scope));\n      if (preExisting) {\n        preExisting.actions = preExisting.actions.concat(actions);\n      } else {\n        capabilities.push({\n          acl,\n          actions,\n          scope\n        });\n      }\n    });\n  });\n  return capabilities.map(c => ({\n    ...c,\n    actions: [...new Set(c.actions)]\n  }));\n};\nconst tokenCapability = async sdk => {\n  const {\n    data\n  } = await sdk.get('/api/v1/token/inspect');\n  const capabilities = data.capabilities || [];\n  return capabilities.map(c => {\n    const acl = Object.keys(c).filter(c => c.includes('Acl'))[0];\n    const actions = c[acl].actions;\n    const scope = c[acl].scope;\n    return {\n      acl,\n      actions,\n      scope\n    };\n  });\n};\nexport const useCapabilities = (flow, options) => {\n  _s10();\n  const sdk = useSDK();\n  const nativeTokens = flow !== 'COGNITE_AUTH';\n  return useQuery(capabilitiesKey(), () => {\n    if (nativeTokens) {\n      return tokenCapability(sdk);\n    } else {\n      return groupCapabilities(sdk);\n    }\n  }, options);\n};\n_s10(useCapabilities, \"PmNYcoJFBmvG9WfZuMOcBXEzd1A=\", false, function () {\n  return [useSDK, useQuery];\n});","map":{"version":3,"names":["useInfiniteQuery","useQuery","isEqual","equal","useSDK","aggregateApi","post","listApi","_listApi","searchApi","aggregateKey","byIdKey","listGroupsKey","infiniteListCacheKey","infiniteSearchCacheKey","listKey","retrieveItemsKey","searchCacheKey","capabilitiesKey","aggregate","useAggregate","type","filter","config","sdk","useCdfItem","id","ids","items","then","d","useCdfItems","ignoreUnknownIds","sortedIds","i","externalId","sort","a","b","localeCompare","length","useList","body","noCleanUp","processedBody","cleanupBody","useSearch","query","useInfiniteSearch","limit","pageParam","offset","offsetLimit","result","slice","getNextPageParam","page","allPages","itemCount","reduce","accl","p","undefined","useInfiniteList","cursor","r","nextCursor","Object","keys","usePermissions","flow","capability","action","scope","options","data","queryProps","useCapabilities","capabilities","c","acl","some","actions","toLowerCase","useGroup","name","request","all","groups","list","find","group","groupCapabilities","forEach","g","k","includes","preExisting","concat","push","map","Set","tokenCapability","get","nativeTokens"],"sources":["/Volumes/csvol/fusion/libs/shared/cdf-sdk-react-query-hooks/src/hooks/hooks.ts"],"sourcesContent":["import {\n  UseQueryOptions,\n  UseInfiniteQueryOptions,\n  useInfiniteQuery,\n  useQuery,\n} from '@tanstack/react-query';\nimport { isEqual as equal } from 'lodash';\n\nimport { IDPType } from '@cognite/login-utils';\nimport {\n  AggregateResponse,\n  CogniteClient,\n  Group,\n  IdEither,\n  SingleCogniteCapability,\n} from '@cognite/sdk';\nimport { useSDK } from '@cognite/sdk-provider';\n\nimport { aggregateApi, post, listApi as _listApi, searchApi } from '../api';\nimport {\n  aggregateKey,\n  byIdKey,\n  listGroupsKey,\n  infiniteListCacheKey,\n  infiniteSearchCacheKey,\n  listKey,\n  retrieveItemsKey,\n  searchCacheKey,\n  capabilitiesKey,\n} from '../keys';\n\n/**\n * @deprecated this was exported out of the package by mistake, will be removed\n */\nexport const aggregate = aggregateApi;\n/**\n * @deprecated this was exported out of the package by mistake, will be removed\n */\nexport const listApi = _listApi;\n\n/**\n * The valid resoruce types these hooks are intended to work with\n */\nexport type SdkResourceType =\n  | 'assets'\n  | 'timeseries'\n  | 'sequences'\n  | 'files'\n  | 'events'\n  | 'datasets'\n  | 'extpipes'\n  | 'labels'\n  | 'groups';\n\ntype ErrorResponse = { message?: string };\n\n/**\n * ## Example\n * ```typescript\n * const { data } = useAggregate('assets', { dataSetIds: [{id: 5334549879450276}]} );\n * console.log(data?.count)\n * ```\n */\nexport const useAggregate = (\n  type: SdkResourceType,\n  filter: any,\n  config?: UseQueryOptions<AggregateResponse, ErrorResponse>\n) => {\n  const sdk = useSDK();\n\n  return useQuery<AggregateResponse, ErrorResponse>(\n    aggregateKey(type, filter),\n    () => aggregateApi(sdk, type, filter),\n    config\n  );\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: myAsset, isFetched } = useCdfItem('assets', 2173222508977208, { cacheTime: 42 });\n * const { data: myTs, isFetched } = useCdfItem('timeseries', 16341836877020, { enabled: isFetched });\n * ```\n */\nexport const useCdfItem = <T>(\n  type: SdkResourceType,\n  id: IdEither,\n  config?: UseQueryOptions<T, ErrorResponse>\n) => {\n  const sdk = useSDK();\n  const ids = [id];\n  return useQuery<T, ErrorResponse>(\n    byIdKey(type, id),\n    () => post(sdk, `/${type}/byids`, { items: ids }).then((d) => d?.items[0]),\n    config\n  );\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: twoAssets } = useCdfItems('assets',[{id: 42}, {externalId: 'everything'}]);\n * ```\n */\nexport const useCdfItems = <T>(\n  type: SdkResourceType,\n  ids: IdEither[],\n  ignoreUnknownIds = false,\n  config?: UseQueryOptions<T[], ErrorResponse>\n) => {\n  const sdk = useSDK();\n\n  const sortedIds = ids\n    .filter((i: any) => !!i.id || !!i.externalId)\n    .sort((a: any, b: any) =>\n      `${a?.id}${a?.externalId}`.localeCompare(`${b?.id}${b?.externalId}`)\n    );\n\n  return useQuery<T[], ErrorResponse>(\n    retrieveItemsKey(type, sortedIds),\n    () => {\n      if (sortedIds.length > 0) {\n        return post(sdk, `/${type}/byids`, {\n          items: sortedIds,\n          ignoreUnknownIds,\n        }).then((d) => d?.items);\n      }\n      return [];\n    },\n    config\n  );\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: events } = useList('events');\n * const { data: assets } = useList('assets', { filter: { dataSetIds: [{id: 5334549879450276}]} })\n * ```\n */\nexport const useList = <T>(\n  type: SdkResourceType,\n  body?: any,\n  config?: UseQueryOptions<T[]>,\n  noCleanUp = false\n) => {\n  const sdk = useSDK();\n\n  const processedBody = noCleanUp ? body : cleanupBody(body);\n\n  return useQuery<T[]>(\n    listKey(type, processedBody),\n    () => _listApi(sdk, type, processedBody),\n    config\n  );\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: searchResult } = useSearch('assets', '10 19');\n * ```\n */\nexport const useSearch = <T>(\n  type: SdkResourceType,\n  query: string,\n  body?: any,\n  config?: UseQueryOptions<T[]>\n) => {\n  const sdk = useSDK();\n  const processedBody = cleanupBody(body);\n\n  return useQuery<T[]>(\n    searchCacheKey(type, query, processedBody),\n    () => searchApi<T>(sdk, type, query, processedBody),\n    config\n  );\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data: searchResult, hasNextPage, fetchNextPage } = useInfiniteList('assets', '10 19');\n * ```\n */\nexport const useInfiniteSearch = <T>(\n  type: SdkResourceType,\n  query: string,\n  limit: number = 10,\n  filter?: any,\n  config?: UseInfiniteQueryOptions<T[]>\n) => {\n  const sdk = useSDK();\n\n  return useInfiniteQuery<T[]>(\n    infiniteSearchCacheKey(type, query, filter),\n    async ({ pageParam: offset }) => {\n      const offsetLimit = offset ? limit + offset : limit;\n      const body = filter\n        ? { filter, limit: offsetLimit }\n        : { limit: offsetLimit };\n      const result = await searchApi<T>(sdk, type, query, body);\n\n      if (offset) {\n        return result.slice(offset, offset + limit);\n      }\n      return result;\n    },\n    {\n      getNextPageParam: (page, allPages) => {\n        const itemCount = allPages.reduce((accl, p) => accl + p.length, 0);\n        if (page.length === limit) {\n          return itemCount;\n        }\n        return undefined;\n      },\n      ...config,\n    }\n  );\n};\n\n/**\n * ## Example\n * ```typescript\n * const { data, hasNextPage, fetchNextPage } = useInfiniteList('assets', 10);\n * ```\n */\nexport const useInfiniteList = <T>(\n  type: SdkResourceType,\n  limit: number = 100,\n  filter?: any,\n  config?: UseInfiniteQueryOptions<{ items: T[]; nextCursor?: string }>\n) => {\n  const sdk = useSDK();\n\n  return useInfiniteQuery<{ items: T[]; nextCursor?: string }>(\n    infiniteListCacheKey(type, filter),\n    ({ pageParam }) =>\n      post(\n        sdk,\n        `/${type}/list`,\n        cleanupBody({\n          limit,\n          filter,\n          cursor: pageParam,\n        })\n      ),\n    { getNextPageParam: (r) => r?.nextCursor, ...config }\n  );\n};\n\nconst cleanupBody = (body?: any) => {\n  let processedBody: any | undefined = { ...body };\n  if (\n    processedBody.filter &&\n    typeof processedBody.filter === 'object' &&\n    Object.keys(processedBody.filter).length === 0\n  ) {\n    // filter should always be non-empty\n    delete processedBody.filter;\n  }\n  // body should always be non-empty\n  if (Object.keys(processedBody).length === 0) {\n    processedBody = undefined;\n  }\n  return processedBody;\n};\n\n/**\n * This hook uses the groups API for legacy auth flow and token/inspect for OIDC.\n * It returns false until the groups are fetched. You can use `isLoading` or\n * `isFetching` booleans to check loading state.\n *\n * If you don't provide a scope parameter, it will check if the user has the\n * capability for **any** scope.\n *\n * ## Example\n * ```typescript\n * const { data: hasAssetRead } = usePermissions(flow, 'assetsAcl', 'READ');\n * const { data: hasAssetWrite} = usePermissions(flow, 'assetsAcl', 'WRITE');\n * const { data: hasAssetRead } = usePermissions(flow, 'assetsAcl', 'READ', { all: {} });\n * ```\n */\n\nexport const usePermissions = (\n  flow: IDPType,\n  capability: string,\n  action?: string,\n  scope?: any,\n  options?: UseQueryOptions<Capability[]>\n) => {\n  const { data, ...queryProps } = useCapabilities(flow, options);\n  const capabilities =\n    data?.filter(\n      (c) => c.acl === capability && (scope ? equal(c.scope, scope) : true)\n    ) ?? [];\n\n  return {\n    ...queryProps,\n    data:\n      !!capabilities.length &&\n      (action\n        ? capabilities.some((c) =>\n            c.actions.some((a) => a.toLowerCase() === action.toLowerCase())\n          )\n        : true),\n  };\n};\n\n/**\n * A hook to lookup a group in cdf.\n *\n * @param name the group name you want to find\n * @returns the result of useQuery plus a data field with Group | undefined\n */\nexport const useGroup = (\n  name: string,\n  config?: Omit<UseQueryOptions<Group[], ErrorResponse>, 'queryKey'>\n) => {\n  const sdk = useSDK();\n  const request = useQuery(\n    listGroupsKey({ all: true }),\n    () => sdk.groups.list({ all: true }),\n    config\n  );\n  return {\n    ...request,\n    data: (request.data || []).find((group) => group.name === name),\n  };\n};\n\ntype Capability = {\n  acl: string;\n  actions: string[];\n  scope: any;\n};\nconst groupCapabilities = async (sdk: CogniteClient) => {\n  const groups = await sdk.groups.list();\n  const capabilities: Capability[] = [];\n\n  groups.forEach((g) => {\n    g.capabilities?.forEach((c) => {\n      const acl = Object.keys(c).filter((k) =>\n        k.includes('Acl')\n      )[0] as keyof SingleCogniteCapability;\n      const { actions, scope }: { actions: string[]; scope: any } = c[acl];\n\n      const preExisting = capabilities.find(\n        (c) => c.acl === acl && equal(scope, c.scope)\n      );\n\n      if (preExisting) {\n        preExisting.actions = preExisting.actions.concat(actions);\n      } else {\n        capabilities.push({\n          acl,\n          actions,\n          scope,\n        });\n      }\n    });\n  });\n  return capabilities.map((c) => ({\n    ...c,\n    actions: [...new Set(c.actions)],\n  }));\n};\n\nconst tokenCapability = async (sdk: CogniteClient): Promise<Capability[]> => {\n  const { data } = await sdk.get('/api/v1/token/inspect');\n\n  const capabilities: any[] = data.capabilities || [];\n\n  return capabilities.map((c) => {\n    const acl = Object.keys(c).filter((c) => c.includes('Acl'))[0];\n    const actions: string[] = c[acl].actions;\n    const scope: any = c[acl].scope;\n\n    return {\n      acl,\n      actions,\n      scope,\n    };\n  });\n};\n\nexport const useCapabilities = (\n  flow: IDPType,\n  options?: UseQueryOptions<Capability[]>\n) => {\n  const sdk = useSDK();\n  const nativeTokens = flow !== 'COGNITE_AUTH';\n\n  return useQuery<Capability[]>(\n    capabilitiesKey(),\n    () => {\n      if (nativeTokens) {\n        return tokenCapability(sdk);\n      } else {\n        return groupCapabilities(sdk);\n      }\n    },\n    options\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}