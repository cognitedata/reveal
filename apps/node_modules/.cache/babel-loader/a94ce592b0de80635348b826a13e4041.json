{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useMemo } from 'react';\nimport { useQueries, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useSDK } from '@cognite/sdk-provider';\nimport { queryKeys } from '../../../queryKeys';\nimport { getAssetsList } from '../network';\nconst getChildren = (parentAssetId, queryClient) => {\n  return queryClient.getQueryData(queryKeys.assetChildren(parentAssetId))?.map(asset => {\n    return {\n      ...asset,\n      children: asset.aggregates?.childCount ? getChildren(asset.id, queryClient) : undefined\n    };\n  });\n};\nexport const useRootAssetsQuery = (expandedRootIds, rootAssetId) => {\n  _s();\n  const sdk = useSDK();\n  const queryClient = useQueryClient();\n  const selectCallback = useCallback(data => {\n    if (rootAssetId) {\n      return {\n        ...data,\n        items: data.items.filter(item => item.id === rootAssetId)\n      };\n    }\n    return data;\n  }, [rootAssetId]);\n  const childAssets = useQueries({\n    queries: expandedRootIds.map(assetId => {\n      return {\n        queryKey: queryKeys.assetChildren(assetId),\n        queryFn: () => {\n          return getAssetsList(sdk, {\n            filter: {\n              parentIds: [assetId]\n            },\n            aggregatedProperties: ['childCount'],\n            sort: [{\n              property: ['name']\n            }]\n          }).then(res => res.items);\n        }\n      };\n    })\n  });\n  const rootAssets = useQuery(queryKeys.rootAssets(), () => {\n    return sdk.assets.list({\n      filter: {\n        root: true\n      },\n      aggregatedProperties: ['childCount']\n    }).then(res => {\n      return {\n        ...res,\n        items: res.items.sort((a, b) => {\n          return a.name.localeCompare(b.name);\n        })\n      };\n    });\n  }, {\n    select: selectCallback\n  });\n  return useMemo(() => {\n    return rootAssets.data?.items.map(rootAsset => {\n      return {\n        ...rootAsset,\n        children: rootAsset.aggregates?.childCount ? getChildren(rootAsset.id, queryClient) : undefined\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [childAssets, rootAssets]);\n};\n_s(useRootAssetsQuery, \"s1QHD+bWAaHsetLbZqmHxTpuriI=\", false, function () {\n  return [useSDK, useQueryClient, useQueries, useQuery];\n});","map":{"version":3,"names":["useCallback","useMemo","useQueries","useQuery","useQueryClient","useSDK","queryKeys","getAssetsList","getChildren","parentAssetId","queryClient","getQueryData","assetChildren","map","asset","children","aggregates","childCount","id","undefined","useRootAssetsQuery","expandedRootIds","rootAssetId","sdk","selectCallback","data","items","filter","item","childAssets","queries","assetId","queryKey","queryFn","parentIds","aggregatedProperties","sort","property","then","res","rootAssets","assets","list","root","a","b","name","localeCompare","select","rootAsset"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/assets/service/queries/useRootAssetsQuery.ts"],"sourcesContent":["import { useCallback, useMemo } from 'react';\n\nimport {\n  QueryClient,\n  useQueries,\n  useQuery,\n  useQueryClient,\n} from '@tanstack/react-query';\n\nimport { Asset, ListResponse } from '@cognite/sdk';\nimport { useSDK } from '@cognite/sdk-provider';\n\nimport { queryKeys } from '../../../queryKeys';\nimport { getAssetsList } from '../network';\n\nconst getChildren = (\n  parentAssetId: number,\n  queryClient: QueryClient\n): Asset[] | undefined => {\n  return queryClient\n    .getQueryData<Asset[]>(queryKeys.assetChildren(parentAssetId))\n    ?.map((asset) => {\n      return {\n        ...asset,\n        children: asset.aggregates?.childCount\n          ? getChildren(asset.id, queryClient)\n          : undefined,\n      };\n    });\n};\n\nexport const useRootAssetsQuery = (\n  expandedRootIds: number[],\n  rootAssetId?: number // if we want to use only some specific rootId\n) => {\n  const sdk = useSDK();\n  const queryClient = useQueryClient();\n  const selectCallback = useCallback(\n    (data: ListResponse<Asset[]>) => {\n      if (rootAssetId) {\n        return {\n          ...data,\n          items: data.items.filter((item) => item.id === rootAssetId),\n        };\n      }\n\n      return data;\n    },\n    [rootAssetId]\n  );\n\n  const childAssets = useQueries({\n    queries: expandedRootIds.map((assetId) => {\n      return {\n        queryKey: queryKeys.assetChildren(assetId),\n        queryFn: () => {\n          return getAssetsList(sdk, {\n            filter: { parentIds: [assetId] },\n            aggregatedProperties: ['childCount'],\n            sort: [\n              {\n                property: ['name'],\n              },\n            ],\n          }).then((res) => res.items);\n        },\n      };\n    }),\n  });\n\n  const rootAssets = useQuery(\n    queryKeys.rootAssets(),\n    () => {\n      return sdk.assets\n        .list({\n          filter: { root: true },\n          aggregatedProperties: ['childCount'],\n        })\n        .then((res) => {\n          return {\n            ...res,\n            items: res.items.sort((a: Asset, b: Asset) => {\n              return a.name.localeCompare(b.name);\n            }),\n          };\n        });\n    },\n    {\n      select: selectCallback,\n    }\n  );\n\n  return useMemo(() => {\n    return rootAssets.data?.items.map((rootAsset) => {\n      return {\n        ...rootAsset,\n        children: rootAsset.aggregates?.childCount\n          ? getChildren(rootAsset.id, queryClient)\n          : undefined,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [childAssets, rootAssets]);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}