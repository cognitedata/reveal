{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nexport const usePlotRevision = plotRef => {\n  _s();\n  const [revision, setRevision] = useState(0);\n  useEffect(() => {\n    const localPlotRef = plotRef.current;\n    if (localPlotRef === null) {\n      return undefined;\n    }\n\n    /**\n     * Plotly doesn't correctly resize the graph when the parent element increases in height\n     * before the user has started interacting with the element. Thus we use the revision\n     * prop to force a redraw of the graph when the parent element changes size.\n     */\n    const resizeObserver = new ResizeObserver(() => {\n      setRevision(prevRevision => prevRevision + 1);\n    });\n    resizeObserver.observe(localPlotRef);\n    return () => {\n      resizeObserver.unobserve(localPlotRef);\n    };\n  }, [plotRef]);\n  return revision;\n};\n_s(usePlotRevision, \"H1oV8qL9HJzSIOIc6ukclvfAqn8=\");","map":{"version":3,"names":["useEffect","useState","usePlotRevision","plotRef","revision","setRevision","localPlotRef","current","undefined","resizeObserver","ResizeObserver","prevRevision","observe","unobserve"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/LineChart/hooks/usePlotRevision.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from 'react';\n\nexport const usePlotRevision = (plotRef: RefObject<HTMLDivElement>) => {\n  const [revision, setRevision] = useState<number>(0);\n\n  useEffect(() => {\n    const localPlotRef = plotRef.current;\n\n    if (localPlotRef === null) {\n      return undefined;\n    }\n\n    /**\n     * Plotly doesn't correctly resize the graph when the parent element increases in height\n     * before the user has started interacting with the element. Thus we use the revision\n     * prop to force a redraw of the graph when the parent element changes size.\n     */\n    const resizeObserver = new ResizeObserver(() => {\n      setRevision((prevRevision) => prevRevision + 1);\n    });\n    resizeObserver.observe(localPlotRef);\n\n    return () => {\n      resizeObserver.unobserve(localPlotRef);\n    };\n  }, [plotRef]);\n\n  return revision;\n};\n"],"mappings":";AAAA,SAAoBA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAEtD,OAAO,MAAMC,eAAe,GAAIC,OAAkC,IAAK;EAAA;EACrE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAS,CAAC,CAAC;EAEnDD,SAAS,CAAC,MAAM;IACd,MAAMM,YAAY,GAAGH,OAAO,CAACI,OAAO;IAEpC,IAAID,YAAY,KAAK,IAAI,EAAE;MACzB,OAAOE,SAAS;IAClB;;IAEA;AACJ;AACA;AACA;AACA;IACI,MAAMC,cAAc,GAAG,IAAIC,cAAc,CAAC,MAAM;MAC9CL,WAAW,CAAEM,YAAY,IAAKA,YAAY,GAAG,CAAC,CAAC;IACjD,CAAC,CAAC;IACFF,cAAc,CAACG,OAAO,CAACN,YAAY,CAAC;IAEpC,OAAO,MAAM;MACXG,cAAc,CAACI,SAAS,CAACP,YAAY,CAAC;IACxC,CAAC;EACH,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;EAEb,OAAOC,QAAQ;AACjB,CAAC;AAAC,GA1BWF,eAAe"},"metadata":{},"sourceType":"module"}