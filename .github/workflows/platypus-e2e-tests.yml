name: Platypus Cypress Tests
on:
  pull_request:
    paths:
      - 'apps/platypus/**'
      - 'apps/mock-server/**'
      - 'apps/platypus-e2e/**'
      - 'libs/platypus-core/**'
      - 'libs/platypus-common-utils/**'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Set NPMKEY variable
        run: |
          export NPMKEY=$(echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_READONLY_TOKEN }}")
          echo "::set-output name=NPMKEY::$NPMKEY"
        id: npm_auth_key

      - name: Create .npmrc
        run: echo '${{ steps.npm_auth_key.outputs.NPMKEY }}' > .npmrc

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

  platypus-tests:
    runs-on: ubuntu-latest
    needs: install-dependencies
    strategy:
      matrix:
        configuration: ['mockV3']
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build platypus workers
        run: yarn nx run platypus:build-worker

      - name: Cypress run
        uses: cypress-io/github-action@v4.2.2
        # let's give this action an ID so we can refer
        # to its output values later
        id: cypress
        # Continue the build in case of an error, as we need to set the
        # commit status in the next step, both in case of success and failure
        continue-on-error: false
        env:
          NODE_ENV: mock
          NODE_OPTIONS: '--max_old_space_size=4096'
        # execute Cypress using a custom test command
        with:
          # let's make sure our tests pass on Chrome browser
          browser: chrome
          start: yarn nx serve mock-server
          wait-on: 'http://localhost:4002'
          # wait for 1 minute for the server to respond
          wait-on-timeout: 60
          # Run the cypress tests
          command: yarn nx run platypus:e2e:${{ matrix.configuration }}

      - name: Upload cypress artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: platypus-failed-cypress-tests-recordings
          path: dist/cypress/apps/platypus/videos
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`

      # Disabling codecov from here, to not interfere with nx_ci
      # - name: Combine CodeCov reports
      #   run: |
      #     yarn cpdir
      #     yarn summarize-codecov

      - name: Upload CodeCov reports for Platypus E2E
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: platypus-e2e-${{ matrix.configuration }}
          files: ./apps/platypus/coverage/coverage-final.json,./apps/platypus/coverage/clover.xml,./apps/platypus/coverage/coverage-summary.json
