{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { checkIsCursorOnPlot } from '../utils/checkIsCursorOnPlot';\nimport { createEventListener } from '../utils/createEventListener';\nimport { getCursorPosition } from '../utils/getCursorPosition';\nexport const useCursorPosition = chartRef => {\n  _s();\n  const [cursorPosition, setCursorPosition] = useState();\n  const [isCursorOnPlot, setCursorOnPlot] = useState(false);\n  useEffect(() => {\n    return createEventListener(chartRef.current, 'mousemove', event => {\n      const cursorPosition = getCursorPosition(chartRef, event);\n      setCursorPosition(cursorPosition);\n      const isCursorOnPlot = checkIsCursorOnPlot(chartRef, event);\n      setCursorOnPlot(isCursorOnPlot);\n    });\n  }, [chartRef]);\n  useEffect(() => {\n    return createEventListener(chartRef.current, 'mouseleave', event => {\n      const isCursorOnPlot = checkIsCursorOnPlot(chartRef, event);\n      setCursorOnPlot(isCursorOnPlot);\n    });\n  }, [chartRef]);\n  return {\n    cursorPosition,\n    isCursorOnPlot\n  };\n};\n_s(useCursorPosition, \"C4hdbWUD5pl15P9gYlTDVqWCa0U=\");","map":{"version":3,"names":["useEffect","useState","checkIsCursorOnPlot","createEventListener","getCursorPosition","useCursorPosition","chartRef","cursorPosition","setCursorPosition","isCursorOnPlot","setCursorOnPlot","current","event"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/LineChart/hooks/useCursorPosition.ts"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useState } from 'react';\n\nimport { Coordinate } from '../types';\nimport { checkIsCursorOnPlot } from '../utils/checkIsCursorOnPlot';\nimport { createEventListener } from '../utils/createEventListener';\nimport { getCursorPosition } from '../utils/getCursorPosition';\n\nexport const useCursorPosition = (\n  chartRef: React.RefObject<HTMLDivElement>\n) => {\n  const [cursorPosition, setCursorPosition] = useState<Coordinate>();\n  const [isCursorOnPlot, setCursorOnPlot] = useState(false);\n\n  useEffect(() => {\n    return createEventListener<MouseEvent>(\n      chartRef.current,\n      'mousemove',\n      (event) => {\n        const cursorPosition = getCursorPosition(chartRef, event);\n        setCursorPosition(cursorPosition);\n\n        const isCursorOnPlot = checkIsCursorOnPlot(chartRef, event);\n        setCursorOnPlot(isCursorOnPlot);\n      }\n    );\n  }, [chartRef]);\n\n  useEffect(() => {\n    return createEventListener<MouseEvent>(\n      chartRef.current,\n      'mouseleave',\n      (event) => {\n        const isCursorOnPlot = checkIsCursorOnPlot(chartRef, event);\n        setCursorOnPlot(isCursorOnPlot);\n      }\n    );\n  }, [chartRef]);\n\n  return { cursorPosition, isCursorOnPlot };\n};\n"],"mappings":";AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAG3C,SAASC,mBAAmB,QAAQ,8BAA8B;AAClE,SAASC,mBAAmB,QAAQ,8BAA8B;AAClE,SAASC,iBAAiB,QAAQ,4BAA4B;AAE9D,OAAO,MAAMC,iBAAiB,GAC5BC,QAAyC,IACtC;EAAA;EACH,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,EAAc;EAClE,MAAM,CAACQ,cAAc,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEzDD,SAAS,CAAC,MAAM;IACd,OAAOG,mBAAmB,CACxBG,QAAQ,CAACK,OAAO,EAChB,WAAW,EACVC,KAAK,IAAK;MACT,MAAML,cAAc,GAAGH,iBAAiB,CAACE,QAAQ,EAAEM,KAAK,CAAC;MACzDJ,iBAAiB,CAACD,cAAc,CAAC;MAEjC,MAAME,cAAc,GAAGP,mBAAmB,CAACI,QAAQ,EAAEM,KAAK,CAAC;MAC3DF,eAAe,CAACD,cAAc,CAAC;IACjC,CAAC,CACF;EACH,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEdN,SAAS,CAAC,MAAM;IACd,OAAOG,mBAAmB,CACxBG,QAAQ,CAACK,OAAO,EAChB,YAAY,EACXC,KAAK,IAAK;MACT,MAAMH,cAAc,GAAGP,mBAAmB,CAACI,QAAQ,EAAEM,KAAK,CAAC;MAC3DF,eAAe,CAACD,cAAc,CAAC;IACjC,CAAC,CACF;EACH,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,OAAO;IAAEC,cAAc;IAAEE;EAAe,CAAC;AAC3C,CAAC;AAAC,GAhCWJ,iBAAiB"},"metadata":{},"sourceType":"module"}