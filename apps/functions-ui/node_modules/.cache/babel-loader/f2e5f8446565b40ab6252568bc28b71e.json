{"ast":null,"code":"class LocalStorageHistoryProvider {\n  constructor(user) {\n    this.localStorageKey = void 0;\n    this.dataCache = void 0;\n    this.localStorageKey = `@cognite/fusion/browsing-history-${user.id}-${user.cluster}-${user.project}`;\n    const lsValue = localStorage.getItem(this.localStorageKey);\n    this.dataCache = lsValue ? JSON.parse(lsValue) : {\n      editedResources: [],\n      viewedResources: [],\n      usedApplications: []\n    };\n  }\n  writeToLocalStorage() {\n    localStorage.setItem(this.localStorageKey, JSON.stringify(this.dataCache));\n  }\n  get editedResources() {\n    return this.dataCache.editedResources;\n  }\n  set editedResources(arr) {\n    this.dataCache.editedResources = arr;\n    this.writeToLocalStorage();\n  }\n  get viewedResources() {\n    return this.dataCache.viewedResources;\n  }\n  set viewedResources(arr) {\n    this.dataCache.viewedResources = arr;\n    this.writeToLocalStorage();\n  }\n  get usedApplications() {\n    return this.dataCache.usedApplications;\n  }\n  set usedApplications(arr) {\n    this.dataCache.usedApplications = arr;\n    this.writeToLocalStorage();\n  }\n}\nexport class CdfUserHistoryService {\n  constructor(user) {\n    this.data = void 0;\n    this.data = new LocalStorageHistoryProvider(user);\n  }\n  logNewApplicationUsage(appPath) {\n    const timestamp = new Date().getTime().toString();\n    const count = this.data.usedApplications.find(ele => ele.name === appPath)?.count || 0;\n    const application = {\n      name: appPath,\n      count: count + 1,\n      timestamp\n    };\n    this.data.usedApplications = [application, ...this.data.usedApplications.filter(ele => ele.name === appPath)];\n  }\n  logNewResourceEdit(resource) {\n    const timestamp = new Date().getTime().toString();\n    const resourceList = this.data.editedResources.filter(ele => ele.name !== resource.name || ele.application !== resource.application);\n    this.data.editedResources = [{\n      timestamp,\n      ...resource\n    }, ...resourceList].slice(0, 9);\n  }\n  logNewResourceView(resource) {\n    const timestamp = new Date().getTime().toString();\n    const resourceList = this.data.viewedResources.filter(ele => ele.name !== resource.name || ele.application !== resource.application);\n    this.data.viewedResources = [{\n      timestamp,\n      ...resource\n    }, ...resourceList].slice(0, 9);\n  }\n\n  // read user history resources from localStorage\n  getCdfUserHistoryResources() {\n    return this.data;\n  }\n  isResourcesEmpty() {\n    return !this.data.editedResources.length && !this.data.viewedResources.length;\n  }\n  isEditedResourcesEmpty() {\n    return !this.data.editedResources.length;\n  }\n  isViewedResourcesEmpty() {\n    return !this.data.viewedResources.length;\n  }\n}","map":{"version":3,"names":["LocalStorageHistoryProvider","constructor","user","localStorageKey","dataCache","id","cluster","project","lsValue","localStorage","getItem","JSON","parse","editedResources","viewedResources","usedApplications","writeToLocalStorage","setItem","stringify","arr","CdfUserHistoryService","data","logNewApplicationUsage","appPath","timestamp","Date","getTime","toString","count","find","ele","name","application","filter","logNewResourceEdit","resource","resourceList","slice","logNewResourceView","getCdfUserHistoryResources","isResourcesEmpty","length","isEditedResourcesEmpty","isViewedResourcesEmpty"],"sources":["/Volumes/csvol/fusion/libs/shared/cdf-utilities/src/utils/history.ts"],"sourcesContent":["export type CdfResourceUsage = {\n  path: string;\n  name: string;\n  application: string;\n  timestamp: string;\n};\n\nexport type CdfApplicationUsage = {\n  name: string;\n  count: number;\n  timestamp: string;\n};\n\nexport type CdfHistoryUser = {\n  id: string;\n  cluster: string;\n  project: string;\n};\n\ninterface CdfUserHistoryStorage {\n  editedResources: CdfResourceUsage[];\n  viewedResources: CdfResourceUsage[];\n  usedApplications: CdfApplicationUsage[];\n}\n\nclass LocalStorageHistoryProvider implements CdfUserHistoryStorage {\n  constructor(user: CdfHistoryUser) {\n    this.localStorageKey = `@cognite/fusion/browsing-history-${user.id}-${user.cluster}-${user.project}`;\n    const lsValue = localStorage.getItem(this.localStorageKey);\n    this.dataCache = lsValue\n      ? JSON.parse(lsValue)\n      : { editedResources: [], viewedResources: [], usedApplications: [] };\n  }\n\n  private localStorageKey: string;\n  private dataCache: CdfUserHistoryStorage;\n\n  private writeToLocalStorage() {\n    localStorage.setItem(this.localStorageKey, JSON.stringify(this.dataCache));\n  }\n\n  get editedResources() {\n    return this.dataCache.editedResources;\n  }\n\n  set editedResources(arr: CdfResourceUsage[]) {\n    this.dataCache.editedResources = arr;\n    this.writeToLocalStorage();\n  }\n\n  get viewedResources() {\n    return this.dataCache.viewedResources;\n  }\n\n  set viewedResources(arr: CdfResourceUsage[]) {\n    this.dataCache.viewedResources = arr;\n    this.writeToLocalStorage();\n  }\n\n  get usedApplications() {\n    return this.dataCache.usedApplications;\n  }\n\n  set usedApplications(arr: CdfApplicationUsage[]) {\n    this.dataCache.usedApplications = arr;\n    this.writeToLocalStorage();\n  }\n}\n\nexport class CdfUserHistoryService {\n  constructor(user: CdfHistoryUser) {\n    this.data = new LocalStorageHistoryProvider(user);\n  }\n\n  private data: CdfUserHistoryStorage;\n\n  logNewApplicationUsage(appPath: string) {\n    const timestamp = new Date().getTime().toString();\n    const count =\n      this.data.usedApplications.find((ele) => ele.name === appPath)?.count ||\n      0;\n    const application: CdfApplicationUsage = {\n      name: appPath,\n      count: count + 1,\n      timestamp,\n    };\n    this.data.usedApplications = [\n      application,\n      ...this.data.usedApplications.filter((ele) => ele.name === appPath),\n    ];\n  }\n\n  logNewResourceEdit(resource: Omit<CdfResourceUsage, 'timestamp'>) {\n    const timestamp = new Date().getTime().toString();\n    const resourceList = this.data.editedResources.filter(\n      (ele) =>\n        ele.name !== resource.name || ele.application !== resource.application\n    );\n    this.data.editedResources = [\n      {\n        timestamp,\n        ...resource,\n      },\n      ...resourceList,\n    ].slice(0, 9);\n  }\n\n  logNewResourceView(resource: Omit<CdfResourceUsage, 'timestamp'>) {\n    const timestamp = new Date().getTime().toString();\n    const resourceList = this.data.viewedResources.filter(\n      (ele) =>\n        ele.name !== resource.name || ele.application !== resource.application\n    );\n    this.data.viewedResources = [\n      {\n        timestamp,\n        ...resource,\n      },\n      ...resourceList,\n    ].slice(0, 9);\n  }\n\n  // read user history resources from localStorage\n  getCdfUserHistoryResources() {\n    return this.data;\n  }\n\n  isResourcesEmpty() {\n    return (\n      !this.data.editedResources.length && !this.data.viewedResources.length\n    );\n  }\n\n  isEditedResourcesEmpty() {\n    return !this.data.editedResources.length;\n  }\n\n  isViewedResourcesEmpty() {\n    return !this.data.viewedResources.length;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}