import { Arguments, Argv } from 'yargs';
import { CogniteClient } from '@cognite/sdk-v6';
import {
  createSdkClient,
  getCogniteSDKClient,
  setCogniteSDKClient,
} from '../utils/cogniteSdk';
import { getAuthToken } from '../utils/auth';
import { DefaultArgs } from '../types';

export const command = 'login';
export const desc = 'Login to CDF for using Platypus';
export const builder = (yargs: Argv<DefaultArgs>) => {
  yargs
    .usage('$0 login [project]')
    .example('platypus login cognite', 'Login to cognite tenant')
    .positional('project', {
      alias: 'p',
      type: 'string',
      description: 'CDF Project Name',
      default: 'platypus',
    })
    .option('use-client-secret', {
      type: 'boolean',
      default: false,
      description:
        'This flag will enable us to use AAD Client credentials flow usually suitable for CI/CD',
    })
    .option('client-id', {
      type: 'string',
      default: '4770c0f1-7bb6-43b5-8c37-94f2a9306757', //todo: read from app config
      description: "AAD Application's Client ID",
    })
    .option('client-secret', {
      type: 'string',
      description:
        "AAD Application's Client Secret generated by the user they have long expiry and are hence suitable for CI/CD",
    })
    .option('tenant', {
      type: 'string',
      default: 'cogniteappdev.onmicrosoft.com',
      description: 'Azure Active Directory Tenant URI or ID',
    })
    .option('cluster', {
      type: 'string',
      default: 'greenfield',
      description: 'Cluster Name',
    })
    .check((arg) => {
      if (arg.useClientSecret) {
        if (!arg.clientSecret || arg.clientSecret === '') {
          return 'Client Secret needed to be passed when using --use-client-secret';
        }
      }
      return validateClusterName(arg.cluster);
    });
};

export const handler = async (args: Arguments<DefaultArgs>) => {
  try {
    const client = createSdkClient(args);

    const token = await client.authenticate();
    console.log('token = ', token);
    await client.assets.list();
    console.log('Login Success!');
  } catch (error) {
    console.log('Error while trying to authenticate');
  }
};

export const validateClusterName = (cluster: string): boolean | string => {
  if (!/^[a-zA-Z0-9-_]+$/.test(cluster)) {
    return 'Cluster name is invalid, make sure its just the name of the cluster; For example if its "api.cognitedata.com" just enter "api"';
  }
  return true;
};
