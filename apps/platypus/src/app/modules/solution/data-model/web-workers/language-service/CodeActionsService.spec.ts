import { CodeActionsService } from './CodeActionsService';
import { CodeEditorRange, DiagnosticItem } from './types';

describe('CodeActionsService Test', () => {
  const codeActionsService = new CodeActionsService();
  it('provides primitive field information', () => {
    const graphQlMock = 'type Person { field: MissingType }';
    const range = {
      startLineNumber: 1,
      startColumn: 1,
      endLineNumber: 1,
      endColumn: 30,
    } as CodeEditorRange;

    const diagnostics = [
      {
        startLineNumber: 36,
        startColumn: 1,
        endLineNumber: 36,
        endColumn: 16,
        message: 'Unknown type "CustomType".',
      },
    ] as DiagnosticItem[];

    const options = {
      lineCount: 39,
      lastLineLength: 1,
    };
    const actual = codeActionsService.getCodeActions(
      graphQlMock,
      range,
      diagnostics,
      options,
      null
    );

    const expected = [
      {
        title: 'Create missing type',
        diagnostics: [
          {
            startLineNumber: 36,
            startColumn: 1,
            endLineNumber: 36,
            endColumn: 16,
            message: 'Unknown type "CustomType".',
          },
        ],
        kind: 'quickfix',
        edit: {
          edits: [
            {
              edit: {
                range: {
                  startLineNumber: 39,
                  startColumn: 1,
                  endLineNumber: 39,
                  endColumn: 1,
                },
                text: '\n\ntype CustomType {\n  _autogeneratedField: String \n}\n',
              },
            },
          ],
        },
        isPreferred: true,
      },
    ];

    expect(actual).toEqual(expected);
  });

  it('implements all missing fields or individually from the interface', () => {
    const { graphQlCode, range, diagnostics, options, dataModelTypeDefs } = {
      graphQlCode: `interface FullName {
              first: String!
              last: String!
              middle: String
            }
                    
            type Name implements FullName {
              title: String
            }`,
      range: {
        startLineNumber: 9,
        startColumn: 2,
        endLineNumber: 9,
        endColumn: 2,
      },
      diagnostics: [
        {
          startLineNumber: 7,
          startColumn: 1,
          endLineNumber: 7,
          endColumn: 1,
          message:
            'Interface field FullName.first expected but Name does not provide it.',
        },
        {
          startLineNumber: 7,
          startColumn: 1,
          endLineNumber: 7,
          endColumn: 1,
          message:
            'Interface field FullName.last expected but Name does not provide it.',
        },
        {
          startLineNumber: 7,
          startColumn: 1,
          endLineNumber: 7,
          endColumn: 1,
          message:
            'Interface field FullName.middle expected but Name does not provide it.',
        },
      ],
      options: {
        lineCount: 9,
        lastLineLength: 2,
      },
      dataModelTypeDefs: {
        types: [
          {
            name: 'FullName',
            fields: [
              {
                id: 'first',
                name: 'first',
                type: {
                  name: 'String',
                  list: false,
                  nonNull: true,
                  custom: false,
                },
                nonNull: true,
                directives: [],
                arguments: [],
                location: {
                  line: 2,
                  column: 18,
                },
              },
              {
                id: 'last',
                name: 'last',
                type: {
                  name: 'String',
                  list: false,
                  nonNull: true,
                  custom: false,
                },
                nonNull: true,
                directives: [],
                arguments: [],
                location: {
                  line: 3,
                  column: 17,
                },
              },
              {
                id: 'middle',
                name: 'middle',
                type: {
                  name: 'String',
                  list: false,
                  nonNull: false,
                  custom: false,
                },
                nonNull: false,
                directives: [],
                arguments: [],
                location: {
                  line: 4,
                  column: 13,
                },
              },
            ],
            interfaces: [],
            directives: [],
            location: {
              line: 1,
              column: 1,
            },
          },
          {
            name: 'Name',
            fields: [
              {
                id: 'title',
                name: 'title',
                type: {
                  name: 'String',
                  list: false,
                  nonNull: false,
                  custom: false,
                },
                nonNull: false,
                directives: [],
                arguments: [],
                location: {
                  line: 8,
                  column: 12,
                },
              },
            ],
            interfaces: ['FullName'],
            directives: [],
            location: {
              line: 7,
              column: 1,
            },
          },
        ],
      },
    };

    const actual = codeActionsService.getCodeActions(
      graphQlCode,
      range,
      diagnostics,
      options,
      dataModelTypeDefs
    );

    const expected = [
      {
        title: 'Implement FullName.first field',
        diagnostics: [
          {
            startLineNumber: 7,
            startColumn: 1,
            endLineNumber: 7,
            endColumn: 1,
            message:
              'Interface field FullName.first expected but Name does not provide it.',
          },
        ],
        kind: 'quickfix',
        edit: {
          edits: [
            {
              edit: {
                range: {
                  startLineNumber: 8,
                  startColumn: 0,
                  endLineNumber: 8,
                  endColumn: 0,
                },
                text: '\tfirst: String!\n',
              },
            },
          ],
        },
        isPreferred: true,
      },
      {
        title: 'Implement FullName.last field',
        diagnostics: [
          {
            startLineNumber: 7,
            startColumn: 1,
            endLineNumber: 7,
            endColumn: 1,
            message:
              'Interface field FullName.last expected but Name does not provide it.',
          },
        ],
        kind: 'quickfix',
        edit: {
          edits: [
            {
              edit: {
                range: {
                  startLineNumber: 8,
                  startColumn: 0,
                  endLineNumber: 8,
                  endColumn: 0,
                },
                text: '\tlast: String!\n',
              },
            },
          ],
        },
        isPreferred: true,
      },
      {
        title: 'Implement FullName.middle field',
        diagnostics: [
          {
            startLineNumber: 7,
            startColumn: 1,
            endLineNumber: 7,
            endColumn: 1,
            message:
              'Interface field FullName.middle expected but Name does not provide it.',
          },
        ],
        kind: 'quickfix',
        edit: {
          edits: [
            {
              edit: {
                range: {
                  startLineNumber: 8,
                  startColumn: 0,
                  endLineNumber: 8,
                  endColumn: 0,
                },
                text: '\tmiddle: String\n',
              },
            },
          ],
        },
        isPreferred: true,
      },
      {
        title: 'Implement all missing fields from interface "FullName"',
        diagnostics: [
          {
            startLineNumber: 7,
            startColumn: 1,
            endLineNumber: 7,
            endColumn: 1,
            message:
              'Interface field FullName.first expected but Name does not provide it.',
          },
        ],
        kind: 'quickfix',
        edit: {
          edits: [
            {
              edit: {
                range: {
                  startLineNumber: 8,
                  startColumn: 0,
                  endLineNumber: 8,
                  endColumn: 0,
                },
                text: '#region added remaining fields from FullName\n\tfirst: String!\n\tlast: String!\n\tmiddle: String\n#endregion\n',
              },
            },
          ],
        },
        isPreferred: true,
      },
    ];

    expect(actual).toEqual(expected);
  });
});
