{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from '@tanstack/react-query';\nimport { useSDK } from '@cognite/sdk-provider';\nimport { queryKeys } from '../../../queryKeys';\nimport { transformNewFilterToOldFilter } from '../../../transformers';\nimport { getEventsMetadataKeysAggregate } from '../network';\nexport const useEventsMetadataKeysAggregateQuery = ({\n  query,\n  advancedFilter,\n  filter,\n  options\n} = {}) => {\n  _s();\n  const sdk = useSDK();\n  return useQuery(queryKeys.eventsMetadata(query, advancedFilter, filter), () => {\n    return getEventsMetadataKeysAggregate(sdk, {\n      advancedFilter,\n      filter: transformNewFilterToOldFilter(filter),\n      aggregateFilter: query ? {\n        prefix: {\n          value: query\n        }\n      } : undefined\n    });\n  }, options);\n};\n_s(useEventsMetadataKeysAggregateQuery, \"PmNYcoJFBmvG9WfZuMOcBXEzd1A=\", false, function () {\n  return [useSDK, useQuery];\n});","map":{"version":3,"names":["useQuery","useSDK","queryKeys","transformNewFilterToOldFilter","getEventsMetadataKeysAggregate","useEventsMetadataKeysAggregateQuery","query","advancedFilter","filter","options","sdk","eventsMetadata","aggregateFilter","prefix","value","undefined"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/events/service/queries/useEventsMetadataKeysAggregateQuery.ts"],"sourcesContent":["import { useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { useSDK } from '@cognite/sdk-provider';\n\nimport { InternalEventsFilters } from '@data-exploration-lib/core';\n\nimport { AdvancedFilter } from '../../../builders';\nimport { queryKeys } from '../../../queryKeys';\nimport { transformNewFilterToOldFilter } from '../../../transformers';\nimport { EventsProperties } from '../../internal';\nimport { getEventsMetadataKeysAggregate } from '../network';\nimport { EventsMetadataAggregateResponse } from '../types';\n\ninterface Props {\n  query?: string;\n  advancedFilter?: AdvancedFilter<EventsProperties>;\n  filter?: InternalEventsFilters;\n  options?: UseQueryOptions<\n    EventsMetadataAggregateResponse[],\n    unknown,\n    EventsMetadataAggregateResponse[],\n    any\n  >;\n}\n\nexport const useEventsMetadataKeysAggregateQuery = ({\n  query,\n  advancedFilter,\n  filter,\n  options,\n}: Props = {}) => {\n  const sdk = useSDK();\n\n  return useQuery(\n    queryKeys.eventsMetadata(query, advancedFilter, filter),\n    () => {\n      return getEventsMetadataKeysAggregate(sdk, {\n        advancedFilter,\n        filter: transformNewFilterToOldFilter(filter),\n        aggregateFilter: query ? { prefix: { value: query } } : undefined,\n      });\n    },\n    options\n  );\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAyB,uBAAuB;AAEjE,SAASC,MAAM,QAAQ,uBAAuB;AAK9C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,6BAA6B,QAAQ,uBAAuB;AAErE,SAASC,8BAA8B,QAAQ,YAAY;AAe3D,OAAO,MAAMC,mCAAmC,GAAG,CAAC;EAClDC,KAAK;EACLC,cAAc;EACdC,MAAM;EACNC;AACK,CAAC,GAAG,CAAC,CAAC,KAAK;EAAA;EAChB,MAAMC,GAAG,GAAGT,MAAM,EAAE;EAEpB,OAAOD,QAAQ,CACbE,SAAS,CAACS,cAAc,CAACL,KAAK,EAAEC,cAAc,EAAEC,MAAM,CAAC,EACvD,MAAM;IACJ,OAAOJ,8BAA8B,CAACM,GAAG,EAAE;MACzCH,cAAc;MACdC,MAAM,EAAEL,6BAA6B,CAACK,MAAM,CAAC;MAC7CI,eAAe,EAAEN,KAAK,GAAG;QAAEO,MAAM,EAAE;UAAEC,KAAK,EAAER;QAAM;MAAE,CAAC,GAAGS;IAC1D,CAAC,CAAC;EACJ,CAAC,EACDN,OAAO,CACR;AACH,CAAC;AAAC,GAnBWJ,mCAAmC;EAAA,QAMlCJ,MAAM,EAEXD,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}