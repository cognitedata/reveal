{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport { isNumeric, METADATA_ALL_VALUE } from '@data-exploration-lib/core';\nimport { AdvancedFilterBuilder } from '../../../builders';\nimport { NIL_FILTER_VALUE } from '../../../constants';\nimport { getSearchConfig } from '../../../utils';\nexport const mapFiltersToAssetsAdvancedFilters = ({\n  dataSetIds,\n  createdTime,\n  lastUpdatedTime,\n  externalIdPrefix,\n  sources,\n  labels,\n  metadata,\n  internalId\n}, query, searchConfig = getSearchConfig().asset) => {\n  const builder = new AdvancedFilterBuilder();\n  const filterBuilder = new AdvancedFilterBuilder().in('dataSetId', () => {\n    return dataSetIds?.reduce((acc, {\n      value\n    }) => {\n      if (typeof value === 'number') {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).or(new AdvancedFilterBuilder().containsAny('labels', () => {\n    return labels?.reduce((acc, {\n      value\n    }) => {\n      if (value !== NIL_FILTER_VALUE) {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).notExists('labels', () => {\n    return Boolean(labels?.find(({\n      value\n    }) => value === NIL_FILTER_VALUE));\n  })).or(new AdvancedFilterBuilder().in('source', () => {\n    return sources?.reduce((acc, {\n      value\n    }) => {\n      if (value !== NIL_FILTER_VALUE) {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).notExists('source', () => {\n    return Boolean(sources?.find(({\n      value\n    }) => value === NIL_FILTER_VALUE));\n  })).equals('id', internalId).prefix('externalId', externalIdPrefix).range('createdTime', {\n    lte: createdTime?.max,\n    gte: createdTime?.min\n  }).range('lastUpdatedTime', {\n    lte: lastUpdatedTime?.max,\n    gte: lastUpdatedTime?.min\n  });\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder();\n    for (const {\n      key,\n      value\n    } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n  builder.and(filterBuilder);\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder();\n    if (searchConfig.name.enabled) {\n      searchQueryBuilder.equals('name', query);\n      searchQueryBuilder.prefix('name', query);\n      if (searchConfig.name.enabledFuzzySearch) {\n        searchQueryBuilder.search('name', query);\n      }\n    }\n    if (searchConfig.description.enabled) {\n      searchQueryBuilder.equals('description', query);\n      searchQueryBuilder.prefix('description', query);\n      if (searchConfig.description.enabledFuzzySearch) {\n        searchQueryBuilder.search('description', query);\n      }\n    }\n    if (searchConfig.metadata.enabled) {\n      /**\n       * We want to filter all the metadata keys with the search query, to give a better result\n       * to the user when using our search.\n       */\n      searchQueryBuilder.equals('metadata', query);\n      searchQueryBuilder.prefix(`metadata`, query);\n    }\n    if (isNumeric(query) && searchConfig.id.enabled) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals('externalId', query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n    if (searchConfig.source.enabled) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // the type here is a bit wrong, will be refactored in later PRs\n      // @ts-ignore\n      searchQueryBuilder.equals('source', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('source', query);\n    }\n    if (searchConfig.labels.enabled) {\n      searchQueryBuilder.containsAny('labels', [query]);\n    }\n    builder.or(searchQueryBuilder);\n  }\n  return new AdvancedFilterBuilder().and(builder).build();\n};","map":{"version":3,"names":["isEmpty","isNumeric","METADATA_ALL_VALUE","AdvancedFilterBuilder","NIL_FILTER_VALUE","getSearchConfig","mapFiltersToAssetsAdvancedFilters","dataSetIds","createdTime","lastUpdatedTime","externalIdPrefix","sources","labels","metadata","internalId","query","searchConfig","asset","builder","filterBuilder","in","reduce","acc","value","or","containsAny","notExists","Boolean","find","equals","prefix","range","lte","max","gte","min","metadataBuilder","key","exists","and","searchQueryBuilder","name","enabled","enabledFuzzySearch","search","description","id","Number","externalId","source","build"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/assets/internal/transformers/mapFiltersToAssetsAdvancedFilters.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\n\nimport {\n  AssetConfigType,\n  InternalAssetFilters,\n  isNumeric,\n  METADATA_ALL_VALUE,\n} from '@data-exploration-lib/core';\n\nimport { AdvancedFilter, AdvancedFilterBuilder } from '../../../builders';\nimport { NIL_FILTER_VALUE } from '../../../constants';\nimport { getSearchConfig } from '../../../utils';\n\nexport type AssetsProperties = {\n  assetSubtreeIds: number[];\n  dataSetId: number[];\n  source: string[];\n  externalId: string;\n  labels: string[];\n  description: string;\n  name: string;\n  id: number;\n  metadata: string;\n  [key: `metadata|${string}`]: string;\n};\n\nexport const mapFiltersToAssetsAdvancedFilters = (\n  {\n    dataSetIds,\n    createdTime,\n    lastUpdatedTime,\n    externalIdPrefix,\n    sources,\n    labels,\n    metadata,\n    internalId,\n  }: InternalAssetFilters,\n  query?: string,\n  searchConfig: AssetConfigType = getSearchConfig().asset\n): AdvancedFilter<AssetsProperties> | undefined => {\n  const builder = new AdvancedFilterBuilder<AssetsProperties>();\n\n  const filterBuilder = new AdvancedFilterBuilder<AssetsProperties>()\n    .in('dataSetId', () => {\n      return dataSetIds?.reduce((acc, { value }) => {\n        if (typeof value === 'number') {\n          return [...acc, value];\n        }\n        return acc;\n      }, [] as number[]);\n    })\n    .or(\n      new AdvancedFilterBuilder<AssetsProperties>()\n        .containsAny('labels', () => {\n          return labels?.reduce((acc, { value }) => {\n            if (value !== NIL_FILTER_VALUE) {\n              return [...acc, value];\n            }\n            return acc;\n          }, [] as string[]);\n        })\n        .notExists('labels', () => {\n          return Boolean(\n            labels?.find(({ value }) => value === NIL_FILTER_VALUE)\n          );\n        })\n    )\n    .or(\n      new AdvancedFilterBuilder<AssetsProperties>()\n        .in('source', () => {\n          return sources?.reduce((acc, { value }) => {\n            if (value !== NIL_FILTER_VALUE) {\n              return [...acc, value];\n            }\n            return acc;\n          }, [] as string[]);\n        })\n        .notExists('source', () => {\n          return Boolean(\n            sources?.find(({ value }) => value === NIL_FILTER_VALUE)\n          );\n        })\n    )\n    .equals('id', internalId)\n    .prefix('externalId', externalIdPrefix)\n    .range('createdTime', {\n      lte: createdTime?.max as number,\n      gte: createdTime?.min as number,\n    })\n    .range('lastUpdatedTime', {\n      lte: lastUpdatedTime?.max as number,\n      gte: lastUpdatedTime?.min as number,\n    });\n\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder<AssetsProperties>();\n    for (const { key, value } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n\n  builder.and(filterBuilder);\n\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder<AssetsProperties>();\n\n    if (searchConfig.name.enabled) {\n      searchQueryBuilder.equals('name', query);\n      searchQueryBuilder.prefix('name', query);\n\n      if (searchConfig.name.enabledFuzzySearch) {\n        searchQueryBuilder.search('name', query);\n      }\n    }\n\n    if (searchConfig.description.enabled) {\n      searchQueryBuilder.equals('description', query);\n      searchQueryBuilder.prefix('description', query);\n\n      if (searchConfig.description.enabledFuzzySearch) {\n        searchQueryBuilder.search('description', query);\n      }\n    }\n\n    if (searchConfig.metadata.enabled) {\n      /**\n       * We want to filter all the metadata keys with the search query, to give a better result\n       * to the user when using our search.\n       */\n      searchQueryBuilder.equals('metadata', query);\n      searchQueryBuilder.prefix(`metadata`, query);\n    }\n\n    if (isNumeric(query) && searchConfig.id.enabled) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals('externalId', query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n    if (searchConfig.source.enabled) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // the type here is a bit wrong, will be refactored in later PRs\n      // @ts-ignore\n      searchQueryBuilder.equals('source', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('source', query);\n    }\n\n    if (searchConfig.labels.enabled) {\n      searchQueryBuilder.containsAny('labels', [query]);\n    }\n\n    builder.or(searchQueryBuilder);\n  }\n\n  return new AdvancedFilterBuilder<AssetsProperties>().and(builder).build();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}