{"ast":null,"code":"var _jsxFileName = \"/Volumes/csvol/fusion/apps/functions-ui/src/components/FunctionModals/CallFunctionModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Modal, Input, Form, Alert } from 'antd';\nimport { Button } from '@cognite/cogs.js';\nimport ErrorFeedback from '../../components/Common/atoms/ErrorFeedback';\nimport FunctionCallResponse from '../../components/FunctionCallResponse';\nimport FunctionCallStatus from '../../components/FunctionCallStatus';\nimport { createFunctionCall, isOIDCFlow } from '../../utils/api';\nimport { useCall, useFunction } from '../../utils/hooks';\nimport { callsKey, sortFunctionKey } from '../../utils/queryKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst canParseInputData = inputData => {\n  if (inputData === '') {\n    return true;\n  }\n  try {\n    JSON.parse(inputData);\n    return typeof JSON.parse(inputData) === 'object' && !Array.isArray(JSON.parse(inputData));\n  } catch {\n    return false;\n  }\n};\nexport default function CallFunctionModal({\n  id,\n  closeModal\n}) {\n  _s();\n  const queryClient = useQueryClient();\n  const [updateInterval, setUpdateInteval] = useState(1000);\n  const [inputData, setInputData] = useState('');\n  // The statefull `callId` could be replaced with wrapping the\n  // relevant components in a <LastFunctionCall>, but then it would\n  // not be possible to start a new call when one is already running.\n  const [callId, setCallId] = useState();\n  const {\n    createCall: mutate,\n    data,\n    isSuccess: callCreated,\n    isLoading,\n    error\n  } = useMutation(createFunctionCall, {\n    onSuccess() {\n      queryClient.invalidateQueries(callsKey({\n        id\n      }));\n      queryClient.invalidateQueries([sortFunctionKey]);\n    }\n  });\n  useEffect(() => {\n    if (callCreated && data?.id) {\n      setCallId(data?.id);\n    }\n  }, [callCreated, data]);\n  const {\n    data: fn\n  } = useFunction(id);\n  const {\n    data: callResponse\n  } = useCall({\n    id,\n    callId: callId\n  }, {\n    enabled: !!callId,\n    refetchInterval: updateInterval\n  });\n  const running = isLoading || !!callId && callResponse?.status === 'Running';\n  useEffect(() => {\n    if (!!callId && !running) {\n      setUpdateInteval(false);\n    } else {\n      setUpdateInteval(1000);\n    }\n  }, [callId, running]);\n  const validJSONMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'green'\n    },\n    children: \"JSON is valid\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 28\n  }, this);\n  const JSONCheckMessage = !canParseInputData(inputData) ? 'Input data must be a valid JSON object' : validJSONMessage;\n  const helpMessage = inputData ? JSONCheckMessage : /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Warning: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), \"Secrets or other confidential information should not be passed via the data object. There is a dedicated secrets object in the request body to \\\"Create functions\\\" for this purpose.\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n  const handleInputDataChange = evt => {\n    setInputData(evt.target.value);\n  };\n  const handleCancel = e => {\n    // Avoid toggling the above <Panel />\n    e.stopPropagation();\n    if (closeModal) {\n      closeModal();\n    }\n  };\n  const onCallClick = e => {\n    e.stopPropagation();\n    const formattedInputData = inputData === '' ? undefined : JSON.parse(inputData);\n    createCall({\n      id,\n      data: formattedInputData,\n      isOIDC: isOIDCFlow()\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: \"Call function\",\n    visible: true,\n    width: 900,\n    onCancel: handleCancel,\n    footer: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleCancel,\n      children: \"Cancel\"\n    }, \"close\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      disabled: isLoading || callId && running || !canParseInputData(inputData),\n      onClick: onCallClick,\n      children: \"Call\"\n    }, \"call\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)],\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      labelCol: {\n        span: 4\n      },\n      wrapperCol: {\n        span: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Function name\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          disabled: true,\n          value: fn?.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Input data\",\n        validateStatus: canParseInputData(inputData) ? 'success' : 'error',\n        help: helpMessage,\n        hasFeedback: !!inputData && inputData.length > 0,\n        children: /*#__PURE__*/_jsxDEV(Input.TextArea, {\n          rows: 4,\n          disabled: running,\n          value: inputData,\n          onChange: handleInputDataChange,\n          allowClear: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Call status\",\n        children: /*#__PURE__*/_jsxDEV(FunctionCallStatus, {\n          id: id,\n          callId: callId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Call response\",\n        children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: error && /*#__PURE__*/_jsxDEV(Alert, {\n            type: \"error\",\n            message: \"Error\",\n            description: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"An error occured when calling the function.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(ErrorFeedback, {\n                error: error\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this)\n        }, void 0, false), /*#__PURE__*/_jsxDEV(FunctionCallResponse, {\n          id: id,\n          callId: data?.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(CallFunctionModal, \"0pibCEFMwY7WOMsGG28IhFBFdmo=\", false, function () {\n  return [useQueryClient, useMutation, useFunction, useCall];\n});\n_c = CallFunctionModal;\nexport const stuffForUnitTests = {\n  canParseInputData\n};\nvar _c;\n$RefreshReg$(_c, \"CallFunctionModal\");","map":{"version":3,"names":["React","useState","useEffect","useMutation","useQueryClient","Modal","Input","Form","Alert","Button","ErrorFeedback","FunctionCallResponse","FunctionCallStatus","createFunctionCall","isOIDCFlow","useCall","useFunction","callsKey","sortFunctionKey","canParseInputData","inputData","JSON","parse","Array","isArray","CallFunctionModal","id","closeModal","queryClient","updateInterval","setUpdateInteval","setInputData","callId","setCallId","createCall","mutate","data","isSuccess","callCreated","isLoading","error","onSuccess","invalidateQueries","fn","callResponse","enabled","refetchInterval","running","status","validJSONMessage","color","JSONCheckMessage","helpMessage","handleInputDataChange","evt","target","value","handleCancel","e","stopPropagation","onCallClick","formattedInputData","undefined","isOIDC","span","name","length","stuffForUnitTests"],"sources":["/Volumes/csvol/fusion/apps/functions-ui/src/components/FunctionModals/CallFunctionModal.tsx"],"sourcesContent":["import React, { useState, useEffect, SyntheticEvent } from 'react';\n\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Modal, Input, Form, Alert } from 'antd';\n\nimport { Button } from '@cognite/cogs.js';\n\nimport ErrorFeedback from '../../components/Common/atoms/ErrorFeedback';\nimport FunctionCallResponse from '../../components/FunctionCallResponse';\nimport FunctionCallStatus from '../../components/FunctionCallStatus';\nimport { createFunctionCall, isOIDCFlow } from '../../utils/api';\nimport { useCall, useFunction } from '../../utils/hooks';\nimport { callsKey, sortFunctionKey } from '../../utils/queryKeys';\n\nconst canParseInputData = (inputData: string) => {\n  if (inputData === '') {\n    return true;\n  }\n  try {\n    JSON.parse(inputData);\n    return (\n      typeof JSON.parse(inputData) === 'object' &&\n      !Array.isArray(JSON.parse(inputData))\n    );\n  } catch {\n    return false;\n  }\n};\n\ntype Props = {\n  id: number;\n  closeModal?: () => void;\n};\n\nexport default function CallFunctionModal({ id, closeModal }: Props) {\n  const queryClient = useQueryClient();\n  const [updateInterval, setUpdateInteval] = useState<number | false>(1000);\n  const [inputData, setInputData] = useState('');\n  // The statefull `callId` could be replaced with wrapping the\n  // relevant components in a <LastFunctionCall>, but then it would\n  // not be possible to start a new call when one is already running.\n  const [callId, setCallId] = useState<number | undefined>();\n\n  const {\n    createCall: mutate,\n    data,\n    isSuccess: callCreated,\n    isLoading,\n    error,\n  } = useMutation(createFunctionCall, {\n    onSuccess() {\n      queryClient.invalidateQueries(callsKey({ id }));\n      queryClient.invalidateQueries([sortFunctionKey]);\n    },\n  });\n\n  useEffect(() => {\n    if (callCreated && data?.id) {\n      setCallId(data?.id);\n    }\n  }, [callCreated, data]);\n\n  const { data: fn } = useFunction(id);\n  const { data: callResponse } = useCall(\n    { id, callId: callId! },\n    {\n      enabled: !!callId,\n      refetchInterval: updateInterval,\n    }\n  );\n\n  const running = isLoading || (!!callId && callResponse?.status === 'Running');\n\n  useEffect(() => {\n    if (!!callId && !running) {\n      setUpdateInteval(false);\n    } else {\n      setUpdateInteval(1000);\n    }\n  }, [callId, running]);\n\n  const validJSONMessage = <div style={{ color: 'green' }}>JSON is valid</div>;\n  const JSONCheckMessage = !canParseInputData(inputData)\n    ? 'Input data must be a valid JSON object'\n    : validJSONMessage;\n  const helpMessage = inputData ? (\n    JSONCheckMessage\n  ) : (\n    <span>\n      <b>Warning: </b>Secrets or other confidential information should not be\n      passed via the data object. There is a dedicated secrets object in the\n      request body to &quot;Create functions&quot; for this purpose.\n    </span>\n  );\n\n  const handleInputDataChange = (evt: { target: { value: string } }) => {\n    setInputData(evt.target.value);\n  };\n\n  const handleCancel = (e: SyntheticEvent) => {\n    // Avoid toggling the above <Panel />\n    e.stopPropagation();\n    if (closeModal) {\n      closeModal();\n    }\n  };\n\n  const onCallClick = (e: SyntheticEvent) => {\n    e.stopPropagation();\n    const formattedInputData =\n      inputData === '' ? undefined : JSON.parse(inputData);\n    createCall({ id, data: formattedInputData, isOIDC: isOIDCFlow() });\n  };\n\n  return (\n    <Modal\n      title=\"Call function\"\n      visible\n      width={900}\n      onCancel={handleCancel}\n      footer={[\n        <Button key=\"close\" onClick={handleCancel}>\n          Cancel\n        </Button>,\n        <Button\n          key=\"call\"\n          type=\"primary\"\n          disabled={\n            isLoading || (callId && running) || !canParseInputData(inputData)\n          }\n          onClick={onCallClick}\n        >\n          Call\n        </Button>,\n      ]}\n    >\n      <Form labelCol={{ span: 4 }} wrapperCol={{ span: 20 }}>\n        <Form.Item label=\"Function name\">\n          <Input disabled value={fn?.name} />\n        </Form.Item>\n        <Form.Item\n          label=\"Input data\"\n          validateStatus={canParseInputData(inputData) ? 'success' : 'error'}\n          help={helpMessage}\n          hasFeedback={!!inputData && inputData.length > 0}\n        >\n          <Input.TextArea\n            rows={4}\n            disabled={running}\n            value={inputData}\n            onChange={handleInputDataChange}\n            allowClear\n          />\n        </Form.Item>\n        <Form.Item label=\"Call status\">\n          <FunctionCallStatus id={id} callId={callId} />\n        </Form.Item>\n        <Form.Item label=\"Call response\">\n          <>\n            {error && (\n              <Alert\n                type=\"error\"\n                message=\"Error\"\n                description={\n                  <>\n                    <p>An error occured when calling the function.</p>\n                    <ErrorFeedback error={error} />\n                  </>\n                }\n              />\n            )}\n          </>\n          <FunctionCallResponse id={id} callId={data?.id} />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n\nexport const stuffForUnitTests = {\n  canParseInputData,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}