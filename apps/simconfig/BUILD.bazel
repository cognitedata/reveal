load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin")
load("@npm//@storybook/react:index.bzl", "start_storybook")
load("//rules/test:jest.bzl", "jest_test")
load("@npm//jest:index.bzl", "jest")
load("//rules/lint:index.bzl", "eslint_config", "eslint_test", "prettier_config", "prettier_test")
load("//rules/package_json_helpers:generate.bzl", "generate_package_json_helpers")
load("//rules/publish:publish_fas.bzl", "publish_fas")
load("//rules/build_sed:build_sed.bzl", "build_sed")
load("@npm//history-server:index.bzl", "history_server")
load("@npm//react-app-rewired:index.bzl", "react_app_rewired")

# Filename conventions described at
# https://create-react-app.dev/docs/running-tests#filename-conventions
_TESTS = [
    "src/**/*.test.js*",
    "src/**/*.test.ts*",
    "src/**/*.spec.js*",
    "src/**/*.spec.ts*",
    "src/**/__tests__/**/*.js*",
    "src/**/__tests__/**/*.ts*",
    "src/__mocks__/*",
    "src/**/__mocks__/*",
    "src/utils/test/*",
]

_STORYBOOK = [
    "src/**/*.stories.ts*",
]

_SOURCES = [
    "src/**/*.ts*",
]

TESTS = glob(_TESTS + _STORYBOOK)

SOURCES = glob(
    _SOURCES,
    exclude = _TESTS + _STORYBOOK,
)

# SCRIPTS = glob([
#     "scripts/**/*",
# ])

PUBLIC = glob([
    "public/*",
    "public/**/*.png",
])

BUILD = glob(["build/*"])

RAW_ENV = {
    "GENERATE_SOURCEMAP": "false",
    "BROWSER": "none",
    "WDS_SOCKET_PORT": "8000",
    "DISABLE_ESLINT_PLUGIN": "true",
    "WDS_SOCKET_HOST": "localhost",
    "PORT": "8000",
    "HTTPS": "true",
    "REACT_APP_I18N_DEBUG": "true",
    "REACT_APP_I18N_PSEUDO": "false",
    "REACT_APP_LANGUAGE": "en",
    "REACT_APP_LOCIZE_API_KEY": "710ae6b-49f3-460a0-944d-009140ca6fc9",
    "REACT_APP_LOCIZE_PROJECT_ID": "1ee63b21-27c7-44ad-891f-4bd9af378b72",
    "REACT_APP_LOCIZE_VERSION": "latest",
    "REACT_APP_MIXPANEL_DEBUG": "false",
    "REACT_APP_MIXPANEL_TOKEN": "071f5119a9f05349bee1e1391b8c3c2c",
}

# Generates the below helpers.
#
# Usage:
#   bazel run :generate_package_json_helpers
generate_package_json_helpers(
    name = "generate_package_json_helpers",
    out_dir = "build",
    package_json = "//:package.json",
    src_dir = "src",
    workspace = "@npm",
)

### start of auto-generated helpers ###

# Dependencies from package.json
DEPENDENCIES = [
    "@npm//@azure/msal-browser",
    "@npm//@cognite/cogs.js",
    "@npm//@cognite/cdf-utilities",
    "@npm//@cognite/sdk",
    "@npm//@cognite/sdk-provider",
    "@npm//@cognite/simconfig-api-sdk",
    "@npm//framer-motion",
    "@npm//@reduxjs/toolkit",
    "@npm//@sentry/browser",
    "@npm//@visx/axis",
    "@npm//@visx/curve",
    "@npm//@visx/event",
    "@npm//@visx/grid",
    "@npm//@visx/group",
    "@npm//@visx/legend",
    "@npm//@visx/pattern",
    "@npm//@visx/responsive",
    "@npm//@visx/scale",
    "@npm//@visx/shape",
    "@npm//@visx/text",
    "@npm//@visx/threshold",
    "@npm//@visx/tooltip",
    "@npm//@visx/xychart",
    "@npm//react-ace",
    "@npm//ace-builds",
    "@npm//classnames",
    "@npm//color",
    "@npm//d3",
    "@npm//date-fns",
    "@npm//formik",
    "@npm//react",
    "@npm//customize-cra",
    "@npm//postcss-prefixwrap",
    "@npm//css-loader",
    "@npm//postcss-loader",
    "@npm//react-date-range",
    "@npm//react-dom",
    "@npm//react-location",
    "@npm//react-redux",
    "@npm//react-table",
    "@npm//react-use",
    "@npm//redux",
    "@npm//styled-components",
    "@npm//single-spa-react",
    "@npm//systemjs-webpack-interop",
    "@npm//react-query",
    "@npm//yup",
    "//packages/metrics",
    "//packages/react-feature-flags",
    "//packages/auth-utils",
    "//packages/sidecar",
    "//packages/z-index",
    "//packages/react-container",
]

# Type dependencies from package.json
TYPE_DEPENDENCIES = [
    "@npm//@types/classnames",
    "@npm//@types/color",
    "@npm//@types/d3",
    "@npm//@types/react",
    "@npm//@types/react-date-range",
    "@npm//@types/react-dom",
    "@npm//@types/react-redux",
    "@npm//@types/react-select",
    "@npm//@types/react-table",
    "@npm//@types/styled-components",
]

# Dev dependencies from package.json
DEV_DEPENDENCIES = [
    "@npm//@testing-library/jest-dom",
    "@npm//eslint-config-react-app",
]

# Mappings for absolute imports from baseUrl @unused
mappings_dict = {
    "components": "build/components",
    "global-styles": "build/global-styles",
    "hooks": "build/hooks",
    "index": "build/index",
    "pages": "build/pages",
    "react-app-env.d": "build/react-app-env.d",
    "routes": "build/routes",
    "serviceWorker": "build/serviceWorker",
    "setupTests": "build/setupTests",
    "store": "build/store",
    "styles": "build/styles",
    "typings": "build/typings",
    "utils": "build/utils",
}

### end of auto-generated helpers ###

eslint_config(
    name = "eslint_config",
    src = ":.eslintrc.production.js",
    deps = DEPENDENCIES + DEV_DEPENDENCIES + TYPE_DEPENDENCIES + [
        ":tsconfig.json",
        "//:eslint_config",
        "//:tsconfig.json",
    ],
)

eslint_test(
    name = "eslint_test",
    data = SOURCES + TESTS + [
        ":.eslintrc.production.js",
        ":tsconfig.json",
        "//:eslint_config",
        "//:tsconfig.json",
    ],
    eslint_config = ":eslint_config",
    templated_args = [
        "--max-warnings",
        "0",
        "--no-error-on-unmatched-pattern",
        "apps/simconfig/src/**/*.{ts,tsx,js}",
        "--config",
        "$(rootpath :eslint_config)",
    ],
)

prettier_config(
    name = "prettier_config",
    src = ".prettierrc.js",
)

prettier_test(
    name = "prettier_test",
    data = SOURCES + TESTS,
    prettier_config = ":prettier_config",
)

# We don't want to teach react-scripts to include from multiple directories
# So we copy everything it wants to read to the output "bin" directory
copy_to_bin(
    name = "copy_static_files",
    srcs = SOURCES + PUBLIC + [
        ":package.json",
        ":tsconfig.json",
        ":index.html",
        ":.env.production",
        ":.env.development",
        ":config-overrides.js",
    ],
)

# react-scripts can only work if the working directory is the root of the application.
# So we'll need to chdir before it runs.
write_file(
    name = "write_chdir_script",
    out = "chdir.js",
    content = ["process.chdir(__dirname)"],
)

# For ibazel run to properly pick the changes we need to run from the Workspace directory
write_file(
    name = "write_chdir_worspace_script",
    out = "chdir-workspace.js",
    content = ["process.chdir(require('path').join(process.env.BUILD_WORKSPACE_DIRECTORY, '" + package_name() + "'));"],
)

_RUNTIME_DEPS = [
    "chdir.js",
    "copy_static_files",
    "//:tsconfig",
]

### react-scripts test ###

copy_to_bin(
    name = "copy_test_files",
    srcs = TESTS,
)

jest_test(
    name = "jest_test",
    srcs = SOURCES + TESTS + [
        "//apps:jest.config.js",
        "//apps:jest.react.config.js",
        "//apps:babelTransform.js",
        ":tsconfig.json",
        "//:tsconfig.json",
    ],
    jest_args = [],
    jest_config = "jest.config.js",
    service_name = "simconfig",
    deps = DEPENDENCIES + DEV_DEPENDENCIES + TYPE_DEPENDENCIES + ["@npm//babel-preset-react-app"],
)

### vite test Dev ###
jest(
    name = "jest",
    args = [
        "--node_options=--require=./$(rootpath chdir-workspace.js)",
        "--config",
        "jest.config.js",
        "--runInBand",
    ],
    data = _RUNTIME_DEPS + [
        "chdir-workspace.js",
    ],
    env = {
        "DISABLE_ESLINT_PLUGIN": "true",
    },
    tags = [
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)

sh_binary(
    name = "build_sed_default",
    srcs = ["//rules/build_sed:sed_linux.sh"],
)

sh_binary(
    name = "build_sed_darwin",
    srcs = ["//rules/build_sed:sed_darwin.sh"],
)

# Replace PUBLIC_URL_VALUE placeholder with '' in order to run e2e tests
# If you need additional env vars being set during e2e tests run add them into
# :build target above and override here
build_sed(
    name = "build_sed",
    app = "Sim Config",
    binary = select({
        "@bazel_tools//src/conditions:darwin": ":build_sed_darwin",
        "//conditions:default": ":build_sed_default",
    }),
    out_dir = "build_bazel",
    src_dir = ":build",
)

history_server(
    name = "serve_build",
    args = [
        "-a",
        "$(rootpath :build_sed)",
    ],
    data = [":build_sed"],
)

### Storybook ###

start_storybook(
    name = "start-storybook",
    args = [
        "--node_options=--require=./$(rootpath chdir-workspace.js)",
        "-c",
        ".storybook-dev",
        "-p",
        "6006",
    ],
    data = [
        "chdir-workspace.js",
        # Bazel needs to give access @tippyjs in cogs.js
        "@npm//@cognite/cogs.js",
    ],
    tags = [
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and target will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)

### FAS ###

publish_fas(
    name = "publish_fas",
    build = ":build",
    package_json = ":package.json",
    # Subdomain name used for the pull requests preview.
    preview_subdomain = "simconfig",
    # FAS production app id
    production_app_id = "simconfig",
    # FAS app identifier (repo) shared across both production and staging apps
    #repo_id = "cdf-simint-ui",
    repo_id = "cdf-simint-ui",
    # Sentry project name
    sentry_project_name = "simconfig",
    # FAS staging app id
    # staging_app_id = "cdf-simint-ui",
    staging_app_id = "cdf-simint-ui",
    versioning_strategy = "multi-branch",
    deps = _RUNTIME_DEPS + DEPENDENCIES + TYPE_DEPENDENCIES,
)

react_app_rewired(
    name = "start",
    args = [
        "--node_options=--require=./$(rootpath chdir-workspace.js)",
        "--max_old_space_size=2000",
        "start",
    ],
    data = _RUNTIME_DEPS + DEPENDENCIES + DEV_DEPENDENCIES + TYPE_DEPENDENCIES + [
        "chdir-workspace.js",
    ],
    env = RAW_ENV,
    tags = [
        "manual",
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)

copy_to_bin(
    name = "copy_build_to_bin",
    srcs = BUILD,
)

react_app_rewired(
    name = "build",
    args = [
        "--node_options=--require=./$(execpath chdir.js)",
        "--max_old_space_size=2000",
        "build",
    ],
    data = _RUNTIME_DEPS + DEPENDENCIES + TYPE_DEPENDENCIES + [
        "chdir-workspace.js",
        ":copy_build_to_bin",
    ],
    env = RAW_ENV,
    output_dir = True,
    tags = [
        "manual",
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)
