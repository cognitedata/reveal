{"ast":null,"code":"import times from 'lodash/times';\nimport { DEFAULT_LINE_COLOR, HOVER_MARKER_BORDER_WIDTH, LINE_WIDTH, MARKER_SIZE } from '../constants';\nimport { getDataAsArray } from './getDataAsArray';\nimport { getLineName } from './getLineName';\nimport { mapInterolationToPlotlyLineShape } from './mapInterolationToPlotlyLineShape';\nexport const adaptToPlotlyPlotData = ({\n  data,\n  showMarkers,\n  variant\n}) => {\n  const mode = showMarkers ? 'lines+markers' : 'lines';\n  let markerSize = showMarkers ? MARKER_SIZE : 0;\n  let markerOutlineWidth = HOVER_MARKER_BORDER_WIDTH;\n  if (variant === 'small') {\n    markerSize /= 2;\n    markerOutlineWidth /= 2;\n  }\n  return getDataAsArray(data).map(({\n    x,\n    y,\n    color,\n    name,\n    customData,\n    interpolation\n  }, index) => {\n    const lineColor = color || DEFAULT_LINE_COLOR;\n    const markerSizes = times(x.length).map(() => markerSize);\n    const markerLineColors = times(x.length).map(() => 'transparent');\n    return {\n      mode,\n      x,\n      y,\n      line: {\n        width: LINE_WIDTH,\n        color: lineColor,\n        shape: mapInterolationToPlotlyLineShape(interpolation)\n      },\n      marker: {\n        size: markerSizes,\n        opacity: 1,\n        line: {\n          width: markerOutlineWidth,\n          color: markerLineColors\n        }\n      },\n      name: getLineName(name, index),\n      hoverinfo: 'none',\n      unselected: {\n        marker: {\n          opacity: 1\n        }\n      },\n      customData\n    };\n  });\n};","map":{"version":3,"names":["times","DEFAULT_LINE_COLOR","HOVER_MARKER_BORDER_WIDTH","LINE_WIDTH","MARKER_SIZE","getDataAsArray","getLineName","mapInterolationToPlotlyLineShape","adaptToPlotlyPlotData","data","showMarkers","variant","mode","markerSize","markerOutlineWidth","map","x","y","color","name","customData","interpolation","index","lineColor","markerSizes","length","markerLineColors","line","width","shape","marker","size","opacity","hoverinfo","unselected"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/LineChart/utils/adaptToPlotlyPlotData.ts"],"sourcesContent":["import times from 'lodash/times';\nimport { PlotData } from 'plotly.js';\n\nimport {\n  DEFAULT_LINE_COLOR,\n  HOVER_MARKER_BORDER_WIDTH,\n  LINE_WIDTH,\n  MARKER_SIZE,\n} from '../constants';\nimport { LineChartProps, Variant } from '../types';\n\nimport { getDataAsArray } from './getDataAsArray';\nimport { getLineName } from './getLineName';\nimport { mapInterolationToPlotlyLineShape } from './mapInterolationToPlotlyLineShape';\n\ninterface Props {\n  data: LineChartProps['data'];\n  showMarkers: boolean;\n  variant?: Variant;\n}\n\nexport const adaptToPlotlyPlotData = ({\n  data,\n  showMarkers,\n  variant,\n}: Props): Partial<PlotData>[] => {\n  const mode = showMarkers ? 'lines+markers' : 'lines';\n\n  let markerSize = showMarkers ? MARKER_SIZE : 0;\n  let markerOutlineWidth = HOVER_MARKER_BORDER_WIDTH;\n\n  if (variant === 'small') {\n    markerSize /= 2;\n    markerOutlineWidth /= 2;\n  }\n\n  return getDataAsArray(data).map(\n    ({ x, y, color, name, customData, interpolation }, index) => {\n      const lineColor = color || DEFAULT_LINE_COLOR;\n      const markerSizes = times(x.length).map(() => markerSize);\n      const markerLineColors = times(x.length).map(() => 'transparent');\n\n      return {\n        mode,\n        x,\n        y,\n        line: {\n          width: LINE_WIDTH,\n          color: lineColor,\n          shape: mapInterolationToPlotlyLineShape(interpolation),\n        },\n        marker: {\n          size: markerSizes,\n          opacity: 1,\n          line: {\n            width: markerOutlineWidth,\n            color: markerLineColors,\n          },\n        },\n        name: getLineName(name, index),\n        hoverinfo: 'none',\n        unselected: {\n          marker: {\n            opacity: 1,\n          },\n        },\n        customData,\n      };\n    }\n  );\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,cAAc;AAGhC,SACEC,kBAAkB,EAClBC,yBAAyB,EACzBC,UAAU,EACVC,WAAW,QACN,cAAc;AAGrB,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,gCAAgC,QAAQ,oCAAoC;AAQrF,OAAO,MAAMC,qBAAqB,GAAG,CAAC;EACpCC,IAAI;EACJC,WAAW;EACXC;AACK,CAAC,KAA0B;EAChC,MAAMC,IAAI,GAAGF,WAAW,GAAG,eAAe,GAAG,OAAO;EAEpD,IAAIG,UAAU,GAAGH,WAAW,GAAGN,WAAW,GAAG,CAAC;EAC9C,IAAIU,kBAAkB,GAAGZ,yBAAyB;EAElD,IAAIS,OAAO,KAAK,OAAO,EAAE;IACvBE,UAAU,IAAI,CAAC;IACfC,kBAAkB,IAAI,CAAC;EACzB;EAEA,OAAOT,cAAc,CAACI,IAAI,CAAC,CAACM,GAAG,CAC7B,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,KAAK;IAAEC,IAAI;IAAEC,UAAU;IAAEC;EAAc,CAAC,EAAEC,KAAK,KAAK;IAC3D,MAAMC,SAAS,GAAGL,KAAK,IAAIjB,kBAAkB;IAC7C,MAAMuB,WAAW,GAAGxB,KAAK,CAACgB,CAAC,CAACS,MAAM,CAAC,CAACV,GAAG,CAAC,MAAMF,UAAU,CAAC;IACzD,MAAMa,gBAAgB,GAAG1B,KAAK,CAACgB,CAAC,CAACS,MAAM,CAAC,CAACV,GAAG,CAAC,MAAM,aAAa,CAAC;IAEjE,OAAO;MACLH,IAAI;MACJI,CAAC;MACDC,CAAC;MACDU,IAAI,EAAE;QACJC,KAAK,EAAEzB,UAAU;QACjBe,KAAK,EAAEK,SAAS;QAChBM,KAAK,EAAEtB,gCAAgC,CAACc,aAAa;MACvD,CAAC;MACDS,MAAM,EAAE;QACNC,IAAI,EAAEP,WAAW;QACjBQ,OAAO,EAAE,CAAC;QACVL,IAAI,EAAE;UACJC,KAAK,EAAEd,kBAAkB;UACzBI,KAAK,EAAEQ;QACT;MACF,CAAC;MACDP,IAAI,EAAEb,WAAW,CAACa,IAAI,EAAEG,KAAK,CAAC;MAC9BW,SAAS,EAAE,MAAM;MACjBC,UAAU,EAAE;QACVJ,MAAM,EAAE;UACNE,OAAO,EAAE;QACX;MACF,CAAC;MACDZ;IACF,CAAC;EACH,CAAC,CACF;AACH,CAAC"},"metadata":{},"sourceType":"module"}