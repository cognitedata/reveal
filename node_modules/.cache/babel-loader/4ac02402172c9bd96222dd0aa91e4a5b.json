{"ast":null,"code":"export const getAllSecretKeys = secrets => {\n  const keys = [];\n  secrets.forEach(s => {\n    keys.push(s.key);\n  });\n  return keys;\n};\nexport const checkSecrets = secrets => {\n  if (secrets.length > 5) {\n    return false;\n  }\n  let allSecretsAreValid = true;\n  secrets.forEach(s => {\n    if (checkSecretKey(s.key, getAllSecretKeys(secrets)).error || checkSecretValue(s.value).error) {\n      allSecretsAreValid = false;\n    }\n  });\n  return allSecretsAreValid;\n};\nexport const checkSecretKey = (key, allKeys) => {\n  if (key.length === 0) {\n    return {\n      error: true,\n      message: 'A key is required'\n    };\n  }\n  if (key.length > 15) {\n    return {\n      error: true,\n      message: 'Max 15 characters'\n    };\n  }\n  if (key.match(/[^a-z0-9-]+/g) !== null) {\n    return {\n      error: true,\n      message: 'Only lowercase letters, digits, & dashes allowed'\n    };\n  }\n  if (allKeys.filter(k => k === key).length > 1) {\n    return {\n      error: true,\n      message: 'Keys must be unique'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkMetadataKey = (key, allKeys) => {\n  if (key.length === 0) {\n    return {\n      error: true,\n      message: 'A key is required'\n    };\n  }\n  if (key.length > 32) {\n    return {\n      error: true,\n      message: 'Max 32 characters'\n    };\n  }\n  if (allKeys.filter(k => k === key).length > 1) {\n    return {\n      error: true,\n      message: 'Metadata key must be unique'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkSecretValue = value => {\n  if (value.length === 0) {\n    return {\n      error: true,\n      message: 'A value is required'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkMetadataValue = value => {\n  if (value.length === 0) {\n    return {\n      error: true,\n      message: 'A value is required'\n    };\n  }\n  if (value.length > 512) {\n    return {\n      error: true,\n      message: 'Max 512 characters'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkFunctionName = functionName => {\n  if (functionName.length < 1) {\n    return {\n      error: true,\n      message: 'A name is required'\n    };\n  }\n  if (functionName.length > 140) {\n    return {\n      error: true,\n      message: 'Function name must be only 140 characters'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkDescription = description => {\n  if (description.length > 128) {\n    return {\n      error: true,\n      message: 'Description may only be 128 characters'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkOwner = owner => {\n  if (owner.length > 128) {\n    return {\n      error: true,\n      message: 'Owner may only be 128 characters'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkExternalId = externalId => {\n  if (externalId.length > 255) {\n    return {\n      error: true,\n      message: 'External Id may only be 255 characters'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkFile = file => {\n  if (!file) {\n    return {\n      error: true,\n      message: 'A file is required'\n    };\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};\nexport const checkFloat = (min, max) => data => {\n  if (data) {\n    const e = {\n      error: true,\n      message: `Number not valid in range [${min}, ${max}]`\n    };\n    try {\n      const f = parseFloat(data);\n      if (f < min || f > max) {\n        return e;\n      }\n    } catch {\n      return e;\n    }\n  }\n  return {\n    error: false,\n    message: ''\n  };\n};","map":{"version":3,"names":["getAllSecretKeys","secrets","keys","forEach","s","push","key","checkSecrets","length","allSecretsAreValid","checkSecretKey","error","checkSecretValue","value","allKeys","message","match","filter","k","checkMetadataKey","checkMetadataValue","checkFunctionName","functionName","checkDescription","description","checkOwner","owner","checkExternalId","externalId","checkFile","file","checkFloat","min","max","data","e","f","parseFloat"],"sources":["/Volumes/csvol/fusion/apps/functions-ui/src/utils/formValidations.ts"],"sourcesContent":["import { Secret } from 'components/FunctionModals/UploadFunctionModal';\nimport { UploadFile } from 'antd/lib/upload/interface';\n\nexport const getAllSecretKeys = (secrets: Secret[]) => {\n  const keys = [] as string[];\n  secrets.forEach((s: Secret) => {\n    keys.push(s.key);\n  });\n  return keys;\n};\n\nexport const checkSecrets = (secrets: Secret[]) => {\n  if (secrets.length > 5) {\n    return false;\n  }\n\n  let allSecretsAreValid = true;\n  secrets.forEach((s: Secret) => {\n    if (\n      checkSecretKey(s.key, getAllSecretKeys(secrets)).error ||\n      checkSecretValue(s.value).error\n    ) {\n      allSecretsAreValid = false;\n    }\n  });\n\n  return allSecretsAreValid;\n};\nexport const checkSecretKey = (key: string, allKeys: string[]) => {\n  if (key.length === 0) {\n    return {\n      error: true,\n      message: 'A key is required',\n    };\n  }\n  if (key.length > 15) {\n    return {\n      error: true,\n      message: 'Max 15 characters',\n    };\n  }\n  if (key.match(/[^a-z0-9-]+/g) !== null) {\n    return {\n      error: true,\n      message: 'Only lowercase letters, digits, & dashes allowed',\n    };\n  }\n  if (allKeys.filter(k => k === key).length > 1) {\n    return {\n      error: true,\n      message: 'Keys must be unique',\n    };\n  }\n\n  return {\n    error: false,\n    message: '',\n  };\n};\nexport const checkMetadataKey = (key: string, allKeys: string[]) => {\n  if (key.length === 0) {\n    return {\n      error: true,\n      message: 'A key is required',\n    };\n  }\n  if (key.length > 32) {\n    return {\n      error: true,\n      message: 'Max 32 characters',\n    };\n  }\n  if (allKeys.filter(k => k === key).length > 1) {\n    return {\n      error: true,\n      message: 'Metadata key must be unique',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\n\nexport const checkSecretValue = (value: string) => {\n  if (value.length === 0) {\n    return {\n      error: true,\n      message: 'A value is required',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\n\nexport const checkMetadataValue = (value: string) => {\n  if (value.length === 0) {\n    return {\n      error: true,\n      message: 'A value is required',\n    };\n  }\n  if (value.length > 512) {\n    return {\n      error: true,\n      message: 'Max 512 characters',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\n\nexport const checkFunctionName = (functionName: string) => {\n  if (functionName.length < 1) {\n    return { error: true, message: 'A name is required' };\n  }\n  if (functionName.length > 140) {\n    return {\n      error: true,\n      message: 'Function name must be only 140 characters',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\nexport const checkDescription = (description: string) => {\n  if (description.length > 128) {\n    return {\n      error: true,\n      message: 'Description may only be 128 characters',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\n\nexport const checkOwner = (owner: string) => {\n  if (owner.length > 128) {\n    return {\n      error: true,\n      message: 'Owner may only be 128 characters',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\nexport const checkExternalId = (externalId: string) => {\n  if (externalId.length > 255) {\n    return {\n      error: true,\n      message: 'External Id may only be 255 characters',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\nexport const checkFile = (file?: UploadFile) => {\n  if (!file) {\n    return {\n      error: true,\n      message: 'A file is required',\n    };\n  }\n  return {\n    error: false,\n    message: '',\n  };\n};\n\nexport const checkFloat = (min: number, max: number) => (data: string) => {\n  if (data) {\n    const e = {\n      error: true,\n      message: `Number not valid in range [${min}, ${max}]`,\n    };\n    try {\n      const f = parseFloat(data);\n      if (f < min || f > max) {\n        return e;\n      }\n    } catch {\n      return e;\n    }\n  }\n\n  return {\n    error: false,\n    message: '',\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}