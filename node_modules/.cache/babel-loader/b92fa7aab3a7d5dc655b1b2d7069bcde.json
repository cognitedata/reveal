{"ast":null,"code":"import isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport { isNumeric, METADATA_ALL_VALUE } from '@data-exploration-lib/core';\nimport { AdvancedFilterBuilder } from '../../../builders';\nimport { NIL_FILTER_VALUE } from '../../../constants';\nimport { getSearchConfig } from '../../../utils';\nexport const mapFiltersToEventsAdvancedFilters = ({\n  dataSetIds,\n  createdTime,\n  lastUpdatedTime,\n  externalIdPrefix,\n  type,\n  startTime,\n  endTime,\n  subtype,\n  sources,\n  metadata,\n  internalId\n}, query, searchConfig = getSearchConfig().event) => {\n  const builder = new AdvancedFilterBuilder();\n  const filterBuilder = new AdvancedFilterBuilder().in('dataSetId', () => {\n    return dataSetIds?.reduce((acc, {\n      value\n    }) => {\n      if (typeof value === 'number') {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).in('type', () => {\n    // this condition need to be removed when remove the legacy implementation\n    if (type && !isArray(type)) {\n      return [type];\n    }\n    return type;\n  }).in('subtype', () => {\n    // this condition need to be removed when remove the legacy implementation\n    if (subtype && !isArray(subtype)) {\n      return [subtype];\n    }\n    return subtype;\n  }).or(new AdvancedFilterBuilder().in('source', () => {\n    return sources?.reduce((acc, {\n      value\n    }) => {\n      if (value !== NIL_FILTER_VALUE) {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).notExists('source', () => {\n    return Boolean(sources?.find(({\n      value\n    }) => value === NIL_FILTER_VALUE));\n  })).equals('id', internalId).prefix('externalId', externalIdPrefix).range('createdTime', {\n    lte: createdTime?.max,\n    gte: createdTime?.min\n  }).range('lastUpdatedTime', {\n    lte: lastUpdatedTime?.max,\n    gte: lastUpdatedTime?.min\n  }).range('startTime', {\n    lte: startTime?.max,\n    gte: startTime?.min\n  }).range('endTime', {\n    lte: endTime && !('isNull' in endTime) ? endTime?.max : undefined,\n    gte: endTime && !('isNull' in endTime) ? endTime?.min : undefined\n  });\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder();\n    for (const {\n      key,\n      value\n    } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n  builder.and(filterBuilder);\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder();\n    if (searchConfig.description.enabled) {\n      searchQueryBuilder.equals('description', query);\n      searchQueryBuilder.prefix('description', query);\n      if (searchConfig.description.enabledFuzzySearch) {\n        searchQueryBuilder.search('description', query);\n      }\n    }\n\n    /**\n     * We want to filter all the metadata keys with the search query, to give a better result\n     * to the user when using our search.\n     */\n    if (searchConfig.metadata.enabled) {\n      searchQueryBuilder.equals('metadata', query);\n      searchQueryBuilder.prefix('metadata', query);\n    }\n    if (searchConfig.type.enabled) {\n      searchQueryBuilder.equals('type', query);\n      searchQueryBuilder.prefix('type', query);\n    }\n    if (searchConfig.subtype.enabled) {\n      searchQueryBuilder.equals('subtype', query);\n      searchQueryBuilder.prefix('subtype', query);\n    }\n    if (searchConfig.source.enabled) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // the type here is a bit wrong, will be refactored in later PRs\n      searchQueryBuilder.equals('source', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('source', query);\n    }\n    if (searchConfig.id.enabled && isNumeric(query)) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals('externalId', query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n    builder.or(searchQueryBuilder);\n  }\n  return new AdvancedFilterBuilder().and(builder).build();\n};","map":{"version":3,"names":["isArray","isEmpty","isNumeric","METADATA_ALL_VALUE","AdvancedFilterBuilder","NIL_FILTER_VALUE","getSearchConfig","mapFiltersToEventsAdvancedFilters","dataSetIds","createdTime","lastUpdatedTime","externalIdPrefix","type","startTime","endTime","subtype","sources","metadata","internalId","query","searchConfig","event","builder","filterBuilder","in","reduce","acc","value","or","notExists","Boolean","find","equals","prefix","range","lte","max","gte","min","undefined","metadataBuilder","key","exists","and","searchQueryBuilder","description","enabled","enabledFuzzySearch","search","source","id","Number","externalId","build"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/events/internal/transformers/mapFiltersToEventsAdvancedFilters.ts"],"sourcesContent":["import isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\n\nimport {\n  EventConfigType,\n  InternalEventsFilters,\n  isNumeric,\n  METADATA_ALL_VALUE,\n} from '@data-exploration-lib/core';\n\nimport { AdvancedFilter, AdvancedFilterBuilder } from '../../../builders';\nimport { NIL_FILTER_VALUE } from '../../../constants';\nimport { getSearchConfig } from '../../../utils';\n\nexport type EventsProperties = {\n  assetIds: number[];\n  dataSetId: number[];\n  type: string | string[];\n  subtype: string | string[];\n  source: string[];\n  externalId: string;\n  description: string;\n  id: number;\n  metadata: string;\n  [key: `metadata|${string}`]: string;\n};\n\nexport const mapFiltersToEventsAdvancedFilters = (\n  {\n    dataSetIds,\n    createdTime,\n    lastUpdatedTime,\n    externalIdPrefix,\n    type,\n    startTime,\n    endTime,\n    subtype,\n    sources,\n    metadata,\n    internalId,\n  }: InternalEventsFilters,\n  query?: string,\n  searchConfig: EventConfigType = getSearchConfig().event\n): AdvancedFilter<EventsProperties> | undefined => {\n  const builder = new AdvancedFilterBuilder<EventsProperties>();\n\n  const filterBuilder = new AdvancedFilterBuilder<EventsProperties>()\n    .in('dataSetId', () => {\n      return dataSetIds?.reduce((acc, { value }) => {\n        if (typeof value === 'number') {\n          return [...acc, value];\n        }\n        return acc;\n      }, [] as number[]);\n    })\n    .in('type', () => {\n      // this condition need to be removed when remove the legacy implementation\n      if (type && !isArray(type)) {\n        return [type];\n      }\n      return type;\n    })\n    .in('subtype', () => {\n      // this condition need to be removed when remove the legacy implementation\n      if (subtype && !isArray(subtype)) {\n        return [subtype];\n      }\n      return subtype;\n    })\n    .or(\n      new AdvancedFilterBuilder<EventsProperties>()\n        .in('source', () => {\n          return sources?.reduce((acc, { value }) => {\n            if (value !== NIL_FILTER_VALUE) {\n              return [...acc, value];\n            }\n            return acc;\n          }, [] as string[]);\n        })\n        .notExists('source', () => {\n          return Boolean(\n            sources?.find(({ value }) => value === NIL_FILTER_VALUE)\n          );\n        })\n    )\n    .equals('id', internalId)\n    .prefix('externalId', externalIdPrefix)\n    .range('createdTime', {\n      lte: createdTime?.max as number,\n      gte: createdTime?.min as number,\n    })\n    .range('lastUpdatedTime', {\n      lte: lastUpdatedTime?.max as number,\n      gte: lastUpdatedTime?.min as number,\n    })\n    .range('startTime', {\n      lte: startTime?.max as number,\n      gte: startTime?.min as number,\n    })\n    .range('endTime', {\n      lte:\n        endTime && !('isNull' in endTime)\n          ? (endTime?.max as number)\n          : undefined,\n      gte:\n        endTime && !('isNull' in endTime)\n          ? (endTime?.min as number)\n          : undefined,\n    });\n\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder<EventsProperties>();\n    for (const { key, value } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n\n  builder.and(filterBuilder);\n\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder<EventsProperties>();\n\n    if (searchConfig.description.enabled) {\n      searchQueryBuilder.equals('description', query);\n      searchQueryBuilder.prefix('description', query);\n\n      if (searchConfig.description.enabledFuzzySearch) {\n        searchQueryBuilder.search('description', query);\n      }\n    }\n\n    /**\n     * We want to filter all the metadata keys with the search query, to give a better result\n     * to the user when using our search.\n     */\n    if (searchConfig.metadata.enabled) {\n      searchQueryBuilder.equals('metadata', query);\n      searchQueryBuilder.prefix('metadata', query);\n    }\n\n    if (searchConfig.type.enabled) {\n      searchQueryBuilder.equals('type', query);\n      searchQueryBuilder.prefix('type', query);\n    }\n\n    if (searchConfig.subtype.enabled) {\n      searchQueryBuilder.equals('subtype', query);\n      searchQueryBuilder.prefix('subtype', query);\n    }\n\n    if (searchConfig.source.enabled) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // the type here is a bit wrong, will be refactored in later PRs\n      searchQueryBuilder.equals('source', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('source', query);\n    }\n\n    if (searchConfig.id.enabled && isNumeric(query)) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals('externalId', query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n\n    builder.or(searchQueryBuilder);\n  }\n\n  return new AdvancedFilterBuilder<EventsProperties>().and(builder).build();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}