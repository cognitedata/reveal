{"ast":null,"code":"var _jsxFileName = \"/Volumes/csvol/fusion/libs/shared/cdf-utilities/src/components/Table/Table.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Table as AntdTable } from 'antd';\nimport { Body } from '@cognite/cogs.js';\nimport { TableColumnTitle } from './TableColumnTitle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Table = ({\n  columns,\n  defaultSort,\n  onSort,\n  emptyContent,\n  appendTooltipTo,\n  ...tableProps\n}) => {\n  _s();\n  const [sortState, setSortState] = useState(defaultSort);\n  const [sortedKey, sortOrder] = sortState ?? [];\n  const getOrderArray = () => {\n    return ['ascend', 'descend', null];\n  };\n  const handleSortStateChange = key => {\n    setSortState(prevSortState => {\n      const [prevKey, prevSortOrder] = prevSortState ?? [];\n      const order = getOrderArray();\n      const newSortValue = [key, order[0]];\n      if (key === prevKey) {\n        const currentSortIndex = order.indexOf(prevSortOrder);\n        newSortValue[1] = order[(currentSortIndex + 1) % order.length];\n      }\n      if (onSort) {\n        onSort(...newSortValue);\n      }\n      return newSortValue;\n    });\n  };\n  const getSortOrder = key => key === sortedKey ? sortOrder : undefined;\n  const extendedColumns = columns?.map(({\n    render,\n    sorter,\n    title,\n    ...columnProps\n  }) => ({\n    ...columnProps,\n    sortOrder: getSortOrder(columnProps.key),\n    render: (value, record, index) => /*#__PURE__*/_jsxDEV(Body, {\n      level: 2,\n      children: render ? render(value, record, index) : value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this),\n    title: /*#__PURE__*/_jsxDEV(TableColumnTitle, {\n      _key: columnProps.key,\n      onClick: handleSortStateChange,\n      sorter: sorter,\n      sortOrder: getSortOrder(columnProps.key),\n      title: title,\n      appendTo: appendTooltipTo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }));\n  const getSortFn = sortedKey ? columns.find(({\n    key\n  }) => key === sortedKey)?.sorter : undefined;\n  const getSortedDataSource = () => {\n    const data = [...(tableProps?.dataSource ?? [])];\n    if (sortedKey && sortOrder && typeof getSortFn === 'function') {\n      if (sortOrder === 'descend') {\n        return data?.sort(getSortFn).reverse();\n      }\n      return data?.sort(getSortFn);\n    }\n    return tableProps?.dataSource;\n  };\n  const sortedDataSource = getSortedDataSource();\n  return /*#__PURE__*/_jsxDEV(AntdTable, {\n    columns: extendedColumns,\n    locale: {\n      emptyText: emptyContent\n    },\n    ...tableProps,\n    dataSource: sortedDataSource\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"HHu5AiocR27uVTisDGDOpXELruE=\");\n_c = Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","Table","AntdTable","Body","TableColumnTitle","columns","defaultSort","onSort","emptyContent","appendTooltipTo","tableProps","sortState","setSortState","sortedKey","sortOrder","getOrderArray","handleSortStateChange","key","prevSortState","prevKey","prevSortOrder","order","newSortValue","currentSortIndex","indexOf","length","getSortOrder","undefined","extendedColumns","map","render","sorter","title","columnProps","value","record","index","getSortFn","find","getSortedDataSource","data","dataSource","sort","reverse","sortedDataSource","emptyText"],"sources":["/Volumes/csvol/fusion/libs/shared/cdf-utilities/src/components/Table/Table.tsx"],"sourcesContent":["import React, { ReactNode, useState } from 'react';\n\nimport { Table as AntdTable, TableProps as AntdTableProps } from 'antd';\nimport { ColumnType, SortOrder } from 'antd/lib/table/interface';\n\nimport { Body, TooltipProps } from '@cognite/cogs.js';\n\nimport { TableColumnTitle } from './TableColumnTitle';\n\ntype TableColumnType<RecordType> = Omit<ColumnType<RecordType>, 'title'> & {\n  title: React.ReactNode;\n};\n\nexport type TableProps<RecordType> = {\n  columns: TableColumnType<RecordType>[];\n  defaultSort?: [ColumnType<RecordType>['key'], SortOrder];\n  emptyContent: ReactNode;\n  onSort?: (key: string, direction: SortOrder) => void;\n  appendTooltipTo: TooltipProps['appendTo'];\n} & Omit<AntdTableProps<RecordType>, 'columns'>;\n\nexport const Table = <RecordType extends Record<string, unknown>>({\n  columns,\n  defaultSort,\n  onSort,\n  emptyContent,\n  appendTooltipTo,\n  ...tableProps\n}: TableProps<RecordType>): JSX.Element => {\n  const [sortState, setSortState] = useState<\n    [ColumnType<RecordType>['key'], SortOrder] | undefined\n  >(defaultSort);\n  const [sortedKey, sortOrder] = sortState ?? [];\n\n  const getOrderArray = (): SortOrder[] => {\n    return ['ascend', 'descend', null];\n  };\n\n  const handleSortStateChange = (key: ColumnType<RecordType>['key']) => {\n    setSortState((prevSortState) => {\n      const [prevKey, prevSortOrder] = prevSortState ?? [];\n\n      const order = getOrderArray();\n\n      const newSortValue: [ColumnType<RecordType>['key'], SortOrder] = [\n        key,\n        order[0],\n      ];\n\n      if (key === prevKey) {\n        const currentSortIndex = order.indexOf(prevSortOrder!);\n        newSortValue[1] = order[(currentSortIndex + 1) % order.length];\n      }\n\n      if (onSort) {\n        onSort(...(newSortValue as [string, SortOrder]));\n      }\n\n      return newSortValue;\n    });\n  };\n\n  const getSortOrder = (key?: React.Key) =>\n    key === sortedKey ? sortOrder : undefined;\n\n  const extendedColumns = columns?.map(\n    ({ render, sorter, title, ...columnProps }) => ({\n      ...columnProps,\n      sortOrder: getSortOrder(columnProps.key),\n      render: (value: any, record: RecordType, index: number) => (\n        <Body level={2}>{render ? render(value, record, index) : value}</Body>\n      ),\n      title: (\n        <TableColumnTitle<RecordType>\n          _key={columnProps.key}\n          onClick={handleSortStateChange}\n          sorter={sorter}\n          sortOrder={getSortOrder(columnProps.key)}\n          title={title}\n          appendTo={appendTooltipTo}\n        />\n      ),\n    })\n  );\n\n  const getSortFn = sortedKey\n    ? columns.find(({ key }) => key === sortedKey)?.sorter\n    : undefined;\n\n  const getSortedDataSource = () => {\n    const data = [...(tableProps?.dataSource ?? [])];\n    if (sortedKey && sortOrder && typeof getSortFn === 'function') {\n      if (sortOrder === 'descend') {\n        return data?.sort(getSortFn).reverse();\n      }\n      return data?.sort(getSortFn);\n    }\n    return tableProps?.dataSource;\n  };\n\n  const sortedDataSource = getSortedDataSource();\n\n  return (\n    <AntdTable<RecordType>\n      columns={extendedColumns}\n      locale={{\n        emptyText: emptyContent,\n      }}\n      {...tableProps}\n      dataSource={sortedDataSource}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}