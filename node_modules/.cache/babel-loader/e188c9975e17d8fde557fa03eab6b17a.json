{"ast":null,"code":"var _jsxFileName = \"/Volumes/csvol/fusion/libs/shared/plotting-components/src/LineChart/components/Tooltip/Tooltip.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport head from 'lodash/head';\nimport { DEFAULT_BACKGROUND_COLOR } from '../../constants';\nimport { getPointCustomData } from '../../utils/getPointCustomData';\nimport { getTooltipPosition } from '../../utils/getTooltipPosition';\nimport { TooltipContainer, TooltipWrapper } from './elements';\nimport { TooltipDetail } from './TooltipDetail';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tooltip = ({\n  chartRef,\n  variant,\n  plotHoverEvent,\n  xAxisName = 'X',\n  yAxisName = 'Y',\n  backgroundColor = DEFAULT_BACKGROUND_COLOR,\n  referencePosition,\n  showTooltip,\n  formatTooltipContent,\n  renderTooltipContent\n}) => {\n  _s();\n  const tooltipRef = useRef(null);\n  const [tooltipWidth, setTooltipWidth] = useState();\n  const [tooltipHeight, setTooltipHeight] = useState();\n  const point = head(plotHoverEvent?.points);\n  const {\n    x,\n    y\n  } = getTooltipPosition(chartRef, plotHoverEvent, tooltipWidth, tooltipHeight, referencePosition);\n  const updateTooltipWidth = useCallback(() => {\n    setTooltipWidth(tooltipRef.current?.clientWidth);\n    setTooltipHeight(tooltipRef.current?.clientHeight);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [plotHoverEvent, tooltipRef.current?.clientWidth, tooltipRef.current?.clientHeight]);\n  useEffect(() => {\n    updateTooltipWidth();\n  }, [updateTooltipWidth]);\n  const TooltipContent = useMemo(() => {\n    if (!point) {\n      return null;\n    }\n    const tooltipRendererProps = {\n      x: point.x,\n      y: point.y,\n      name: point.data.name,\n      color: String(point.data.line.color),\n      customData: getPointCustomData(point)\n    };\n    if (formatTooltipContent) {\n      return /*#__PURE__*/_jsxDEV(TooltipContainer, {\n        children: formatTooltipContent(tooltipRendererProps).map(props => {\n          return /*#__PURE__*/_jsxDEV(TooltipDetail, {\n            ...props\n          }, props.label, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this);\n    }\n    if (renderTooltipContent) {\n      return renderTooltipContent(tooltipRendererProps);\n    }\n    return /*#__PURE__*/_jsxDEV(TooltipContainer, {\n      children: [/*#__PURE__*/_jsxDEV(TooltipDetail, {\n        label: xAxisName,\n        value: point?.x,\n        backgroundColor: backgroundColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TooltipDetail, {\n        label: yAxisName,\n        value: point?.y,\n        backgroundColor: backgroundColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [point?.curveNumber, point?.pointNumber]);\n  if (!showTooltip) {\n    return null;\n  }\n  const isTooltipVisible = tooltipWidth && Boolean(plotHoverEvent);\n  return /*#__PURE__*/_jsxDEV(TooltipWrapper, {\n    ref: tooltipRef,\n    variant: variant,\n    style: {\n      top: y,\n      left: x,\n      visibility: isTooltipVisible ? 'visible' : 'hidden',\n      opacity: isTooltipVisible ? 1 : 0\n    },\n    children: TooltipContent\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s(Tooltip, \"pheoqiSBD//olVCIJammr364E8c=\");\n_c = Tooltip;\nvar _c;\n$RefreshReg$(_c, \"Tooltip\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","head","DEFAULT_BACKGROUND_COLOR","getPointCustomData","getTooltipPosition","TooltipContainer","TooltipWrapper","TooltipDetail","Tooltip","chartRef","variant","plotHoverEvent","xAxisName","yAxisName","backgroundColor","referencePosition","showTooltip","formatTooltipContent","renderTooltipContent","tooltipRef","tooltipWidth","setTooltipWidth","tooltipHeight","setTooltipHeight","point","points","x","y","updateTooltipWidth","current","clientWidth","clientHeight","TooltipContent","tooltipRendererProps","name","data","color","String","line","customData","map","props","label","curveNumber","pointNumber","isTooltipVisible","Boolean","top","left","visibility","opacity"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/LineChart/components/Tooltip/Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport head from 'lodash/head';\nimport { PlotHoverEvent } from 'plotly.js';\n\nimport { DEFAULT_BACKGROUND_COLOR } from '../../constants';\nimport { Coordinate, TooltipRendererProps, Variant } from '../../types';\nimport { getPointCustomData } from '../../utils/getPointCustomData';\nimport { getTooltipPosition } from '../../utils/getTooltipPosition';\n\nimport { TooltipContainer, TooltipWrapper } from './elements';\nimport { TooltipDetail, TooltipDetailProps } from './TooltipDetail';\n\nexport interface TooltipProps {\n  chartRef: React.RefObject<HTMLDivElement>;\n  variant?: Variant;\n  plotHoverEvent?: PlotHoverEvent;\n  xAxisName?: string;\n  yAxisName?: string;\n  backgroundColor?: string;\n  referencePosition?: Coordinate;\n  showTooltip: boolean;\n  formatTooltipContent?: (props: TooltipRendererProps) => TooltipDetailProps[];\n  renderTooltipContent?: (props: TooltipRendererProps) => JSX.Element;\n}\n\nexport const Tooltip: React.FC<TooltipProps> = ({\n  chartRef,\n  variant,\n  plotHoverEvent,\n  xAxisName = 'X',\n  yAxisName = 'Y',\n  backgroundColor = DEFAULT_BACKGROUND_COLOR,\n  referencePosition,\n  showTooltip,\n  formatTooltipContent,\n  renderTooltipContent,\n}) => {\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  const [tooltipWidth, setTooltipWidth] = useState<number>();\n  const [tooltipHeight, setTooltipHeight] = useState<number>();\n\n  const point = head(plotHoverEvent?.points);\n\n  const { x, y } = getTooltipPosition(\n    chartRef,\n    plotHoverEvent,\n    tooltipWidth,\n    tooltipHeight,\n    referencePosition\n  );\n\n  const updateTooltipWidth = useCallback(() => {\n    setTooltipWidth(tooltipRef.current?.clientWidth);\n    setTooltipHeight(tooltipRef.current?.clientHeight);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    plotHoverEvent,\n    tooltipRef.current?.clientWidth,\n    tooltipRef.current?.clientHeight,\n  ]);\n\n  useEffect(() => {\n    updateTooltipWidth();\n  }, [updateTooltipWidth]);\n\n  const TooltipContent = useMemo(() => {\n    if (!point) {\n      return null;\n    }\n\n    const tooltipRendererProps: TooltipRendererProps = {\n      x: point.x,\n      y: point.y,\n      name: point.data.name,\n      color: String(point.data.line.color),\n      customData: getPointCustomData(point),\n    };\n\n    if (formatTooltipContent) {\n      return (\n        <TooltipContainer>\n          {formatTooltipContent(tooltipRendererProps).map((props) => {\n            return <TooltipDetail key={props.label} {...props} />;\n          })}\n        </TooltipContainer>\n      );\n    }\n\n    if (renderTooltipContent) {\n      return renderTooltipContent(tooltipRendererProps);\n    }\n\n    return (\n      <TooltipContainer>\n        <TooltipDetail\n          label={xAxisName}\n          value={point?.x}\n          backgroundColor={backgroundColor}\n        />\n        <TooltipDetail\n          label={yAxisName}\n          value={point?.y}\n          backgroundColor={backgroundColor}\n        />\n      </TooltipContainer>\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [point?.curveNumber, point?.pointNumber]);\n\n  if (!showTooltip) {\n    return null;\n  }\n\n  const isTooltipVisible = tooltipWidth && Boolean(plotHoverEvent);\n\n  return (\n    <TooltipWrapper\n      ref={tooltipRef}\n      variant={variant}\n      style={{\n        top: y,\n        left: x,\n        visibility: isTooltipVisible ? 'visible' : 'hidden',\n        opacity: isTooltipVisible ? 1 : 0,\n      }}\n    >\n      {TooltipContent}\n    </TooltipWrapper>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}