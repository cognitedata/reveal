name: NX - CD
on:
  push:
    branches:
      - master
      - release*

env:
  NX_CLOUD_ACCESS_TOKEN: ${{secrets.NX_CLOUD_ACCESS_TOKEN}}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Set NPMKEY variable
        run: |
          export NPMKEY=$(echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_READONLY_TOKEN }}")
          echo "::set-output name=NPMKEY::$NPMKEY"
        id: npm_auth_key

      - name: Create .npmrc
        run: echo '${{ steps.npm_auth_key.outputs.NPMKEY }}' > .npmrc

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: cache-node-modules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_READONLY_TOKEN }}

      - name: 'Get affected libs to build'
        id: affected-libs
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: 'HEAD~1'
          projects: 'libs/**'

      - name: 'Get affected apps to build'
        id: affected-apps
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: 'HEAD~1'
          projects: 'apps/**'
          exclude: '*shell'
          isRelease: 'true'
          branchName: ${{ github.ref_name }}

      - name: 'Get affected shell apps to build'
        id: affected-shell-apps
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: 'HEAD~1'
          projects: '*shell'
          isRelease: 'true'
          branchName: ${{ github.ref_name }}

    outputs:
      affected-libs: ${{ steps.affected-libs.outputs.projects }}
      affected-libs-string: ${{ steps.affected-libs.outputs.projectsString }}
      affected-apps: ${{ steps.affected-apps.outputs.projects }}
      affected-shell-apps: ${{ steps.affected-shell-apps.outputs.projects }}

  build-libs:
    name: 'Build libs'
    runs-on: ubuntu-20.04
    needs: setup
    if: ${{ github.ref_name == 'master' && needs.setup.outputs.affected-libs != '' && toJson(fromJson(needs.setup.outputs.affected-libs)) != '[]' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
        run: npx nx run-many --target=build --parallel --nx-bail --configuration=production --projects ${{ needs.setup.outputs.affected-libs-string }}
      # here we add the part about publishing the libs to npm

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: [setup, build-libs]
    if: ${{ !cancelled() && !failure() && needs.build-libs.result != 'failure' && needs.build-libs.result != 'cancelled' && needs.setup.outputs.affected-apps != '' && toJson(fromJson(needs.setup.outputs.affected-apps)) != '[]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-apps)  }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Get deploy environment
        id: deploy-environment
        uses: ./scripts/github-actions/get-deploy-environment
        with:
          project: ${{ matrix.project }}
          branch: ${{ github.ref_name }}

      - name: Build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
        run: npx nx run ${{ matrix.project }}:build:${{ steps.deploy-environment.outputs.environment }}

      - name: Get project config
        id: project-config
        uses: ./scripts/github-actions/nx-get-project-config
        with:
          project: ${{ matrix.project }}

      - name: Get firebase deploy target
        id: firebase-target
        uses: ./scripts/github-actions/get-firebase-target
        with:
          project: ${{ matrix.project }}
          environment: ${{ steps.deploy-environment.outputs.environment }}
          firebaseSite: ${{ fromJson(steps.project-config.outputs.config).pipeline.firebaseSite }}
          firebaseProjectId: ${{ fromJson(steps.project-config.outputs.config).pipeline.firebaseProjectId }}

      - name: Deploy to firebase hosting (${{ steps.deploy-environment.outputs.environment }})
        uses: FirebaseExtended/action-hosting-deploy@v0
        if: ${{ fromJson(steps.project-config.outputs.config).pipeline.releaseStrategy }}
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_HOSTING_DEPLOY_SA }}'
          channelId: live
          projectId: ${{ steps.firebase-target.outputs.projectId }}
          target: ${{ steps.firebase-target.outputs.site }}
          entryPoint: dist/apps/${{ matrix.project }}/

      - name: Save missing keys to locize
        if: ${{ fromJson(steps.project-config.outputs.config).pipeline.i18n }}
        run: yarn i18n-push ${{ matrix.project }}
        env:
          LOCIZE_API_KEY: ${{ secrets.LOCIZE_API_KEY }}

      - name: Remove deleted keys from locize
        if: ${{ fromJson(steps.project-config.outputs.config).pipeline.i18n }}
        run: yarn i18n-remove-deleted ${{ matrix.project }}
        env:
          LOCIZE_API_KEY: ${{ secrets.LOCIZE_API_KEY }}

  build-shell:
    name: 'Build shell apps'
    runs-on: ubuntu-20.04
    needs: [setup, build]
    if: ${{ github.ref_name == 'master' && !cancelled() && !failure() && needs.setup.outputs.affected-shell-apps != '' && toJson(fromJson(needs.setup.outputs.affected-shell-apps)) != '[]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-shell-apps)  }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
        run: npx nx run ${{ matrix.project }}:build:production

      - name: Get deploy environment
        id: deploy-environment
        uses: ./scripts/github-actions/get-deploy-environment
        with:
          project: ${{ matrix.project }}
          branch: ${{ github.ref_name }}

      - name: Get project config
        id: project-config
        uses: ./scripts/github-actions/nx-get-project-config
        with:
          project: ${{ matrix.project }}

      - name: Get firebase deploy target
        id: firebase-target
        uses: ./scripts/github-actions/get-firebase-target
        with:
          project: ${{ matrix.project }}
          environment: ${{ steps.deploy-environment.outputs.environment }}
          firebaseSite: ${{ fromJson(steps.project-config.outputs.config).pipeline.firebaseSite }}
          firebaseProjectId: ${{ fromJson(steps.project-config.outputs.config).pipeline.firebaseProjectId }}

      - name: Deploy to firebase hosting (${{ steps.deploy-environment.outputs.environment }})
        uses: FirebaseExtended/action-hosting-deploy@v0
        if: ${{ fromJson(steps.project-config.outputs.config).pipeline.releaseStrategy }}
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_HOSTING_DEPLOY_SA }}'
          channelId: live
          projectId: ${{ steps.firebase-target.outputs.projectId }}
          target: ${{ steps.firebase-target.outputs.site }}
          entryPoint: dist/apps/${{ matrix.project }}/

      - name: Save missing keys to locize
        if: ${{ fromJson(steps.project-config.outputs.config).pipeline.i18n }}
        run: yarn i18n-push ${{ matrix.project }}
        env:
          LOCIZE_API_KEY: ${{ secrets.LOCIZE_API_KEY }}

      - name: Remove deleted keys from locize
        if: ${{ fromJson(steps.project-config.outputs.config).pipeline.i18n }}
        run: yarn i18n-remove-deleted ${{ matrix.project }}
        env:
          LOCIZE_API_KEY: ${{ secrets.LOCIZE_API_KEY }}

  ci-passed:
    # see https://github.community/t/status-check-for-a-matrix-jobs/127354/7
    name: CI Passed
    needs: [setup, build-libs, build, build-shell]
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check all job status
        # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
        # see https://stackoverflow.com/a/67532120/4907315
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
          }}
        run: exit 1
