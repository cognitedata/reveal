{"ast":null,"code":"var _jsxFileName = \"/Volumes/csvol/fusion/apps/functions-ui/src/main.tsx\";\nimport React from 'react';\nimport ReactDOMClient from 'react-dom/client';\nimport singleSpaReact from 'single-spa-react';\nimport { AppWrapper } from './AppWrapper';\nimport { environment } from './environments/environment';\n\n// Fusion UI will expect this lifecycle events to be exported\n// when running app on local env as standalone app, we don't need it\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst noop = () => '';\nlet lifecycles = {\n  mount: noop,\n  bootstrap: noop,\n  unmount: noop\n};\nif (environment.APP_ENV === 'mock') {\n  const container = document.getElementById('root');\n  const root = ReactDOMClient.createRoot(container);\n  root.render( /*#__PURE__*/_jsxDEV(AppWrapper, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 15\n  }, this));\n} else {\n  lifecycles = singleSpaReact({\n    React,\n    ReactDOMClient,\n    rootComponent: AppWrapper,\n    errorBoundary() {\n      // Customize the root error boundary for your micro-frontend here.\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"An error occurred in your app\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }, this);\n    }\n  });\n}\nexport const {\n  mount,\n  bootstrap,\n  unmount\n} = lifecycles;","map":{"version":3,"names":["React","ReactDOMClient","singleSpaReact","AppWrapper","environment","noop","lifecycles","mount","bootstrap","unmount","APP_ENV","container","document","getElementById","root","createRoot","render","rootComponent","errorBoundary"],"sources":["/Volumes/csvol/fusion/apps/functions-ui/src/main.tsx"],"sourcesContent":["import React from 'react';\n\nimport ReactDOMClient from 'react-dom/client';\nimport singleSpaReact from 'single-spa-react';\n\nimport { AppWrapper } from './AppWrapper';\nimport { environment } from './environments/environment';\n\n// Fusion UI will expect this lifecycle events to be exported\n// when running app on local env as standalone app, we don't need it\nconst noop = () => '';\nlet lifecycles = {\n  mount: noop,\n  bootstrap: noop,\n  unmount: noop,\n} as any;\n\nif (environment.APP_ENV === 'mock') {\n  const container = document.getElementById('root');\n  const root = ReactDOMClient.createRoot(container!);\n  root.render(<AppWrapper />);\n} else {\n  lifecycles = singleSpaReact({\n    React,\n    ReactDOMClient,\n    rootComponent: AppWrapper,\n    errorBoundary() {\n      // Customize the root error boundary for your micro-frontend here.\n      return <span>An error occurred in your app</span>;\n    },\n  });\n}\n\nexport const { mount, bootstrap, unmount } = lifecycles;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,SAASC,UAAU,QAAQ,cAAc;AACzC,SAASC,WAAW,QAAQ,4BAA4B;;AAExD;AACA;AAAA;AACA,MAAMC,IAAI,GAAG,MAAM,EAAE;AACrB,IAAIC,UAAU,GAAG;EACfC,KAAK,EAAEF,IAAI;EACXG,SAAS,EAAEH,IAAI;EACfI,OAAO,EAAEJ;AACX,CAAQ;AAER,IAAID,WAAW,CAACM,OAAO,KAAK,MAAM,EAAE;EAClC,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;EACjD,MAAMC,IAAI,GAAGb,cAAc,CAACc,UAAU,CAACJ,SAAS,CAAE;EAClDG,IAAI,CAACE,MAAM,eAAC,QAAC,UAAU;IAAA;IAAA;IAAA;EAAA,QAAG,CAAC;AAC7B,CAAC,MAAM;EACLV,UAAU,GAAGJ,cAAc,CAAC;IAC1BF,KAAK;IACLC,cAAc;IACdgB,aAAa,EAAEd,UAAU;IACzBe,aAAa,GAAG;MACd;MACA,oBAAO;QAAA,UAAM;MAA6B;QAAA;QAAA;QAAA;MAAA,QAAO;IACnD;EACF,CAAC,CAAC;AACJ;AAEA,OAAO,MAAM;EAAEX,KAAK;EAAEC,SAAS;EAAEC;AAAQ,CAAC,GAAGH,UAAU"},"metadata":{},"sourceType":"module"}