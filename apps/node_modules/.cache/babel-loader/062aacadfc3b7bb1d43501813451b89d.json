{"ast":null,"code":"import { DEFAULT_RAW_DATAPOINTS_LIMIT } from '../constants';\nexport const getDataFetchMode = ({\n  numberOfPoints,\n  dataFetchOptions = {},\n  isString\n}) => {\n  if (isString) {\n    return 'raw';\n  }\n  const {\n    mode,\n    rawDatapointsLimit = DEFAULT_RAW_DATAPOINTS_LIMIT\n  } = dataFetchOptions;\n  if (mode && mode !== 'auto') {\n    return mode;\n  }\n  if (numberOfPoints > rawDatapointsLimit) {\n    return 'aggregate';\n  }\n  return 'raw';\n};","map":{"version":3,"names":["DEFAULT_RAW_DATAPOINTS_LIMIT","getDataFetchMode","numberOfPoints","dataFetchOptions","isString","mode","rawDatapointsLimit"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/TimeseriesChart/domain/internal/utils/getDataFetchMode.ts"],"sourcesContent":["import { DataFetchMode, DataFetchOptions } from '../../../types';\nimport { DEFAULT_RAW_DATAPOINTS_LIMIT } from '../constants';\n\ninterface Props {\n  numberOfPoints: number;\n  dataFetchOptions?: DataFetchOptions;\n  isString?: boolean;\n}\n\nexport const getDataFetchMode = ({\n  numberOfPoints,\n  dataFetchOptions = {} as DataFetchOptions,\n  isString,\n}: Props): DataFetchMode => {\n  if (isString) {\n    return 'raw';\n  }\n\n  const { mode, rawDatapointsLimit = DEFAULT_RAW_DATAPOINTS_LIMIT } =\n    dataFetchOptions;\n\n  if (mode && mode !== 'auto') {\n    return mode;\n  }\n\n  if (numberOfPoints > rawDatapointsLimit) {\n    return 'aggregate';\n  }\n\n  return 'raw';\n};\n"],"mappings":"AACA,SAASA,4BAA4B,QAAQ,cAAc;AAQ3D,OAAO,MAAMC,gBAAgB,GAAG,CAAC;EAC/BC,cAAc;EACdC,gBAAgB,GAAG,CAAC,CAAqB;EACzCC;AACK,CAAC,KAAoB;EAC1B,IAAIA,QAAQ,EAAE;IACZ,OAAO,KAAK;EACd;EAEA,MAAM;IAAEC,IAAI;IAAEC,kBAAkB,GAAGN;EAA6B,CAAC,GAC/DG,gBAAgB;EAElB,IAAIE,IAAI,IAAIA,IAAI,KAAK,MAAM,EAAE;IAC3B,OAAOA,IAAI;EACb;EAEA,IAAIH,cAAc,GAAGI,kBAAkB,EAAE;IACvC,OAAO,WAAW;EACpB;EAEA,OAAO,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"module"}