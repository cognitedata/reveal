import { CodeActionsService } from './CodeActionsService';
import { CodeEditorRange, DiagnosticItem } from './types';

describe('CodeActionsService Test', () => {
  const codeActionsService = new CodeActionsService();
  it('provides primitive field information', () => {
    const graphQlMock = 'type Person { field: MissingType }';
    const range = {
      startLineNumber: 1,
      startColumn: 1,
      endLineNumber: 1,
      endColumn: 30,
    } as CodeEditorRange;

    const diagnostics = [
      {
        startLineNumber: 36,
        startColumn: 1,
        endLineNumber: 36,
        endColumn: 16,
        message: 'Unknown type "CustomType".',
      },
    ] as DiagnosticItem[];

    const options = {
      lineCount: 39,
      lastLineLength: 1,
    };
    const actual = codeActionsService.getCodeActions(
      graphQlMock,
      range,
      diagnostics,
      options
    );

    const expected = [
      {
        title: 'Create missing type',
        diagnostics: [
          {
            startLineNumber: 36,
            startColumn: 1,
            endLineNumber: 36,
            endColumn: 16,
            message: 'Unknown type "CustomType".',
          },
        ],
        kind: 'quickfix',
        edit: {
          edits: [
            {
              edit: {
                range: {
                  startLineNumber: 39,
                  startColumn: 1,
                  endLineNumber: 39,
                  endColumn: 1,
                },
                text: '\n\ntype CustomType {\n  _autogeneratedField: String \n}\n',
              },
            },
          ],
        },
        isPreferred: true,
      },
    ];

    expect(actual).toEqual(expected);
  });
});
