{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport omit from 'lodash/omit';\nimport { getAssetSubtreeIdFilter } from '../../../utils';\nimport { mergeDynamicFilterOptions } from '../../../utils/mergeDynamicFilterOptions';\nimport { useSequencesMetadataKeysAggregateQuery } from '../../service';\nimport { mapFiltersToSequenceAdvancedFilters } from '../transformers';\nexport const useSequenceMetadataFilterOptions = ({\n  searchQuery,\n  filter,\n  query\n}) => {\n  _s();\n  const {\n    data = [],\n    isLoading,\n    isError\n  } = useSequencesMetadataKeysAggregateQuery({\n    query\n  });\n  const omittedFilter = omit(filter, 'metadata');\n  const {\n    data: dynamicData = []\n  } = useSequencesMetadataKeysAggregateQuery({\n    query,\n    advancedFilter: mapFiltersToSequenceAdvancedFilters(omittedFilter, searchQuery),\n    filter: getAssetSubtreeIdFilter(omittedFilter)\n  });\n  const options = useMemo(() => {\n    return mergeDynamicFilterOptions(data, dynamicData);\n  }, [data, dynamicData]);\n  return {\n    options,\n    isLoading,\n    isError\n  };\n};\n_s(useSequenceMetadataFilterOptions, \"mxi3M8UOJtPk2Ogw2kVumKjhJSE=\", false, function () {\n  return [useSequencesMetadataKeysAggregateQuery, useSequencesMetadataKeysAggregateQuery];\n});","map":{"version":3,"names":["useMemo","omit","getAssetSubtreeIdFilter","mergeDynamicFilterOptions","useSequencesMetadataKeysAggregateQuery","mapFiltersToSequenceAdvancedFilters","useSequenceMetadataFilterOptions","searchQuery","filter","query","data","isLoading","isError","omittedFilter","dynamicData","advancedFilter","options"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/sequence/internal/queries/useSequenceMetadataFilterOptions.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport omit from 'lodash/omit';\n\nimport { InternalSequenceFilters } from '@data-exploration-lib/core';\n\nimport { getAssetSubtreeIdFilter } from '../../../utils';\nimport { mergeDynamicFilterOptions } from '../../../utils/mergeDynamicFilterOptions';\nimport { useSequencesMetadataKeysAggregateQuery } from '../../service';\nimport { mapFiltersToSequenceAdvancedFilters } from '../transformers';\n\ninterface Props {\n  filter?: InternalSequenceFilters;\n  searchQuery?: string;\n  query?: string;\n}\n\nexport const useSequenceMetadataFilterOptions = ({\n  searchQuery,\n  filter,\n  query,\n}: Props) => {\n  const {\n    data = [],\n    isLoading,\n    isError,\n  } = useSequencesMetadataKeysAggregateQuery({\n    query,\n  });\n\n  const omittedFilter = omit(filter, 'metadata');\n  const { data: dynamicData = [] } = useSequencesMetadataKeysAggregateQuery({\n    query,\n    advancedFilter: mapFiltersToSequenceAdvancedFilters(\n      omittedFilter,\n      searchQuery\n    ),\n    filter: getAssetSubtreeIdFilter(omittedFilter),\n  });\n\n  const options = useMemo(() => {\n    return mergeDynamicFilterOptions(data, dynamicData);\n  }, [data, dynamicData]);\n\n  return {\n    options,\n    isLoading,\n    isError,\n  };\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,OAAOC,IAAI,MAAM,aAAa;AAI9B,SAASC,uBAAuB,QAAQ,gBAAgB;AACxD,SAASC,yBAAyB,QAAQ,0CAA0C;AACpF,SAASC,sCAAsC,QAAQ,eAAe;AACtE,SAASC,mCAAmC,QAAQ,iBAAiB;AAQrE,OAAO,MAAMC,gCAAgC,GAAG,CAAC;EAC/CC,WAAW;EACXC,MAAM;EACNC;AACK,CAAC,KAAK;EAAA;EACX,MAAM;IACJC,IAAI,GAAG,EAAE;IACTC,SAAS;IACTC;EACF,CAAC,GAAGR,sCAAsC,CAAC;IACzCK;EACF,CAAC,CAAC;EAEF,MAAMI,aAAa,GAAGZ,IAAI,CAACO,MAAM,EAAE,UAAU,CAAC;EAC9C,MAAM;IAAEE,IAAI,EAAEI,WAAW,GAAG;EAAG,CAAC,GAAGV,sCAAsC,CAAC;IACxEK,KAAK;IACLM,cAAc,EAAEV,mCAAmC,CACjDQ,aAAa,EACbN,WAAW,CACZ;IACDC,MAAM,EAAEN,uBAAuB,CAACW,aAAa;EAC/C,CAAC,CAAC;EAEF,MAAMG,OAAO,GAAGhB,OAAO,CAAC,MAAM;IAC5B,OAAOG,yBAAyB,CAACO,IAAI,EAAEI,WAAW,CAAC;EACrD,CAAC,EAAE,CAACJ,IAAI,EAAEI,WAAW,CAAC,CAAC;EAEvB,OAAO;IACLE,OAAO;IACPL,SAAS;IACTC;EACF,CAAC;AACH,CAAC;AAAC,GAhCWN,gCAAgC;EAAA,QASvCF,sCAAsC,EAKPA,sCAAsC;AAAA"},"metadata":{},"sourceType":"module"}