{"ast":null,"code":"export const getChatCompletions = async (request, sdk) => {\n  const url = `/api/v1/projects/${sdk.project}/context/gpt/chat/completions`;\n  const response = await sdk.post(url, {\n    data: request,\n    withCredentials: true\n  });\n  return response.data.choices;\n};","map":{"version":3,"names":["getChatCompletions","request","sdk","url","project","response","post","data","withCredentials","choices"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/gpt/service/network/getChatCompletions.ts"],"sourcesContent":["import { CogniteClient } from '@cognite/sdk';\n\ntype GptMessage = {\n  role: 'user' | 'system' | 'assistant';\n  content: string;\n};\n\ntype GptRequest = {\n  messages: GptMessage[];\n  temperature?: number;\n  maxTokens?: number;\n  topP?: number;\n};\n\ntype GptMessageResult = {\n  message: {\n    role: string;\n    content: string;\n    finishReason: string;\n  };\n};\n\ntype GptCompletionResponse = {\n  data: {\n    choices: GptMessageResult[];\n  };\n};\n\nexport const getChatCompletions = async (\n  request: GptRequest,\n  sdk: CogniteClient\n): Promise<GptMessageResult[]> => {\n  const url = `/api/v1/projects/${sdk.project}/context/gpt/chat/completions`;\n  const response = (await sdk.post(url, {\n    data: request,\n    withCredentials: true,\n  })) as GptCompletionResponse;\n\n  return response.data.choices;\n};\n"],"mappings":"AA4BA,OAAO,MAAMA,kBAAkB,GAAG,OAChCC,OAAmB,EACnBC,GAAkB,KACc;EAChC,MAAMC,GAAG,GAAI,oBAAmBD,GAAG,CAACE,OAAQ,+BAA8B;EAC1E,MAAMC,QAAQ,GAAI,MAAMH,GAAG,CAACI,IAAI,CAACH,GAAG,EAAE;IACpCI,IAAI,EAAEN,OAAO;IACbO,eAAe,EAAE;EACnB,CAAC,CAA2B;EAE5B,OAAOH,QAAQ,CAACE,IAAI,CAACE,OAAO;AAC9B,CAAC"},"metadata":{},"sourceType":"module"}