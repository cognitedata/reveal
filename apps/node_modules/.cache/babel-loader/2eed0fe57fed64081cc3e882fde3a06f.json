{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport isEmpty from 'lodash/isEmpty';\nimport { useSDK } from '@cognite/sdk-provider';\nimport { queryKeys } from '../../../queryKeys';\nimport { getAssetsAggregate } from '../network';\nexport const useAssetsAggregateQuery = ({\n  filter,\n  advancedFilter\n} = {}, options) => {\n  _s();\n  const sdk = useSDK();\n  const {\n    data,\n    ...rest\n  } = useQuery(queryKeys.aggregateAssets([advancedFilter, filter]), () => {\n    return getAssetsAggregate(sdk, {\n      filter,\n      advancedFilter\n    });\n  }, {\n    ...options\n  });\n  const flattenData = useMemo(() => (data?.items || []).flatMap(({\n    count\n  }) => count), [data?.items]);\n  return {\n    data: {\n      count: !isEmpty(flattenData) ? flattenData[0] : 0\n    },\n    ...rest\n  };\n};\n_s(useAssetsAggregateQuery, \"IgLRbTlWuVONHCzt8A0Z29W6H60=\", false, function () {\n  return [useSDK, useQuery];\n});","map":{"version":3,"names":["useMemo","useQuery","isEmpty","useSDK","queryKeys","getAssetsAggregate","useAssetsAggregateQuery","filter","advancedFilter","options","sdk","data","rest","aggregateAssets","flattenData","items","flatMap","count"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/assets/service/queries/useAssetsAggregateQuery.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { AssetFilterProps } from '@cognite/sdk';\nimport { useSDK } from '@cognite/sdk-provider';\n\nimport { AdvancedFilter } from '../../../builders';\nimport { queryKeys } from '../../../queryKeys';\nimport { AssetsProperties } from '../../internal';\nimport { getAssetsAggregate } from '../network';\n\nexport const useAssetsAggregateQuery = (\n  {\n    filter,\n    advancedFilter,\n  }: {\n    filter?: AssetFilterProps;\n    advancedFilter?: AdvancedFilter<AssetsProperties>;\n  } = {},\n  options?: UseQueryOptions\n) => {\n  const sdk = useSDK();\n\n  const { data, ...rest } = useQuery(\n    queryKeys.aggregateAssets([advancedFilter, filter]),\n    () => {\n      return getAssetsAggregate(sdk, {\n        filter,\n        advancedFilter,\n      });\n    },\n    {\n      ...(options as any),\n    }\n  );\n\n  const flattenData = useMemo(\n    () => (data?.items || []).flatMap(({ count }) => count),\n    [data?.items]\n  );\n\n  return {\n    data: { count: !isEmpty(flattenData) ? flattenData[0] : 0 },\n    ...rest,\n  };\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,QAAQ,QAAyB,uBAAuB;AACjE,OAAOC,OAAO,MAAM,gBAAgB;AAGpC,SAASC,MAAM,QAAQ,uBAAuB;AAG9C,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,SAASC,kBAAkB,QAAQ,YAAY;AAE/C,OAAO,MAAMC,uBAAuB,GAAG,CACrC;EACEC,MAAM;EACNC;AAIF,CAAC,GAAG,CAAC,CAAC,EACNC,OAAyB,KACtB;EAAA;EACH,MAAMC,GAAG,GAAGP,MAAM,EAAE;EAEpB,MAAM;IAAEQ,IAAI;IAAE,GAAGC;EAAK,CAAC,GAAGX,QAAQ,CAChCG,SAAS,CAACS,eAAe,CAAC,CAACL,cAAc,EAAED,MAAM,CAAC,CAAC,EACnD,MAAM;IACJ,OAAOF,kBAAkB,CAACK,GAAG,EAAE;MAC7BH,MAAM;MACNC;IACF,CAAC,CAAC;EACJ,CAAC,EACD;IACE,GAAIC;EACN,CAAC,CACF;EAED,MAAMK,WAAW,GAAGd,OAAO,CACzB,MAAM,CAACW,IAAI,EAAEI,KAAK,IAAI,EAAE,EAAEC,OAAO,CAAC,CAAC;IAAEC;EAAM,CAAC,KAAKA,KAAK,CAAC,EACvD,CAACN,IAAI,EAAEI,KAAK,CAAC,CACd;EAED,OAAO;IACLJ,IAAI,EAAE;MAAEM,KAAK,EAAE,CAACf,OAAO,CAACY,WAAW,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG;IAAE,CAAC;IAC3D,GAAGF;EACL,CAAC;AACH,CAAC;AAAC,GAlCWN,uBAAuB;EAAA,QAUtBH,MAAM,EAEQF,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}