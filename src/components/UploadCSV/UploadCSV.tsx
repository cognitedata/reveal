import React, { useContext, useState } from 'react';

import message from 'antd/lib/message';
import Spin from 'antd/lib/spin';
import Progress from 'antd/lib/progress';
import Tag from 'antd/lib/tag';
import Select from 'antd/lib/select';
import Alert from 'antd/lib/alert';
import Modal from 'antd/lib/modal';
import Upload, { UploadChangeParam } from 'antd/lib/upload';
import PapaParse from 'papaparse';
import sdk from 'utils/sdkSingleton';
import { RawDBRowInsert, RawDBRow } from '@cognite/sdk';
import { Icon } from '@cognite/cogs.js';
import uuid from 'uuid';
import { trackEvent } from '@cognite/cdf-route-tracker';
import styled from 'styled-components';
import { getContainer } from 'utils/utils';
import { RawExplorerContext } from 'contexts';
import handleError from 'utils/handleError';

const { Dragger } = Upload;

interface UploadCsvProps {
  table: string;
  database: string;
  csvModalVisible: boolean;
  setCSVModalVisible(value: boolean): void;
  isFetching: boolean;
  setIsFetching(value: boolean): void;
  tableData: RawDBRow[];
}

const UploadCSV = ({
  csvModalVisible,
  setCSVModalVisible,
  database,
  table,
  setIsFetching,
}: UploadCsvProps) => {
  const [fileName, setFileName] = useState<string>('');
  const [dataUploaded, setDataUploaded] = useState<any[]>([]);
  const [uploadProgress, setUploadProgress] = useState<number>(0);
  const [processingData, setProcessingData] = useState<boolean>(false);
  const [selectedKeyIndex, setSelectedKeyIndex] = useState<number>(-1);
  const [parsingProgress, setParsingProgress] = useState<number>(0);

  const { fetchLimit, setIsFetchingTableData, setTableData } = useContext(
    RawExplorerContext
  );

  const saveDataToApi = async () => {
    trackEvent('RAW.Explorer.CSVUpload.Upload');
    setIsFetching(true);
    setProcessingData(true);
    const cols: any[] = dataUploaded.shift();
    const parsedData: RawDBRowInsert[] = dataUploaded
      .filter((item) => item[0])
      .map((row, index) => {
        setParsingProgress((100 * (index / (dataUploaded.length - 1))) / 2);
        let key;
        if (selectedKeyIndex !== -1) {
          key = row[selectedKeyIndex];
        } else {
          key = uuid();
        }
        const rowObject: RawDBRowInsert = { key, columns: {} };
        row.forEach((value: any, currentIndex: number) => {
          rowObject.columns[cols[currentIndex]] = value;
        });
        return rowObject;
      });

    setIsFetching(true);
    try {
      if (selectedKeyIndex === -1) {
        trackEvent('RAW.Explorer.CSVUpload.AutoGeneratedKey');
        setParsingProgress(70);
        await sdk.raw.deleteTables(database, [{ name: table }]);
        setParsingProgress(80);
        await sdk.raw.createTables(database, [{ name: table }]);
      } else {
        trackEvent('RAW.Explorer.CSVUpload.SelectedKey');
      }
      setParsingProgress(90);
      await sdk.raw.insertRows(database, table, parsedData);
      resetState();
      setCSVModalVisible(false);
      setIsFetching(false);
      setParsingProgress(100);

      try {
        setIsFetchingTableData(true);
        const list = await sdk.raw
          .listRows(unescape(database), unescape(table))
          .autoPagingToArray({ limit: fetchLimit });
        setTableData(list);
        setIsFetchingTableData(false);
      } catch (e) {
        handleError(e);
        setIsFetchingTableData(false);
      }

      return message.success(
        `File ${fileName} has been successfully uploaded to table ${table}`
      );
    } catch (e) {
      resetState();
      return message.error(`Failed to upload data ${e.reason}`);
    }
  };

  const resetState = () => {
    setFileName('');
    setDataUploaded([]);
    setUploadProgress(0);
    setProcessingData(false);
  };

  const checkAndReturnCols = () => {
    const cols: any[] = [];
    // eslint-disable-next-line consistent-return
    dataUploaded[0].forEach((col: string) => {
      if (col !== '') {
        cols.push(col);
      } else {
        resetState();
        return message.error(
          'A column name in the CSV file is empty, please fill and try again.',
          10
        );
      }
    });
    return (
      <div>
        {cols.map((col) => (
          <Tag style={{ margin: '5px' }} key={col}>
            {col}
          </Tag>
        ))}
        <div style={{ marginTop: '20px' }}>
          <p>Select a column to use as a unique key for the table</p>
          Unique Key Column :{' '}
          <Select
            defaultValue="-1"
            style={{ width: '60%' }}
            value={String(selectedKeyIndex)}
            onChange={(val: string) => setSelectedKeyIndex(Number(val))}
            getPopupContainer={getContainer}
          >
            <Select.Option value="-1" key="-1">
              Generate a new Key Column
            </Select.Option>
            {cols.map((col, index) => (
              <Select.Option key={String(index)} value={String(index)}>
                {col}
              </Select.Option>
            ))}
          </Select>
          {selectedKeyIndex === -1 && (
            <Alert
              style={{ marginTop: '20px' }}
              type="info"
              message="Please note that choosing the auto generated key column option, will clear all existing data in the table"
            />
          )}
        </div>
      </div>
    );
  };
  const fileProps = {
    name: 'file',
    multiple: false,
    handleManualRemove() {
      setFileName('');
    },
    beforeUpload(file: { size: number }) {
      if (file.size > Number(parseFloat('1e+8').toFixed(8))) {
        resetState();
        message.error(
          'CSV file cannot be larger than 100 MB, please try again'
        );
        return false;
      }
      return true;
    },
    accept: '.csv',
    onChange(info: UploadChangeParam) {
      setUploadProgress(info.file.percent ? info.file.percent : 0);
      const reader = new FileReader();
      if ((info.file.size || 0) > Number(parseFloat('1e+8').toFixed(8))) {
        resetState();
        return;
      }
      if (info.file.name) {
        setFileName(info.file.name);
        reader.onload = (event: any) => {
          const csvData = PapaParse.parse(event.target.result, {});

          if (csvData && csvData.data) {
            setDataUploaded(csvData.data);
            setUploadProgress(100);
            message.success(`${info.file.name} file uploaded successfully.`, 3);
          }
        };
        if (info.file.originFileObj) {
          reader.readAsText(info.file.originFileObj);
        }
      }
    },
  };

  const renderModalContent = () => {
    if (fileName !== '') {
      if (processingData) {
        return (
          <ContentWrapper>
            <p> Writing to CDF...</p>
            <Progress type="line" percent={parsingProgress} />
          </ContentWrapper>
        );
      }
      if (uploadProgress && uploadProgress < 100) {
        return (
          <ContentWrapper>
            <p> Uploading csv...</p>
            <Progress type="line" percent={uploadProgress} />
          </ContentWrapper>
        );
      }
      return (
        <ContentWrapper>
          <p>The file uploaded contains the following columns: </p>
          {dataUploaded && dataUploaded[0] ? (
            checkAndReturnCols()
          ) : (
            <Spin tip="Parsing column names" />
          )}
        </ContentWrapper>
      );
    }
    return (
      <Dragger {...fileProps}>
        <p className="ant-upload-drag-icon">
          <Icon size={24} type="Upload" />
        </p>
        <p className="ant-upload-text">
          Click or drag file to this area to upload
        </p>
        <p className="ant-upload-hint">
          The first row in the CSV file must contain all{' '}
          <strong>table column names</strong>. <br />
          Each column with data must have a corresponding column title.
        </p>
        <p className="ant-upload-hint">
          <strong>File size must not exceed 100 MB</strong>
        </p>
      </Dragger>
    );
  };

  return (
    <Modal
      visible={csvModalVisible}
      title="Upload CSV file"
      onCancel={() => {
        resetState();
        setCSVModalVisible(false);
      }}
      okText="Confirm Upload"
      onOk={() => saveDataToApi()}
      okButtonProps={{
        loading: processingData,
        disabled: fileName === '' || (!dataUploaded && !dataUploaded[0]),
      }}
      getContainer={getContainer}
    >
      {renderModalContent()}
    </Modal>
  );
};

export default UploadCSV;

const ContentWrapper = styled.div`
  float: center;
`;
