{"ast":null,"code":"var _s = $RefreshSig$();\nimport { mapAggregatesToFilters, useDocumentTotalAggregates } from '../../service';\nexport const useDocumentAggregateSourceQuery = () => {\n  _s();\n  const {\n    data,\n    ...rest\n  } = useDocumentTotalAggregates([{\n    property: ['sourceFile', 'source']\n  }]);\n\n  // Using type assertions since we are aggregating the source property whose type will always return string\n  return {\n    data: mapAggregatesToFilters(data),\n    ...rest\n  };\n};\n_s(useDocumentAggregateSourceQuery, \"LajCXqztfAN0ONmC4Y5zWOm9RrY=\", false, function () {\n  return [useDocumentTotalAggregates];\n});","map":{"version":3,"names":["mapAggregatesToFilters","useDocumentTotalAggregates","useDocumentAggregateSourceQuery","data","rest","property"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/documents/internal/hooks/useDocumentAggregateSourceQuery.ts"],"sourcesContent":["import {\n  mapAggregatesToFilters,\n  useDocumentTotalAggregates,\n} from '../../service';\n\ntype SourceDataType = { label: string; count: number; value: string };\n\nexport const useDocumentAggregateSourceQuery = () => {\n  const { data, ...rest } = useDocumentTotalAggregates([\n    { property: ['sourceFile', 'source'] },\n  ]);\n\n  // Using type assertions since we are aggregating the source property whose type will always return string\n  return {\n    data: mapAggregatesToFilters(data) as SourceDataType[],\n    ...rest,\n  };\n};\n"],"mappings":";AAAA,SACEA,sBAAsB,EACtBC,0BAA0B,QACrB,eAAe;AAItB,OAAO,MAAMC,+BAA+B,GAAG,MAAM;EAAA;EACnD,MAAM;IAAEC,IAAI;IAAE,GAAGC;EAAK,CAAC,GAAGH,0BAA0B,CAAC,CACnD;IAAEI,QAAQ,EAAE,CAAC,YAAY,EAAE,QAAQ;EAAE,CAAC,CACvC,CAAC;;EAEF;EACA,OAAO;IACLF,IAAI,EAAEH,sBAAsB,CAACG,IAAI,CAAqB;IACtD,GAAGC;EACL,CAAC;AACH,CAAC;AAAC,GAVWF,+BAA+B;EAAA,QAChBD,0BAA0B;AAAA"},"metadata":{},"sourceType":"module"}