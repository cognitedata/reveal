{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport { isNumeric, METADATA_ALL_VALUE } from '@data-exploration-lib/core';\nimport { AdvancedFilterBuilder } from '../../../builders';\nimport { getSearchConfig } from '../../../utils';\nexport const mapFiltersToDocumentSearchFilters = ({\n  dataSetIds,\n  externalIdPrefix,\n  source,\n  author,\n  type,\n  createdTime,\n  lastUpdatedTime,\n  assetSubtreeIds,\n  internalId,\n  metadata,\n  labels\n}, query, searchConfig = getSearchConfig().file) => {\n  const builder = new AdvancedFilterBuilder();\n  const filterBuilder = new AdvancedFilterBuilder().in('sourceFile|datasetId', () => {\n    return dataSetIds?.reduce((acc, {\n      value\n    }) => {\n      if (typeof value === 'number') {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).containsAny('labels', () => {\n    return labels?.reduce((acc, {\n      value\n    }) => {\n      return [...acc, {\n        externalId: value\n      }];\n    }, []);\n  }).in('author', author).in('sourceFile|source', source).in('type', type).equals('id', internalId).inAssetSubtree('assetIds', () => {\n    return assetSubtreeIds?.reduce((acc, {\n      value\n    }) => {\n      if (typeof value === 'number') {\n        return [...acc, value];\n      }\n      return acc;\n    }, []);\n  }).prefix('externalId', externalIdPrefix).range('createdTime', {\n    lte: createdTime?.max,\n    gte: createdTime?.min\n  }).range('modifiedTime', {\n    lte: lastUpdatedTime?.max,\n    gte: lastUpdatedTime?.min\n  });\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder();\n    for (const {\n      key,\n      value\n    } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`sourceFile|metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`sourceFile|metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n  builder.and(filterBuilder);\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder();\n    if (searchConfig['sourceFile|name']?.enabled) {\n      /* eslint-disable @typescript-eslint/ban-ts-comment */\n      // @ts-ignore the builder types will be refactored in future the \"ts-ignore\" is harmless in this case\n      searchQueryBuilder.equals('sourceFile|name', query);\n\n      /* eslint-disable @typescript-eslint/ban-ts-comment */\n      // @ts-ignore the builder types will be refactored in future the \"ts-ignore\" is harmless in this case\n      searchQueryBuilder.prefix('sourceFile|name', query);\n      if (searchConfig['sourceFile|name']?.enabledFuzzySearch) {\n        /* eslint-disable @typescript-eslint/ban-ts-comment */\n        // @ts-ignore the builder types will be refactored in future the \"ts-ignore\" is harmless in this case\n        searchQueryBuilder.search('sourceFile|name', query);\n      }\n    }\n    if (searchConfig.content.enabled) {\n      if (searchConfig.content.enabledFuzzySearch) {\n        // @ts-ignore\n        searchQueryBuilder.search('content', query);\n      }\n    }\n    if (searchConfig['sourceFile|metadata'].enabled) {\n      // @ts-ignore\n      searchQueryBuilder.equals('sourceFile|metadata', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('sourceFile|metadata', query);\n    }\n    if (isNumeric(query) && searchConfig.id.enabled) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals('externalId', query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n    if (searchConfig['sourceFile|source'].enabled) {\n      // @ts-ignore\n      searchQueryBuilder.equals('sourceFile|source', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('sourceFile|source', query);\n    }\n    if (searchConfig.labels.enabled) {\n      // @ts-ignore\n      searchQueryBuilder.containsAny('labels', [{\n        externalId: query\n      }]);\n    }\n    builder.or(searchQueryBuilder);\n  }\n  return new AdvancedFilterBuilder().and(builder).build();\n};","map":{"version":3,"names":["isEmpty","isNumeric","METADATA_ALL_VALUE","AdvancedFilterBuilder","getSearchConfig","mapFiltersToDocumentSearchFilters","dataSetIds","externalIdPrefix","source","author","type","createdTime","lastUpdatedTime","assetSubtreeIds","internalId","metadata","labels","query","searchConfig","file","builder","filterBuilder","in","reduce","acc","value","containsAny","externalId","equals","inAssetSubtree","prefix","range","lte","max","gte","min","metadataBuilder","key","exists","or","and","searchQueryBuilder","enabled","enabledFuzzySearch","search","content","id","Number","build"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/documents/internal/transformers/mapFiltersToDocumentSearchFilters.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\n\nimport {\n  FileConfigType,\n  InternalDocumentFilter,\n  isNumeric,\n  METADATA_ALL_VALUE,\n} from '@data-exploration-lib/core';\n\nimport { AdvancedFilterBuilder, AdvancedFilter } from '../../../builders';\nimport { getSearchConfig } from '../../../utils';\n\nexport type DocumentProperties = {\n  'sourceFile|datasetId': number[];\n  'sourceFile|assetIds': number[];\n  author: string[];\n  'sourceFile|source': string[];\n  type: string[];\n  externalId: string;\n  id: number;\n  metadata: string;\n  assetIds: number[];\n  labels: { externalId: string }[];\n  [key: `sourceFile|metadata|${string}`]: string;\n};\n\nexport const mapFiltersToDocumentSearchFilters = (\n  {\n    dataSetIds,\n    externalIdPrefix,\n    source,\n    author,\n    type,\n    createdTime,\n    lastUpdatedTime,\n    assetSubtreeIds,\n    internalId,\n    metadata,\n    labels,\n  }: InternalDocumentFilter,\n  query?: string,\n  searchConfig: FileConfigType = getSearchConfig().file\n): AdvancedFilter<DocumentProperties> | undefined => {\n  const builder = new AdvancedFilterBuilder<DocumentProperties>();\n\n  const filterBuilder = new AdvancedFilterBuilder<DocumentProperties>()\n    .in('sourceFile|datasetId', () => {\n      return dataSetIds?.reduce((acc, { value }) => {\n        if (typeof value === 'number') {\n          return [...acc, value];\n        }\n        return acc;\n      }, [] as number[]);\n    })\n    .containsAny('labels', () => {\n      return labels?.reduce((acc, { value }) => {\n        return [...acc, { externalId: value }];\n      }, [] as { externalId: string }[]);\n    })\n    .in('author', author)\n    .in('sourceFile|source', source)\n    .in('type', type)\n    .equals('id', internalId)\n    .inAssetSubtree('assetIds', () => {\n      return assetSubtreeIds?.reduce((acc, { value }) => {\n        if (typeof value === 'number') {\n          return [...acc, value];\n        }\n        return acc;\n      }, [] as number[]);\n    })\n    .prefix('externalId', externalIdPrefix)\n    .range('createdTime', {\n      lte: createdTime?.max as number,\n      gte: createdTime?.min as number,\n    })\n    .range('modifiedTime', {\n      lte: lastUpdatedTime?.max as number,\n      gte: lastUpdatedTime?.min as number,\n    });\n\n  if (metadata) {\n    const metadataBuilder = new AdvancedFilterBuilder<DocumentProperties>();\n    for (const { key, value } of metadata) {\n      if (value === METADATA_ALL_VALUE) {\n        metadataBuilder.exists(`sourceFile|metadata|${key}`);\n      } else {\n        metadataBuilder.equals(`sourceFile|metadata|${key}`, value);\n      }\n    }\n    filterBuilder.or(metadataBuilder);\n  }\n\n  builder.and(filterBuilder);\n\n  if (query && !isEmpty(query)) {\n    const searchQueryBuilder = new AdvancedFilterBuilder<DocumentProperties>();\n\n    if (searchConfig['sourceFile|name']?.enabled) {\n      /* eslint-disable @typescript-eslint/ban-ts-comment */\n      // @ts-ignore the builder types will be refactored in future the \"ts-ignore\" is harmless in this case\n      searchQueryBuilder.equals('sourceFile|name', query);\n\n      /* eslint-disable @typescript-eslint/ban-ts-comment */\n      // @ts-ignore the builder types will be refactored in future the \"ts-ignore\" is harmless in this case\n      searchQueryBuilder.prefix('sourceFile|name', query);\n\n      if (searchConfig['sourceFile|name']?.enabledFuzzySearch) {\n        /* eslint-disable @typescript-eslint/ban-ts-comment */\n        // @ts-ignore the builder types will be refactored in future the \"ts-ignore\" is harmless in this case\n        searchQueryBuilder.search('sourceFile|name', query);\n      }\n    }\n\n    if (searchConfig.content.enabled) {\n      if (searchConfig.content.enabledFuzzySearch) {\n        // @ts-ignore\n        searchQueryBuilder.search('content', query);\n      }\n    }\n\n    if (searchConfig['sourceFile|metadata'].enabled) {\n      // @ts-ignore\n      searchQueryBuilder.equals('sourceFile|metadata', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('sourceFile|metadata', query);\n    }\n\n    if (isNumeric(query) && searchConfig.id.enabled) {\n      searchQueryBuilder.equals('id', Number(query));\n    }\n\n    if (searchConfig.externalId.enabled) {\n      searchQueryBuilder.equals('externalId', query);\n      searchQueryBuilder.prefix('externalId', query);\n    }\n\n    if (searchConfig['sourceFile|source'].enabled) {\n      // @ts-ignore\n      searchQueryBuilder.equals('sourceFile|source', query);\n      // @ts-ignore\n      searchQueryBuilder.prefix('sourceFile|source', query);\n    }\n\n    if (searchConfig.labels.enabled) {\n      // @ts-ignore\n      searchQueryBuilder.containsAny('labels', [{ externalId: query }]);\n    }\n\n    builder.or(searchQueryBuilder);\n  }\n\n  return new AdvancedFilterBuilder<DocumentProperties>().and(builder).build();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}