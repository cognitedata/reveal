/**
 * Generated by @openapi-codegen
 *
 * @version v1 alpha
 */
/**
 * Cognite API error.
 */
export type Error = {
  /**
   * HTTP status code.
   *
   * @format int32
   * @example 401
   */
  code: number;
  /**
   * Error message.
   *
   * @example Could not authenticate.
   */
  message: string;
};

/**
 * The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.
 *
 * @minimum 0
 * @format int64
 */
export type EpochTimestamp = number;

/**
 * Cursor for paging through results.
 */
export type Cursor = {
  /**
   * @example 4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo
   */
  cursor?: string;
};

/**
 * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
 * @minLength 1
 * @maxLength 255
 */
export type DataModelId = string;

/**
 * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
 * @minLength 1
 * @maxLength 255
 */
export type DataModelSpace = string;

/**
 * @pattern ^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,41}[a-zA-Z0-9])?$
 * @minLength 1
 * @maxLength 43
 */
export type DataModelVersion = string;

/**
 * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
 * @minLength 1
 * @maxLength 255
 */
export type DataSourceId = string;

export type DataSourceDraft = {
  /**
   * Id of the data model that the data source belongs to
   *
   * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 255
   */
  dataModelId: DataModelId;
  /**
   * The data model space that the data source belongs to
   *
   * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 255
   */
  dataModelSpaceId: DataModelSpace;
  /**
   * The data model version that the data source belongs to
   *
   * @pattern ^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,41}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 43
   */
  dataModelVersion: DataModelVersion;
  /**
   * External-id of the data source
   *
   * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 255
   */
  externalId: DataSourceId;
};

export type DataSourceDTO = {
  createdTime: EpochTimestamp;
  /**
   * Id of the data model that the data source belongs to
   *
   * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 255
   */
  dataModelId: DataModelId;
  /**
   * The data model space that the data source belongs to
   *
   * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 255
   */
  dataModelSpaceId: DataModelSpace;
  /**
   * The data model version that the data source belongs to
   *
   * @pattern ^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,41}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 43
   */
  dataModelVersion: DataModelVersion;
  /**
   * External-id of the data source
   *
   * @pattern ^[a-zA-Z]([a-zA-Z0-9_]{0,253}[a-zA-Z0-9])?$
   * @minLength 1
   * @maxLength 255
   */
  externalId: DataSourceId;
  lastUpdatedTime: EpochTimestamp;
};

/**
 * List of data sources to create/update
 *
 * @minItems 1
 * @maxItems 100
 */
export type DataSourceCreateRequest = {
  /**
   * @minItems 1
   * @maxItems 100
   */
  items: DataSourceDraft[];
};

export type ListOfDataSourceIdsRequest = {
  /**
   * @minItems 1
   * @maxItems 100
   */
  items: {
    /**
     * Ids for the data sources
     */
    externalId: string;
  }[];
};

export type UpsertConflict = {
  /**
   * Details about the error caused by the upsert/update.
   */
  error: {
    /**
     * The HTTP status code returned
     *
     * @format int32
     * @example 409
     */
    code: number;
    /**
     * The error message returned from the service.
     */
    message: string;
  };
};

/**
 * The cursor value used to return (paginate to) the next page of results, when more data is available.
 */
export type NextCursorV3 = string;
