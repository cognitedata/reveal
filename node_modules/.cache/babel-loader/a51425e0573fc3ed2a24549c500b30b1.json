{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport isArray from 'lodash/isArray';\nimport { createEventListener } from '../utils/createEventListener';\nexport const useAxisDirection = axisDirectionConfig => {\n  _s();\n  const [direction, setDirection] = useState();\n  useEffect(() => {\n    if (axisDirectionConfig === false) {\n      setDirection(undefined);\n      return;\n    }\n    if (!isArray(axisDirectionConfig)) {\n      setDirection(axisDirectionConfig);\n      return;\n    }\n    window.focus();\n    const defaultAxisDirectionConfig = axisDirectionConfig.find(({\n      trigger\n    }) => trigger === 'default');\n    if (defaultAxisDirectionConfig) {\n      setDirection(defaultAxisDirectionConfig.direction);\n    }\n    const unsubscribeListeners = axisDirectionConfig.map(({\n      trigger,\n      direction\n    }) => {\n      const type = trigger === 'default' ? 'keyup' : 'keydown';\n      return createEventListener(window, type, () => {\n        setDirection(direction);\n      });\n    });\n    return () => {\n      unsubscribeListeners.forEach(unsubscribeListener => {\n        unsubscribeListener();\n      });\n    };\n  }, [axisDirectionConfig]);\n  return direction;\n};\n_s(useAxisDirection, \"F59euJtQmd9bYKp09+kDrcLjkzc=\");","map":{"version":3,"names":["useEffect","useState","isArray","createEventListener","useAxisDirection","axisDirectionConfig","direction","setDirection","undefined","window","focus","defaultAxisDirectionConfig","find","trigger","unsubscribeListeners","map","type","forEach","unsubscribeListener"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/LineChart/hooks/useAxisDirection.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport isArray from 'lodash/isArray';\n\nimport { AxisDirection, AxisDirectionConfig } from '../types';\nimport { createEventListener } from '../utils/createEventListener';\n\nexport const useAxisDirection = (axisDirectionConfig: AxisDirectionConfig) => {\n  const [direction, setDirection] = useState<AxisDirection>();\n\n  useEffect(() => {\n    if (axisDirectionConfig === false) {\n      setDirection(undefined);\n      return;\n    }\n\n    if (!isArray(axisDirectionConfig)) {\n      setDirection(axisDirectionConfig);\n      return;\n    }\n\n    window.focus();\n\n    const defaultAxisDirectionConfig = axisDirectionConfig.find(\n      ({ trigger }) => trigger === 'default'\n    );\n    if (defaultAxisDirectionConfig) {\n      setDirection(defaultAxisDirectionConfig.direction);\n    }\n\n    const unsubscribeListeners = axisDirectionConfig.map(\n      ({ trigger, direction }) => {\n        const type = trigger === 'default' ? 'keyup' : 'keydown';\n\n        return createEventListener(window, type, () => {\n          setDirection(direction);\n        });\n      }\n    );\n\n    return () => {\n      unsubscribeListeners.forEach((unsubscribeListener) => {\n        unsubscribeListener();\n      });\n    };\n  }, [axisDirectionConfig]);\n\n  return direction;\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,OAAO,MAAM,gBAAgB;AAGpC,SAASC,mBAAmB,QAAQ,8BAA8B;AAElE,OAAO,MAAMC,gBAAgB,GAAIC,mBAAwC,IAAK;EAAA;EAC5E,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,EAAiB;EAE3DD,SAAS,CAAC,MAAM;IACd,IAAIK,mBAAmB,KAAK,KAAK,EAAE;MACjCE,YAAY,CAACC,SAAS,CAAC;MACvB;IACF;IAEA,IAAI,CAACN,OAAO,CAACG,mBAAmB,CAAC,EAAE;MACjCE,YAAY,CAACF,mBAAmB,CAAC;MACjC;IACF;IAEAI,MAAM,CAACC,KAAK,EAAE;IAEd,MAAMC,0BAA0B,GAAGN,mBAAmB,CAACO,IAAI,CACzD,CAAC;MAAEC;IAAQ,CAAC,KAAKA,OAAO,KAAK,SAAS,CACvC;IACD,IAAIF,0BAA0B,EAAE;MAC9BJ,YAAY,CAACI,0BAA0B,CAACL,SAAS,CAAC;IACpD;IAEA,MAAMQ,oBAAoB,GAAGT,mBAAmB,CAACU,GAAG,CAClD,CAAC;MAAEF,OAAO;MAAEP;IAAU,CAAC,KAAK;MAC1B,MAAMU,IAAI,GAAGH,OAAO,KAAK,SAAS,GAAG,OAAO,GAAG,SAAS;MAExD,OAAOV,mBAAmB,CAACM,MAAM,EAAEO,IAAI,EAAE,MAAM;QAC7CT,YAAY,CAACD,SAAS,CAAC;MACzB,CAAC,CAAC;IACJ,CAAC,CACF;IAED,OAAO,MAAM;MACXQ,oBAAoB,CAACG,OAAO,CAAEC,mBAAmB,IAAK;QACpDA,mBAAmB,EAAE;MACvB,CAAC,CAAC;IACJ,CAAC;EACH,CAAC,EAAE,CAACb,mBAAmB,CAAC,CAAC;EAEzB,OAAOC,SAAS;AAClB,CAAC;AAAC,GAzCWF,gBAAgB"},"metadata":{},"sourceType":"module"}