load("@npm//rollup:index.bzl", "rollup")
load("@npm//jest:index.bzl", "jest")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@build_bazel_rules_nodejs//:index.bzl", "copy_to_bin", "js_library", "pkg_npm")
load("//rules/test:jest.bzl", "jest_test")
load("//rules/lint:index.bzl", "eslint_config", "eslint_test", "prettier_test")
load("//rules/package_json_helpers:generate.bzl", "generate_package_json_helpers")
load("//rules/package_json_helpers:module_mappings.bzl", "module_mappings")
load("//rules/npm:is_published.bzl", "is_published")
load("//rules/npm:package_info.bzl", "package_info")
load("//rules/npm:append_deps.bzl", "append_deps")

_TESTS = [
    "src/**/*.test.js*",
    "src/**/*.test.ts*",
    "src/**/*.spec.js*",
    "src/**/*.spec.ts*",
]

_STORYBOOK = [
    ".storybook/*",
    "src/**/*.stories.ts*",
    "stories/**/*.stories.ts*",
]

SOURCES = glob(
    [
        "src/*.ts*",
        "src/**/*.ts*",
    ],
    exclude = _TESTS + _STORYBOOK,
)

TESTS = glob(_TESTS + _STORYBOOK)

# STORYBOOK = glob(_STORYBOOK)

# Generates the below helpers.
#
# Usage:
#   bazel run :generate_package_json_helpers
generate_package_json_helpers(
    name = "generate_package_json_helpers",
    local_package_json = ":package.json",
    out_dir = "dist",
    package_json = "//:package.json",
    src_dir = "src",
    workspace = "@npm",
)

### start of auto-generated helpers ###

# Dependencies from package.json
DEPENDENCIES = [
    "@npm//@cognite/cogs.js",
    "@npm//react",
    "@npm//react-query",
    "@npm//msw",
    "//packages/react-container",
]

# Type dependencies from package.json
TYPE_DEPENDENCIES = [
    "@npm//@types/react",
    "@npm//@cognite/comment-service-types",
]

# Dev dependencies from package.json
DEV_DEPENDENCIES = [
    "@npm//@testing-library/jest-dom",
    "@npm//@testing-library/react",
    "@npm//@testing-library/react-hooks",
]

# Mappings for absolute imports from baseUrl @unused
mappings_dict = {
    "index.spec": "dist/index.spec",
    "index": "dist/index",
}

### end of auto-generated helpers ###

eslint_config(
    name = "eslint_config",
    src = ":.eslintrc.js",
    deps = [
        "//:eslint_config",
        "//packages:eslint_config",
    ],
)

eslint_test(
    name = "eslint_test",
    data = SOURCES + TESTS + [
        ":tsconfig.json",
        "//:tsconfig.json",
        "//packages:tsconfig.json",
    ],
    eslint_config = ":eslint_config",
)

prettier_test(
    name = "prettier_test",
    data = SOURCES + TESTS,
    prettier_config = "//:prettier_config",
)

jest_test(
    name = "jest_test",
    srcs = SOURCES + TESTS + [
        ":tsconfig.json",
        "//:tsconfig.json",
        "//packages:jest.config.js",
        "//packages:jest.react.config.js",
        "//packages:tsconfig.json",
    ],
    jest_args = [],
    jest_config = "jest.config.js",
    service_name = "react-comments",
    deps = DEPENDENCIES + DEV_DEPENDENCIES + TYPE_DEPENDENCIES,
)

# For ibazel run to properly pick the changes we need to run from the Workspace directory
write_file(
    name = "write_chdir_worspace_script",
    out = "chdir-workspace.js",
    content = ["process.chdir(require('path').join(process.env.BUILD_WORKSPACE_DIRECTORY, '" + package_name() + "'));"],
)

jest(
    name = "jest",
    args = [
        "--node_options=--require=./$(rootpath chdir-workspace.js)",
        "--config",
        "jest.config.js",
        "--runInBand",
        "--watchAll",
    ],
    data = [
        "chdir-workspace.js",
        "jest.config.js",
        "tsconfig.json",
        "//:tsconfig.json",
        "//packages:jest.config.js",
        "//packages:tsconfig.json",
    ],
    tags = [
        # This tag instructs ibazel to pipe into stdin a event describing actions.
        # ibazel send EOF to stdin by default and `react-scripts start` will stop when getting EOF in stdin.
        # So use this to prevent EOF.
        "ibazel_notify_changes",
    ],
)

write_file(
    name = "write_chdir_script",
    out = "chdir.js",
    content = ["process.chdir(__dirname)"],
)

copy_to_bin(
    name = "copy_static_files",
    srcs = SOURCES + [
        ":rollup.config.js",
        ":tsconfig.json",
    ],
)

rollup(
    name = "dist",
    args = [
        "--node_options=--require=./$(execpath chdir.js)",
        "-c",
        "rollup.config.js",
    ],
    data = DEPENDENCIES + TYPE_DEPENDENCIES + [
        ":chdir.js",
        ":copy_static_files",
        ":package-json",
        "//packages:tsconfig",
        "//:tsconfig",
        "@npm//@types/jest",
        "@npm//@types/node",
        "@npm//tslib",
        "@npm//rollup-plugin-json",
        "@npm//rollup-plugin-typescript2",
    ],
    output_dir = True,
)

_mappings = module_mappings(
    name = "mappings",
    mappings = mappings_dict,
)

js_library(
    name = "react-comments",
    package_name = "@cognite/react-comments",
    srcs = ["package-json"],
    visibility = ["//visibility:public"],
    deps = DEPENDENCIES + ["dist"],
)

append_deps(
    name = "package-json",
    dependencies = DEPENDENCIES,
    dev_dependencies = DEV_DEPENDENCIES + TYPE_DEPENDENCIES,
    package = "package.json",
)

pkg_npm(
    name = "npm-package",
    package_name = "@cognite/react-comments",
    visibility = ["//visibility:public"],
    deps = [
        "dist",
        "package-json",
    ] + _mappings,
)

is_published(
    name = "is_published",
    package = ":npm-package",
)

package_info(
    name = "package_info",
    display_name = "react-comments",
    package = ":npm-package",
)
