import { Arguments, Argv } from 'yargs';
import { CogniteClient } from '@cognite/sdk-v6';
import { LoginArgs } from '../types';
import { CONFIG_KEY, LOGIN_STATUS } from '../constants';
import { setProjectConfig, setProjectConfigItem } from '../utils/config';
import { getAuthToken } from '../utils/auth';

export const command = 'login';
export const desc = 'Login to CDF for using Platypus';
export const builder = (yargs: Argv<LoginArgs>) =>
  yargs
    .usage('$0 login [project]')
    .example('platypus login cognite', 'Login to cognite tenant')
    .positional('project', {
      alias: 'p',
      type: 'string',
      description: 'CDF Project Name',
      default: 'platypus',
    })
    .option('client-id', {
      type: 'string',
      default: '4770c0f1-7bb6-43b5-8c37-94f2a9306757', //todo: read from app config
      description: "AAD Application's Client ID",
    })
    .option('client-secret', {
      type: 'string',
      demandOption: true,
      description:
        "AAD Application's Client Secret generated by the user they have long expiry and are hence suitable for CI/CD",
    })
    .check(validateClientSecret)
    .option('tenant', {
      type: 'string',
      default: 'cogniteappdev.onmicrosoft.com',
      description: 'Azure Active Directory Tenant URI or ID',
    })
    .option('cluster', {
      type: 'string',
      default: 'greenfield',
      description: 'Cluster Name',
    })
    .check(validateClusterName)
    .option('auth-type', {
      type: 'string',
      default: 'clientSecret',
      description: 'Auth type',
    })
    .choices('auth-type', ['clientSecret']);

export const handler = async (arg: Arguments<LoginArgs>) => {
  const { cluster, project, appId, authType, clientId, clientSecret, tenant } =
    arg;
  const baseUrl = `https://${cluster}.cognitedata.com`;

  try {
    const client = new CogniteClient({
      appId,
      project,
      baseUrl,
      getToken: getAuthToken({
        authType,
        project,
        cluster,
        tenant,
        clientId,
        clientSecret,
        loginStatus: LOGIN_STATUS.UNAUTHENTICATED,
        authToken: undefined,
      }),
    });
    const token = await client.authenticate();
    if (token) {
      await client.assets.list();

      setProjectConfig(arg, token);

      return console.log('Login Success!');
    }

    throw new Error(
      'Received empty token, please try to login again with proper configs'
    );
  } catch (error) {
    console.log('Error while trying to authenticate');
    setProjectConfigItem(CONFIG_KEY.LOGIN_STATUS, LOGIN_STATUS.UNAUTHENTICATED);
  }
};

export const validateClusterName = ({
  cluster,
}: {
  cluster: string;
}): boolean | string => {
  if (!/^[a-zA-Z0-9-_]+$/.test(cluster)) {
    return 'Cluster name is invalid, make sure its just the name of the cluster; For example if its "api.cognitedata.com" just enter "api"';
  }
  return true;
};

export const validateClientSecret = ({
  clientSecret,
}: {
  clientSecret: string;
}): boolean | string => {
  if (!clientSecret || clientSecret === '') {
    return "client-secret can't be empty string";
  }
  return true;
};
