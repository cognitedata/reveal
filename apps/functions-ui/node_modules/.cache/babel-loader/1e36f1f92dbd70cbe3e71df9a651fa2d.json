{"ast":null,"code":"/**\n * Calculates the `granularity` for a timeseries request\n *\n * @param domain Domain [utc int, utc int]\n * @param pps points to show\n */\n\nexport const calculateGranularity = (domain, pointsPerSeries) => {\n  if (!domain) {\n    return '100d';\n  }\n  const domainMinValue = domain[0].valueOf();\n  const domainMaxValue = domain[1].valueOf();\n  const timeDifferenceSeconds = (domainMaxValue - domainMinValue) / 1000;\n  const targetGranularitySeconds = Math.ceil(timeDifferenceSeconds / pointsPerSeries);\n  const targetGranularityMinutes = Math.ceil(targetGranularitySeconds / 60);\n  const targetGranularityHours = Math.ceil(targetGranularityMinutes / 60);\n  const targetGranularityDays = Math.ceil(targetGranularityHours / 24);\n\n  // Seconds\n  if (targetGranularitySeconds <= 60) {\n    return `${targetGranularitySeconds}s`;\n  }\n\n  // Minutes\n  if (targetGranularityMinutes <= 60) {\n    return `${targetGranularityMinutes}m`;\n  }\n\n  // Hours\n  if (targetGranularityHours <= 24) {\n    return `${targetGranularityHours}h`;\n  }\n\n  // Days\n  if (targetGranularityDays <= 100) {\n    return `${targetGranularityDays}d`;\n  }\n  return '100d';\n};","map":{"version":3,"names":["calculateGranularity","domain","pointsPerSeries","domainMinValue","valueOf","domainMaxValue","timeDifferenceSeconds","targetGranularitySeconds","Math","ceil","targetGranularityMinutes","targetGranularityHours","targetGranularityDays"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/TimeseriesChart/domain/internal/utils/calculateGranularity.ts"],"sourcesContent":["/**\n * Calculates the `granularity` for a timeseries request\n *\n * @param domain Domain [utc int, utc int]\n * @param pps points to show\n */\n\nimport { DateRange } from '../../../types';\n\nexport const calculateGranularity = (\n  domain: DateRange | undefined,\n  pointsPerSeries: number\n) => {\n  if (!domain) {\n    return '100d';\n  }\n\n  const domainMinValue = domain[0].valueOf();\n  const domainMaxValue = domain[1].valueOf();\n\n  const timeDifferenceSeconds = (domainMaxValue - domainMinValue) / 1000;\n  const targetGranularitySeconds = Math.ceil(\n    timeDifferenceSeconds / pointsPerSeries\n  );\n  const targetGranularityMinutes = Math.ceil(targetGranularitySeconds / 60);\n  const targetGranularityHours = Math.ceil(targetGranularityMinutes / 60);\n  const targetGranularityDays = Math.ceil(targetGranularityHours / 24);\n\n  // Seconds\n  if (targetGranularitySeconds <= 60) {\n    return `${targetGranularitySeconds}s`;\n  }\n\n  // Minutes\n  if (targetGranularityMinutes <= 60) {\n    return `${targetGranularityMinutes}m`;\n  }\n\n  // Hours\n  if (targetGranularityHours <= 24) {\n    return `${targetGranularityHours}h`;\n  }\n\n  // Days\n  if (targetGranularityDays <= 100) {\n    return `${targetGranularityDays}d`;\n  }\n\n  return '100d';\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,MAAMA,oBAAoB,GAAG,CAClCC,MAA6B,EAC7BC,eAAuB,KACpB;EACH,IAAI,CAACD,MAAM,EAAE;IACX,OAAO,MAAM;EACf;EAEA,MAAME,cAAc,GAAGF,MAAM,CAAC,CAAC,CAAC,CAACG,OAAO,EAAE;EAC1C,MAAMC,cAAc,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAACG,OAAO,EAAE;EAE1C,MAAME,qBAAqB,GAAG,CAACD,cAAc,GAAGF,cAAc,IAAI,IAAI;EACtE,MAAMI,wBAAwB,GAAGC,IAAI,CAACC,IAAI,CACxCH,qBAAqB,GAAGJ,eAAe,CACxC;EACD,MAAMQ,wBAAwB,GAAGF,IAAI,CAACC,IAAI,CAACF,wBAAwB,GAAG,EAAE,CAAC;EACzE,MAAMI,sBAAsB,GAAGH,IAAI,CAACC,IAAI,CAACC,wBAAwB,GAAG,EAAE,CAAC;EACvE,MAAME,qBAAqB,GAAGJ,IAAI,CAACC,IAAI,CAACE,sBAAsB,GAAG,EAAE,CAAC;;EAEpE;EACA,IAAIJ,wBAAwB,IAAI,EAAE,EAAE;IAClC,OAAQ,GAAEA,wBAAyB,GAAE;EACvC;;EAEA;EACA,IAAIG,wBAAwB,IAAI,EAAE,EAAE;IAClC,OAAQ,GAAEA,wBAAyB,GAAE;EACvC;;EAEA;EACA,IAAIC,sBAAsB,IAAI,EAAE,EAAE;IAChC,OAAQ,GAAEA,sBAAuB,GAAE;EACrC;;EAEA;EACA,IAAIC,qBAAqB,IAAI,GAAG,EAAE;IAChC,OAAQ,GAAEA,qBAAsB,GAAE;EACpC;EAEA,OAAO,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module"}