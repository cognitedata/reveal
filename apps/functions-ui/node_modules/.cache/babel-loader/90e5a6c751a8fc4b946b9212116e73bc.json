{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nimport { isObjectEmpty } from '@data-exploration-lib/core';\nexport class AdvancedFilterBuilder {\n  constructor() {\n    this.filters = [];\n  }\n  value() {\n    return this.filters;\n  }\n  getProperty(key) {\n    if (typeof key === 'string' || key instanceof String) {\n      return key.split('|');\n    }\n    throw new Error('Key is not a string');\n  }\n  getValue(input) {\n    if (input instanceof Function) {\n      return input();\n    }\n    return input;\n  }\n  getValidity(validate) {\n    if (validate instanceof Function) {\n      return validate();\n    }\n    return Boolean(validate);\n  }\n  build() {\n    const filterValue = this.filters[0];\n    if (isObjectEmpty(filterValue)) {\n      return undefined;\n    }\n    return filterValue;\n  }\n  and(builder) {\n    const build = builder.value();\n    if (!isEmpty(build)) {\n      this.filters = [...this.filters, {\n        and: builder.value()\n      }];\n    }\n    return this;\n  }\n  or(builder) {\n    const build = builder.value();\n    if (!isEmpty(build)) {\n      this.filters = [...this.filters, {\n        or: builder.value()\n      }];\n    }\n    return this;\n  }\n  not(builder) {\n    const build = builder.build();\n    if (build !== undefined) {\n      this.filters = [...this.filters, {\n        not: build\n      }];\n    }\n    return this;\n  }\n\n  /**\n   * Matches items that contain the exact value in the provided property.\n   * @example {\"property\":[\"type\"],\"value\":\"PDF\"}\n   */\n  equals(key, input) {\n    const value = this.getValue(input);\n    if (value !== undefined) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        equals: {\n          property,\n          value\n        }\n      }];\n    }\n    return this;\n  }\n  /**\n   * Matches items that contain a specific prefix in the provided property.\n   * @example {\"property\":[\"name\"],\"value\":\"Report\"}\n   */\n  prefix(key, input) {\n    const value = this.getValue(input);\n    if (value !== undefined) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        prefix: {\n          property,\n          value\n        }\n      }];\n    }\n    return this;\n  }\n  /**\n   * Matches items where the property matches one of the given values\n   * @example {\"property\":[\"author\"],\"values\":[\"Etiam Eget\",\"Praesent Vestibulum\"]}\n   */\n  in(key, input) {\n    const values = this.getValue(input);\n    if (values !== undefined && !isEmpty(values)) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        in: {\n          property,\n          values\n        }\n      }];\n    }\n    return this;\n  }\n  inAssetSubtree(key, input) {\n    const values = this.getValue(input);\n    if (values !== undefined) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        inAssetSubtree: {\n          property,\n          values\n        }\n      }];\n    }\n    return this;\n  }\n  /**\n   * Matches items where the property contains one or more of the given values\n   * @example {\"property\":[\"assetIds\"],\"values\":[51276,94287]}\n   */\n  containsAny(key, input) {\n    const values = this.getValue(input);\n    if (values !== undefined && !isEmpty(values)) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        containsAny: {\n          property,\n          values\n        }\n      }];\n    }\n    return this;\n  }\n  /**\n   * Matches items where the property contains all the given values\n   * @example {\"property\":[\"assetIds\"],\"values\":[51276,94287]}\n   */\n  containsAll(key, input) {\n    const values = this.getValue(input);\n    if (values !== undefined && !isEmpty(values)) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        containsAll: {\n          property,\n          values\n        }\n      }];\n    }\n    return this;\n  }\n  search(key, value) {\n    if (value !== undefined) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        search: {\n          property,\n          value\n        }\n      }];\n    }\n    return this;\n  }\n  /**\n   * Matches items that contain a value for the provided property.\n   * @example {\"property\":[\"language\"]}\n   */\n  exists(key, validate = true) {\n    const valid = this.getValidity(validate);\n    if (valid) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        exists: {\n          property\n        }\n      }];\n    }\n    return this;\n  }\n  /**\n   * Matches items that does not contain a value for the provided property.\n   * @example {\"property\":[\"language\"]}\n   */\n  notExists(key, validate = true) {\n    const valid = this.getValidity(validate);\n    if (valid) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        not: {\n          exists: {\n            property\n          }\n        }\n      }];\n    }\n    return this;\n  }\n  /**\n   * Matches items that contain terms within the provided range.\n   * Range must include both an upper and a lower bound. It is not allowed to specify both inclusive and exclusive\n   * bounds (like `gte`, `gt`) together.\n   * `gte`: Greater than or equal to.\n   * `gt`: Greater than.\n   * `lte`: Less than or equal to.\n   * `lt`: Less than.\n   *\n   * @example {\"property\":[\"createdTime\"],\"gte\":1609459200000,\"lt\":1640995200000}\n   */\n  range(key, values) {\n    if (!isObjectEmpty(values)) {\n      const property = this.getProperty(key);\n      this.filters = [...this.filters, {\n        range: {\n          property,\n          ...values\n        }\n      }];\n    }\n    return this;\n  }\n}","map":{"version":3,"names":["isEmpty","isObjectEmpty","AdvancedFilterBuilder","filters","value","getProperty","key","String","split","Error","getValue","input","Function","getValidity","validate","Boolean","build","filterValue","undefined","and","builder","or","not","equals","property","prefix","in","values","inAssetSubtree","containsAny","containsAll","search","exists","valid","notExists","range"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/builders.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\n\nimport {\n  isObjectEmpty,\n  SearchConfigDataType,\n} from '@data-exploration-lib/core';\n\nexport type AdvancedFilter<T> = LeafFilter<T> | BoolFilter<T>;\n// export type Sort = {\n//   property: Fields[];\n//   order?: 'asc' | 'desc';\n// }[];\n\ntype Property = string[];\n\ntype LeafFilter<T> =\n  | Equals<T>\n  | In<T>\n  | Range\n  | Prefix<T>\n  | Exists\n  | ContainsAny<T>\n  | ContainsAll<T>\n  | Search\n  | InAssetSubTree<T>;\ntype BoolFilter<T> = And<T> | Or<T> | Not<T>;\n\ntype And<T> = { and: AdvancedFilter<T>[] };\ntype Or<T> = { or: AdvancedFilter<T>[] };\ntype Not<T> = { not: AdvancedFilter<T> };\ntype InAssetSubTree<T> = {\n  inAssetSubtree: { property: Property; values: T[keyof T] };\n};\n\ntype Equals<T> = {\n  equals: { property: Property; value: T[keyof T] };\n};\ntype In<T> = { in: { property: Property; values: T[keyof T] } };\ntype Range = {\n  range: {\n    [operator in Operator]?: number;\n  } & {\n    property: Property;\n  };\n};\ntype Prefix<T> = { prefix: { property: Property; value: T[keyof T] } };\ntype Exists = { exists: { property: Property } };\ntype ContainsAny<T> = {\n  containsAny: { property: Property; values: T[keyof T] };\n};\ntype ContainsAll<T> = {\n  containsAll: { property: Property; values: T[keyof T] };\n};\ntype Search = { search: { property: Property; value: string } };\n\ntype Operator = 'gte' | 'gt' | 'lte' | 'lt';\n\ntype AdvancedFilterInput<\n  T extends Record<string, unknown>,\n  K extends keyof T\n> = T[K] | (() => T[K] | undefined);\n\ntype AdvancedFilterValidate = boolean | (() => boolean);\n\nexport class AdvancedFilterBuilder<T extends Record<string, unknown>> {\n  filters = [] as AdvancedFilter<T>[];\n\n  private value() {\n    return this.filters;\n  }\n\n  private getProperty<K extends keyof T>(key: K) {\n    if (typeof key === 'string' || key instanceof String) {\n      return key.split('|');\n    }\n    throw new Error('Key is not a string');\n  }\n\n  private getValue<K extends keyof T>(input?: AdvancedFilterInput<T, K>) {\n    if (input instanceof Function) {\n      return input();\n    }\n\n    return input;\n  }\n\n  private getValidity(validate?: AdvancedFilterValidate) {\n    if (validate instanceof Function) {\n      return validate();\n    }\n\n    return Boolean(validate);\n  }\n\n  build() {\n    const filterValue = this.filters[0];\n\n    if (isObjectEmpty(filterValue)) {\n      return undefined;\n    }\n\n    return filterValue;\n  }\n\n  and(builder: AdvancedFilterBuilder<T>) {\n    const build = builder.value();\n\n    if (!isEmpty(build)) {\n      this.filters = [...this.filters, { and: builder.value() }];\n    }\n\n    return this;\n  }\n  or(builder: AdvancedFilterBuilder<T>) {\n    const build = builder.value();\n\n    if (!isEmpty(build)) {\n      this.filters = [...this.filters, { or: builder.value() }];\n    }\n\n    return this;\n  }\n  not(builder: AdvancedFilterBuilder<T>) {\n    const build = builder.build();\n\n    if (build !== undefined) {\n      this.filters = [...this.filters, { not: build }];\n    }\n\n    return this;\n  }\n\n  /**\n   * Matches items that contain the exact value in the provided property.\n   * @example {\"property\":[\"type\"],\"value\":\"PDF\"}\n   */\n  equals<K extends keyof T>(key: K, input?: AdvancedFilterInput<T, K>) {\n    const value = this.getValue(input);\n\n    if (value !== undefined) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          equals: {\n            property,\n            value,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  /**\n   * Matches items that contain a specific prefix in the provided property.\n   * @example {\"property\":[\"name\"],\"value\":\"Report\"}\n   */\n  prefix<K extends keyof T>(key: K, input?: AdvancedFilterInput<T, K>) {\n    const value = this.getValue(input);\n\n    if (value !== undefined) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          prefix: {\n            property,\n            value,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  /**\n   * Matches items where the property matches one of the given values\n   * @example {\"property\":[\"author\"],\"values\":[\"Etiam Eget\",\"Praesent Vestibulum\"]}\n   */\n  in<K extends keyof T>(key: K, input?: AdvancedFilterInput<T, K>) {\n    const values = this.getValue(input);\n\n    if (values !== undefined && !isEmpty(values)) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          in: {\n            property,\n            values,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  inAssetSubtree<K extends keyof T>(key: K, input?: AdvancedFilterInput<T, K>) {\n    const values = this.getValue(input);\n\n    if (values !== undefined) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          inAssetSubtree: {\n            property,\n            values,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  /**\n   * Matches items where the property contains one or more of the given values\n   * @example {\"property\":[\"assetIds\"],\"values\":[51276,94287]}\n   */\n  containsAny<K extends keyof T>(key: K, input?: AdvancedFilterInput<T, K>) {\n    const values = this.getValue(input);\n\n    if (values !== undefined && !isEmpty(values)) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          containsAny: {\n            property,\n            values,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  /**\n   * Matches items where the property contains all the given values\n   * @example {\"property\":[\"assetIds\"],\"values\":[51276,94287]}\n   */\n  containsAll<K extends keyof T>(key: K, input?: AdvancedFilterInput<T, K>) {\n    const values = this.getValue(input);\n\n    if (values !== undefined && !isEmpty(values)) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          containsAll: {\n            property,\n            values,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  search<K extends keyof T>(key: K, value?: string) {\n    if (value !== undefined) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          search: {\n            property,\n            value,\n          },\n        },\n      ];\n    }\n    return this;\n  }\n  /**\n   * Matches items that contain a value for the provided property.\n   * @example {\"property\":[\"language\"]}\n   */\n  exists<K extends keyof T>(key: K, validate: AdvancedFilterValidate = true) {\n    const valid = this.getValidity(validate);\n\n    if (valid) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          exists: {\n            property,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  /**\n   * Matches items that does not contain a value for the provided property.\n   * @example {\"property\":[\"language\"]}\n   */\n  notExists<K extends keyof T>(\n    key: K,\n    validate: AdvancedFilterValidate = true\n  ) {\n    const valid = this.getValidity(validate);\n\n    if (valid) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          not: {\n            exists: {\n              property,\n            },\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n  /**\n   * Matches items that contain terms within the provided range.\n   * Range must include both an upper and a lower bound. It is not allowed to specify both inclusive and exclusive\n   * bounds (like `gte`, `gt`) together.\n   * `gte`: Greater than or equal to.\n   * `gt`: Greater than.\n   * `lte`: Less than or equal to.\n   * `lt`: Less than.\n   *\n   * @example {\"property\":[\"createdTime\"],\"gte\":1609459200000,\"lt\":1640995200000}\n   */\n  range(\n    key: string,\n    values?: {\n      gte?: number;\n      gt?: number;\n      lte?: number;\n      lt?: number;\n    }\n  ) {\n    if (!isObjectEmpty(values)) {\n      const property = this.getProperty(key);\n\n      this.filters = [\n        ...this.filters,\n        {\n          range: {\n            property,\n            ...values,\n          },\n        },\n      ];\n    }\n\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}