{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport uniqWith from 'lodash/uniqWith';\nimport { useSDK } from '@cognite/sdk-provider';\nimport { queryKeys } from '../../../queryKeys';\nimport { fetchThreeDModelQuery, fetchThreeDRevisionQuery } from '../network';\nimport { useBasicMappingsByAssetIdQuery } from './useBasicMappingsByAssetIdQuery';\nexport const useDetailedMappingsByAssetIdQuery = (assetId, limit, options) => {\n  _s();\n  const sdk = useSDK();\n  const queryClient = useQueryClient();\n  const {\n    data,\n    fetchNextPage: fetchMore,\n    hasNextPage: canFetchMore,\n    isFetchingNextPage: isFetchingMore\n  } = useBasicMappingsByAssetIdQuery({\n    assetId: assetId,\n    limit: limit\n  });\n  useEffect(() => {\n    if (canFetchMore && !isFetchingMore) {\n      fetchMore();\n    }\n  }, [canFetchMore, fetchMore, isFetchingMore]);\n  return useQuery(queryKeys.listDetailedAssetMappings(assetId), async () => {\n    return Promise.all(uniqWith(data, ({\n      modelId: mId1,\n      revisionId: rId1\n    }, {\n      modelId: mId2,\n      revisionId: rId2\n    }) => mId1 === mId2 && rId1 === rId2).map(async ({\n      modelId,\n      revisionId,\n      ...otherProps\n    }) => {\n      const [model, revision] = await Promise.all([fetchThreeDModelQuery(sdk, queryClient, modelId), fetchThreeDRevisionQuery(sdk, queryClient, modelId, revisionId)]);\n      return {\n        model,\n        revision,\n        revisionId,\n        modelId,\n        ...otherProps\n      };\n    }));\n  }, {\n    ...options,\n    enabled: data.length > 0 && !canFetchMore\n  });\n};\n_s(useDetailedMappingsByAssetIdQuery, \"AaSfzb4gmRV1rqy/4GdJcDTuF3M=\", false, function () {\n  return [useSDK, useQueryClient, useBasicMappingsByAssetIdQuery, useQuery];\n});","map":{"version":3,"names":["useEffect","useQuery","useQueryClient","uniqWith","useSDK","queryKeys","fetchThreeDModelQuery","fetchThreeDRevisionQuery","useBasicMappingsByAssetIdQuery","useDetailedMappingsByAssetIdQuery","assetId","limit","options","sdk","queryClient","data","fetchNextPage","fetchMore","hasNextPage","canFetchMore","isFetchingNextPage","isFetchingMore","listDetailedAssetMappings","Promise","all","modelId","mId1","revisionId","rId1","mId2","rId2","map","otherProps","model","revision","enabled","length"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/threeD/service/queries/useDetailedMappingsByAssetIdQuery.ts"],"sourcesContent":["import { useEffect } from 'react';\n\nimport {\n  useQuery,\n  useQueryClient,\n  UseQueryOptions,\n} from '@tanstack/react-query';\nimport uniqWith from 'lodash/uniqWith';\n\nimport { CogniteError } from '@cognite/sdk/dist/src';\nimport { useSDK } from '@cognite/sdk-provider';\n\nimport { queryKeys } from '../../../queryKeys';\nimport { fetchThreeDModelQuery, fetchThreeDRevisionQuery } from '../network';\nimport { DetailedMapping } from '../types';\n\nimport { useBasicMappingsByAssetIdQuery } from './useBasicMappingsByAssetIdQuery';\n\nexport const useDetailedMappingsByAssetIdQuery = (\n  assetId: number,\n  limit?: number | undefined,\n  options?: UseQueryOptions<DetailedMapping[], CogniteError, DetailedMapping[]>\n) => {\n  const sdk = useSDK();\n  const queryClient = useQueryClient();\n\n  const {\n    data,\n    fetchNextPage: fetchMore,\n    hasNextPage: canFetchMore,\n    isFetchingNextPage: isFetchingMore,\n  } = useBasicMappingsByAssetIdQuery({\n    assetId: assetId,\n    limit: limit,\n  });\n\n  useEffect(() => {\n    if (canFetchMore && !isFetchingMore) {\n      fetchMore();\n    }\n  }, [canFetchMore, fetchMore, isFetchingMore]);\n\n  return useQuery<DetailedMapping[], CogniteError, DetailedMapping[]>(\n    queryKeys.listDetailedAssetMappings(assetId),\n    async () => {\n      return Promise.all(\n        uniqWith(\n          data,\n          (\n            { modelId: mId1, revisionId: rId1 },\n            { modelId: mId2, revisionId: rId2 }\n          ) => mId1 === mId2 && rId1 === rId2\n        ).map(async ({ modelId, revisionId, ...otherProps }) => {\n          const [model, revision] = await Promise.all([\n            fetchThreeDModelQuery(sdk, queryClient, modelId),\n            fetchThreeDRevisionQuery(sdk, queryClient, modelId, revisionId),\n          ]);\n\n          return {\n            model,\n            revision,\n            revisionId,\n            modelId,\n            ...otherProps,\n          };\n        })\n      );\n    },\n    {\n      ...options,\n      enabled: data.length > 0 && !canFetchMore,\n    }\n  );\n};\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SACEC,QAAQ,EACRC,cAAc,QAET,uBAAuB;AAC9B,OAAOC,QAAQ,MAAM,iBAAiB;AAGtC,SAASC,MAAM,QAAQ,uBAAuB;AAE9C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,qBAAqB,EAAEC,wBAAwB,QAAQ,YAAY;AAG5E,SAASC,8BAA8B,QAAQ,kCAAkC;AAEjF,OAAO,MAAMC,iCAAiC,GAAG,CAC/CC,OAAe,EACfC,KAA0B,EAC1BC,OAA6E,KAC1E;EAAA;EACH,MAAMC,GAAG,GAAGT,MAAM,EAAE;EACpB,MAAMU,WAAW,GAAGZ,cAAc,EAAE;EAEpC,MAAM;IACJa,IAAI;IACJC,aAAa,EAAEC,SAAS;IACxBC,WAAW,EAAEC,YAAY;IACzBC,kBAAkB,EAAEC;EACtB,CAAC,GAAGb,8BAA8B,CAAC;IACjCE,OAAO,EAAEA,OAAO;IAChBC,KAAK,EAAEA;EACT,CAAC,CAAC;EAEFX,SAAS,CAAC,MAAM;IACd,IAAImB,YAAY,IAAI,CAACE,cAAc,EAAE;MACnCJ,SAAS,EAAE;IACb;EACF,CAAC,EAAE,CAACE,YAAY,EAAEF,SAAS,EAAEI,cAAc,CAAC,CAAC;EAE7C,OAAOpB,QAAQ,CACbI,SAAS,CAACiB,yBAAyB,CAACZ,OAAO,CAAC,EAC5C,YAAY;IACV,OAAOa,OAAO,CAACC,GAAG,CAChBrB,QAAQ,CACNY,IAAI,EACJ,CACE;MAAEU,OAAO,EAAEC,IAAI;MAAEC,UAAU,EAAEC;IAAK,CAAC,EACnC;MAAEH,OAAO,EAAEI,IAAI;MAAEF,UAAU,EAAEG;IAAK,CAAC,KAChCJ,IAAI,KAAKG,IAAI,IAAID,IAAI,KAAKE,IAAI,CACpC,CAACC,GAAG,CAAC,OAAO;MAAEN,OAAO;MAAEE,UAAU;MAAE,GAAGK;IAAW,CAAC,KAAK;MACtD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAG,MAAMX,OAAO,CAACC,GAAG,CAAC,CAC1ClB,qBAAqB,CAACO,GAAG,EAAEC,WAAW,EAAEW,OAAO,CAAC,EAChDlB,wBAAwB,CAACM,GAAG,EAAEC,WAAW,EAAEW,OAAO,EAAEE,UAAU,CAAC,CAChE,CAAC;MAEF,OAAO;QACLM,KAAK;QACLC,QAAQ;QACRP,UAAU;QACVF,OAAO;QACP,GAAGO;MACL,CAAC;IACH,CAAC,CAAC,CACH;EACH,CAAC,EACD;IACE,GAAGpB,OAAO;IACVuB,OAAO,EAAEpB,IAAI,CAACqB,MAAM,GAAG,CAAC,IAAI,CAACjB;EAC/B,CAAC,CACF;AACH,CAAC;AAAC,GAvDWV,iCAAiC;EAAA,QAKhCL,MAAM,EACEF,cAAc,EAO9BM,8BAA8B,EAW3BP,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}