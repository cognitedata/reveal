{"ast":null,"code":"var _jsxFileName = \"/Volumes/csvol/fusion/apps/functions-ui/src/components/FunctionCallResponse.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useResponse } from '../utils/hooks';\nimport FunctionCall from './FunctionCall';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loading = /*#__PURE__*/_jsxDEV(_Fragment, {\n  children: \" No results available yet\"\n}, void 0, false);\nfunction SucessReponse({\n  id,\n  callId\n}) {\n  _s();\n  const {\n    data,\n    isFetched\n  } = useResponse({\n    id,\n    callId\n  });\n  const response = data;\n  if (!isFetched) {\n    return loading;\n  }\n  if (response) {\n    return /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(response, null, 4)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"em\", {\n    children: \"No response was returned from this function call\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n}\n_s(SucessReponse, \"RfZxIHesBxUEXZgPDaR0KF5kMlg=\", false, function () {\n  return [useResponse];\n});\n_c = SucessReponse;\nexport default function FunctionCallReponse({\n  id,\n  callId\n}) {\n  if (!callId) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(FunctionCall, {\n    id: id,\n    callId: callId,\n    renderLoading: () => loading,\n    renderCall: response => {\n      switch (response?.status) {\n        case 'Running':\n          {\n            return loading;\n          }\n        case 'Completed':\n          {\n            return /*#__PURE__*/_jsxDEV(SucessReponse, {\n              id: id,\n              callId: callId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 20\n            }, this);\n          }\n        case 'Failed':\n          {\n            // Is it possiblet to the the error/stacktrace from the api?\n            return loading;\n          }\n        case 'Timeout':\n          {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: \"Timeout\"\n            }, void 0, false);\n          }\n        default:\n          {\n            return loading;\n          }\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_c2 = FunctionCallReponse;\nvar _c, _c2;\n$RefreshReg$(_c, \"SucessReponse\");\n$RefreshReg$(_c2, \"FunctionCallReponse\");","map":{"version":3,"names":["React","useResponse","FunctionCall","loading","SucessReponse","id","callId","data","isFetched","response","JSON","stringify","FunctionCallReponse","status"],"sources":["/Volumes/csvol/fusion/apps/functions-ui/src/components/FunctionCallResponse.tsx"],"sourcesContent":["import React from 'react';\n\nimport { useResponse } from '../utils/hooks';\n\nimport FunctionCall from './FunctionCall';\n\nconst loading = <> No results available yet</>;\n\ntype Props = {\n  id: number;\n  callId?: number;\n};\n\ntype ResponseProps = {\n  id: number;\n  callId: number;\n};\nfunction SucessReponse({ id, callId }: ResponseProps) {\n  const { data, isFetched } = useResponse({ id, callId });\n  const response = data;\n\n  if (!isFetched) {\n    return loading;\n  }\n\n  if (response) {\n    return <pre>{JSON.stringify(response, null, 4)}</pre>;\n  }\n  return <em>No response was returned from this function call</em>;\n}\n\nexport default function FunctionCallReponse({ id, callId }: Props) {\n  if (!callId) {\n    return null;\n  }\n  return (\n    <FunctionCall\n      id={id}\n      callId={callId}\n      renderLoading={() => loading}\n      renderCall={(response) => {\n        switch (response?.status) {\n          case 'Running': {\n            return loading;\n          }\n          case 'Completed': {\n            return <SucessReponse id={id} callId={callId} />;\n          }\n          case 'Failed': {\n            // Is it possiblet to the the error/stacktrace from the api?\n            return loading;\n          }\n          case 'Timeout': {\n            return <>Timeout</>;\n          }\n          default: {\n            return loading;\n          }\n        }\n      }}\n    />\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,OAAOC,YAAY,MAAM,gBAAgB;AAAC;AAAA;AAE1C,MAAMC,OAAO,gBAAG;EAAA,UAAE;AAAyB,iBAAG;AAW9C,SAASC,aAAa,CAAC;EAAEC,EAAE;EAAEC;AAAsB,CAAC,EAAE;EAAA;EACpD,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGP,WAAW,CAAC;IAAEI,EAAE;IAAEC;EAAO,CAAC,CAAC;EACvD,MAAMG,QAAQ,GAAGF,IAAI;EAErB,IAAI,CAACC,SAAS,EAAE;IACd,OAAOL,OAAO;EAChB;EAEA,IAAIM,QAAQ,EAAE;IACZ,oBAAO;MAAA,UAAMC,IAAI,CAACC,SAAS,CAACF,QAAQ,EAAE,IAAI,EAAE,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QAAO;EACvD;EACA,oBAAO;IAAA,UAAI;EAAgD;IAAA;IAAA;IAAA;EAAA,QAAK;AAClE;AAAC,GAZQL,aAAa;EAAA,QACQH,WAAW;AAAA;AAAA,KADhCG,aAAa;AActB,eAAe,SAASQ,mBAAmB,CAAC;EAAEP,EAAE;EAAEC;AAAc,CAAC,EAAE;EACjE,IAAI,CAACA,MAAM,EAAE;IACX,OAAO,IAAI;EACb;EACA,oBACE,QAAC,YAAY;IACX,EAAE,EAAED,EAAG;IACP,MAAM,EAAEC,MAAO;IACf,aAAa,EAAE,MAAMH,OAAQ;IAC7B,UAAU,EAAGM,QAAQ,IAAK;MACxB,QAAQA,QAAQ,EAAEI,MAAM;QACtB,KAAK,SAAS;UAAE;YACd,OAAOV,OAAO;UAChB;QACA,KAAK,WAAW;UAAE;YAChB,oBAAO,QAAC,aAAa;cAAC,EAAE,EAAEE,EAAG;cAAC,MAAM,EAAEC;YAAO;cAAA;cAAA;cAAA;YAAA,QAAG;UAClD;QACA,KAAK,QAAQ;UAAE;YACb;YACA,OAAOH,OAAO;UAChB;QACA,KAAK,SAAS;UAAE;YACd,oBAAO;cAAA,UAAE;YAAO,iBAAG;UACrB;QACA;UAAS;YACP,OAAOA,OAAO;UAChB;MAAC;IAEL;EAAE;IAAA;IAAA;IAAA;EAAA,QACF;AAEN;AAAC,MA/BuBS,mBAAmB;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}