{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useSDK } from '@cognite/sdk-provider';\nimport { queryKeys } from '../../../queryKeys';\nimport { mapFiltersToEventsAdvancedFilters, mapInternalFilterToEventsFilter } from '../../internal';\nimport { getEventsAggregateCount } from '../network';\nexport const useEventsAggregateCountQuery = ({\n  query,\n  eventsFilters\n}, searchConfig, options) => {\n  _s();\n  const sdk = useSDK();\n  const advancedFilter = useMemo(() => mapFiltersToEventsAdvancedFilters(eventsFilters, query, searchConfig), [eventsFilters, query, searchConfig]);\n  const filter = useMemo(() => mapInternalFilterToEventsFilter(eventsFilters), [eventsFilters]);\n  return useQuery(queryKeys.aggregateEvents([advancedFilter, filter, 'count']), () => {\n    return getEventsAggregateCount(sdk, {\n      filter,\n      advancedFilter\n    });\n  }, {\n    ...options\n  });\n};\n_s(useEventsAggregateCountQuery, \"Me2sqXUuD9pTdjsgsYzuPDRu8PQ=\", false, function () {\n  return [useSDK, useQuery];\n});","map":{"version":3,"names":["useMemo","useQuery","useSDK","queryKeys","mapFiltersToEventsAdvancedFilters","mapInternalFilterToEventsFilter","getEventsAggregateCount","useEventsAggregateCountQuery","query","eventsFilters","searchConfig","options","sdk","advancedFilter","filter","aggregateEvents"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/events/service/queries/useEventsAggregateCountQuery.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\n\nimport { useSDK } from '@cognite/sdk-provider';\n\nimport {\n  EventConfigType,\n  InternalEventsFilters,\n} from '@data-exploration-lib/core';\n\nimport { queryKeys } from '../../../queryKeys';\nimport {\n  mapFiltersToEventsAdvancedFilters,\n  mapInternalFilterToEventsFilter,\n} from '../../internal';\nimport { getEventsAggregateCount } from '../network';\n\nexport const useEventsAggregateCountQuery = (\n  {\n    query,\n    eventsFilters,\n  }: {\n    query?: string;\n    eventsFilters: InternalEventsFilters;\n  },\n  searchConfig?: EventConfigType,\n  options?: UseQueryOptions\n) => {\n  const sdk = useSDK();\n\n  const advancedFilter = useMemo(\n    () => mapFiltersToEventsAdvancedFilters(eventsFilters, query, searchConfig),\n    [eventsFilters, query, searchConfig]\n  );\n\n  const filter = useMemo(\n    () => mapInternalFilterToEventsFilter(eventsFilters),\n    [eventsFilters]\n  );\n\n  return useQuery(\n    queryKeys.aggregateEvents([advancedFilter, filter, 'count']),\n    () => {\n      return getEventsAggregateCount(sdk, {\n        filter,\n        advancedFilter,\n      });\n    },\n    {\n      ...(options as any),\n    }\n  );\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,QAAQ,QAAyB,uBAAuB;AAEjE,SAASC,MAAM,QAAQ,uBAAuB;AAO9C,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SACEC,iCAAiC,EACjCC,+BAA+B,QAC1B,gBAAgB;AACvB,SAASC,uBAAuB,QAAQ,YAAY;AAEpD,OAAO,MAAMC,4BAA4B,GAAG,CAC1C;EACEC,KAAK;EACLC;AAIF,CAAC,EACDC,YAA8B,EAC9BC,OAAyB,KACtB;EAAA;EACH,MAAMC,GAAG,GAAGV,MAAM,EAAE;EAEpB,MAAMW,cAAc,GAAGb,OAAO,CAC5B,MAAMI,iCAAiC,CAACK,aAAa,EAAED,KAAK,EAAEE,YAAY,CAAC,EAC3E,CAACD,aAAa,EAAED,KAAK,EAAEE,YAAY,CAAC,CACrC;EAED,MAAMI,MAAM,GAAGd,OAAO,CACpB,MAAMK,+BAA+B,CAACI,aAAa,CAAC,EACpD,CAACA,aAAa,CAAC,CAChB;EAED,OAAOR,QAAQ,CACbE,SAAS,CAACY,eAAe,CAAC,CAACF,cAAc,EAAEC,MAAM,EAAE,OAAO,CAAC,CAAC,EAC5D,MAAM;IACJ,OAAOR,uBAAuB,CAACM,GAAG,EAAE;MAClCE,MAAM;MACND;IACF,CAAC,CAAC;EACJ,CAAC,EACD;IACE,GAAIF;EACN,CAAC,CACF;AACH,CAAC;AAAC,GAnCWJ,4BAA4B;EAAA,QAW3BL,MAAM,EAYXD,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}