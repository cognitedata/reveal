{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useDeepMemo } from '@data-exploration-lib/core';\nimport { getSearchConfig } from '../../../utils';\nimport { extractMatchingLabels } from '../../../utils/extractMatchingLabels';\nimport { extractMatchingLabelsFromCogniteLabels } from '../../../utils/extractMatchingLabelsFromCogniteLabels';\nimport { useAssetsSearchResultQuery } from './useAssetsSearchResultQuery';\nexport const useAssetsSearchResultWithLabelsQuery = ({\n  query,\n  assetFilter = {},\n  sortBy\n}, options, searchConfig = getSearchConfig().asset) => {\n  _s();\n  const {\n    data,\n    ...rest\n  } = useAssetsSearchResultQuery({\n    query,\n    assetFilter,\n    sortBy\n  }, options, searchConfig);\n  const properties = React.useMemo(() => {\n    const arr = [];\n    if (searchConfig.id.enabled) {\n      arr.push({\n        key: 'id',\n        label: 'ID'\n      });\n    }\n    if (searchConfig.name.enabled) {\n      arr.push({\n        key: 'name',\n        useSubstringMatch: true\n      });\n    }\n    if (searchConfig.description.enabled) {\n      arr.push({\n        key: 'description',\n        useSubstringMatch: true\n      });\n    }\n    if (searchConfig.externalId.enabled) {\n      arr.push({\n        key: 'externalId',\n        label: 'External ID'\n      });\n    }\n    if (searchConfig.source.enabled) {\n      arr.push('source');\n    }\n    if (searchConfig.metadata.enabled) {\n      arr.push('metadata');\n    }\n    if (searchConfig.labels.enabled) {\n      arr.push({\n        key: 'labels',\n        customMatcher: extractMatchingLabelsFromCogniteLabels\n      });\n    }\n    return arr;\n  }, [searchConfig]);\n  const mappedData = useDeepMemo(() => {\n    if (data && query) {\n      return data.map(asset => {\n        return {\n          ...asset,\n          matchingLabels: extractMatchingLabels(asset, query, properties)\n        };\n      });\n    }\n    return data;\n  }, [data, query]);\n  return {\n    data: mappedData,\n    ...rest\n  };\n};\n_s(useAssetsSearchResultWithLabelsQuery, \"rWAQ2hk2su+45CqW/chC4O4Z1NQ=\", false, function () {\n  return [useAssetsSearchResultQuery, useDeepMemo];\n});","map":{"version":3,"names":["React","useDeepMemo","getSearchConfig","extractMatchingLabels","extractMatchingLabelsFromCogniteLabels","useAssetsSearchResultQuery","useAssetsSearchResultWithLabelsQuery","query","assetFilter","sortBy","options","searchConfig","asset","data","rest","properties","useMemo","arr","id","enabled","push","key","label","name","useSubstringMatch","description","externalId","source","metadata","labels","customMatcher","mappedData","map","matchingLabels"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/assets/internal/queries/useAssetsSearchResultWithLabelsQuery.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { UseInfiniteQueryOptions } from '@tanstack/react-query';\n\nimport {\n  AssetConfigType,\n  InternalAssetFilters,\n  useDeepMemo,\n} from '@data-exploration-lib/core';\n\nimport { TableSortBy } from '../../../types';\nimport { getSearchConfig } from '../../../utils';\nimport {\n  extractMatchingLabels,\n  MatchingLabelPropertyType,\n} from '../../../utils/extractMatchingLabels';\nimport { extractMatchingLabelsFromCogniteLabels } from '../../../utils/extractMatchingLabelsFromCogniteLabels';\n\nimport { useAssetsSearchResultQuery } from './useAssetsSearchResultQuery';\n\nexport const useAssetsSearchResultWithLabelsQuery = (\n  {\n    query,\n    assetFilter = {},\n    sortBy,\n  }: {\n    query?: string;\n    assetFilter: InternalAssetFilters;\n    sortBy?: TableSortBy[];\n  },\n  options?: UseInfiniteQueryOptions,\n  searchConfig: AssetConfigType = getSearchConfig().asset\n) => {\n  const { data, ...rest } = useAssetsSearchResultQuery(\n    { query, assetFilter, sortBy },\n    options,\n    searchConfig\n  );\n\n  const properties = React.useMemo(() => {\n    const arr: MatchingLabelPropertyType[] = [];\n\n    if (searchConfig.id.enabled) {\n      arr.push({\n        key: 'id',\n        label: 'ID',\n      });\n    }\n\n    if (searchConfig.name.enabled) {\n      arr.push({\n        key: 'name',\n        useSubstringMatch: true,\n      });\n    }\n    if (searchConfig.description.enabled) {\n      arr.push({\n        key: 'description',\n        useSubstringMatch: true,\n      });\n    }\n\n    if (searchConfig.externalId.enabled) {\n      arr.push({\n        key: 'externalId',\n        label: 'External ID',\n      });\n    }\n\n    if (searchConfig.source.enabled) {\n      arr.push('source');\n    }\n    if (searchConfig.metadata.enabled) {\n      arr.push('metadata');\n    }\n    if (searchConfig.labels.enabled) {\n      arr.push({\n        key: 'labels',\n        customMatcher: extractMatchingLabelsFromCogniteLabels,\n      });\n    }\n\n    return arr;\n  }, [searchConfig]);\n\n  const mappedData = useDeepMemo(() => {\n    if (data && query) {\n      return data.map((asset) => {\n        return {\n          ...asset,\n          matchingLabels: extractMatchingLabels(asset, query, properties),\n        };\n      });\n    }\n\n    return data;\n  }, [data, query]);\n\n  return { data: mappedData, ...rest };\n};\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAI9B,SAGEC,WAAW,QACN,4BAA4B;AAGnC,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SACEC,qBAAqB,QAEhB,sCAAsC;AAC7C,SAASC,sCAAsC,QAAQ,uDAAuD;AAE9G,SAASC,0BAA0B,QAAQ,8BAA8B;AAEzE,OAAO,MAAMC,oCAAoC,GAAG,CAClD;EACEC,KAAK;EACLC,WAAW,GAAG,CAAC,CAAC;EAChBC;AAKF,CAAC,EACDC,OAAiC,EACjCC,YAA6B,GAAGT,eAAe,EAAE,CAACU,KAAK,KACpD;EAAA;EACH,MAAM;IAAEC,IAAI;IAAE,GAAGC;EAAK,CAAC,GAAGT,0BAA0B,CAClD;IAAEE,KAAK;IAAEC,WAAW;IAAEC;EAAO,CAAC,EAC9BC,OAAO,EACPC,YAAY,CACb;EAED,MAAMI,UAAU,GAAGf,KAAK,CAACgB,OAAO,CAAC,MAAM;IACrC,MAAMC,GAAgC,GAAG,EAAE;IAE3C,IAAIN,YAAY,CAACO,EAAE,CAACC,OAAO,EAAE;MAC3BF,GAAG,CAACG,IAAI,CAAC;QACPC,GAAG,EAAE,IAAI;QACTC,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IAEA,IAAIX,YAAY,CAACY,IAAI,CAACJ,OAAO,EAAE;MAC7BF,GAAG,CAACG,IAAI,CAAC;QACPC,GAAG,EAAE,MAAM;QACXG,iBAAiB,EAAE;MACrB,CAAC,CAAC;IACJ;IACA,IAAIb,YAAY,CAACc,WAAW,CAACN,OAAO,EAAE;MACpCF,GAAG,CAACG,IAAI,CAAC;QACPC,GAAG,EAAE,aAAa;QAClBG,iBAAiB,EAAE;MACrB,CAAC,CAAC;IACJ;IAEA,IAAIb,YAAY,CAACe,UAAU,CAACP,OAAO,EAAE;MACnCF,GAAG,CAACG,IAAI,CAAC;QACPC,GAAG,EAAE,YAAY;QACjBC,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IAEA,IAAIX,YAAY,CAACgB,MAAM,CAACR,OAAO,EAAE;MAC/BF,GAAG,CAACG,IAAI,CAAC,QAAQ,CAAC;IACpB;IACA,IAAIT,YAAY,CAACiB,QAAQ,CAACT,OAAO,EAAE;MACjCF,GAAG,CAACG,IAAI,CAAC,UAAU,CAAC;IACtB;IACA,IAAIT,YAAY,CAACkB,MAAM,CAACV,OAAO,EAAE;MAC/BF,GAAG,CAACG,IAAI,CAAC;QACPC,GAAG,EAAE,QAAQ;QACbS,aAAa,EAAE1B;MACjB,CAAC,CAAC;IACJ;IAEA,OAAOa,GAAG;EACZ,CAAC,EAAE,CAACN,YAAY,CAAC,CAAC;EAElB,MAAMoB,UAAU,GAAG9B,WAAW,CAAC,MAAM;IACnC,IAAIY,IAAI,IAAIN,KAAK,EAAE;MACjB,OAAOM,IAAI,CAACmB,GAAG,CAAEpB,KAAK,IAAK;QACzB,OAAO;UACL,GAAGA,KAAK;UACRqB,cAAc,EAAE9B,qBAAqB,CAACS,KAAK,EAAEL,KAAK,EAAEQ,UAAU;QAChE,CAAC;MACH,CAAC,CAAC;IACJ;IAEA,OAAOF,IAAI;EACb,CAAC,EAAE,CAACA,IAAI,EAAEN,KAAK,CAAC,CAAC;EAEjB,OAAO;IAAEM,IAAI,EAAEkB,UAAU;IAAE,GAAGjB;EAAK,CAAC;AACtC,CAAC;AAAC,GA/EWR,oCAAoC;EAAA,QAarBD,0BAA0B,EAoDjCJ,WAAW;AAAA"},"metadata":{},"sourceType":"module"}