{"ast":null,"code":"import { getTooltipNumericValue } from '../../../utils/getTooltipNumericValue';\nimport { getTooltipRawDatapointValue } from '../../../utils/getTooltipRawDatapointValue';\nexport const formatTooltipContent = ({\n  customData\n}, unit) => {\n  const datapoint = customData;\n  if (!datapoint) {\n    return [];\n  }\n  if ('value' in datapoint) {\n    return [{\n      label: 'Value',\n      value: getTooltipRawDatapointValue(datapoint.value, unit)\n    }];\n  }\n  const {\n    average,\n    max,\n    min,\n    count\n  } = datapoint;\n  return [{\n    label: 'Min',\n    value: getTooltipNumericValue(min, unit)\n  }, {\n    label: 'Max',\n    value: getTooltipNumericValue(max, unit)\n  }, {\n    label: 'Average',\n    value: getTooltipNumericValue(average, unit)\n  }, {\n    label: 'Count',\n    value: count\n  }];\n};","map":{"version":3,"names":["getTooltipNumericValue","getTooltipRawDatapointValue","formatTooltipContent","customData","unit","datapoint","label","value","average","max","min","count"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/TimeseriesChart/components/TimeseriesChartLarge/helpers/formatTooltipContent.ts"],"sourcesContent":["import { TooltipRendererProps } from '../../../../LineChart';\nimport { TimeseriesDatapoint } from '../../../domain/service/types';\nimport { getTooltipNumericValue } from '../../../utils/getTooltipNumericValue';\nimport { getTooltipRawDatapointValue } from '../../../utils/getTooltipRawDatapointValue';\n\nexport const formatTooltipContent = (\n  { customData }: TooltipRendererProps,\n  unit?: string\n) => {\n  const datapoint = customData as TimeseriesDatapoint;\n\n  if (!datapoint) {\n    return [];\n  }\n\n  if ('value' in datapoint) {\n    return [\n      {\n        label: 'Value',\n        value: getTooltipRawDatapointValue(datapoint.value, unit),\n      },\n    ];\n  }\n\n  const { average, max, min, count } = datapoint;\n\n  return [\n    { label: 'Min', value: getTooltipNumericValue(min, unit) },\n    { label: 'Max', value: getTooltipNumericValue(max, unit) },\n    { label: 'Average', value: getTooltipNumericValue(average, unit) },\n    { label: 'Count', value: count },\n  ];\n};\n"],"mappings":"AAEA,SAASA,sBAAsB,QAAQ,uCAAuC;AAC9E,SAASC,2BAA2B,QAAQ,4CAA4C;AAExF,OAAO,MAAMC,oBAAoB,GAAG,CAClC;EAAEC;AAAiC,CAAC,EACpCC,IAAa,KACV;EACH,MAAMC,SAAS,GAAGF,UAAiC;EAEnD,IAAI,CAACE,SAAS,EAAE;IACd,OAAO,EAAE;EACX;EAEA,IAAI,OAAO,IAAIA,SAAS,EAAE;IACxB,OAAO,CACL;MACEC,KAAK,EAAE,OAAO;MACdC,KAAK,EAAEN,2BAA2B,CAACI,SAAS,CAACE,KAAK,EAAEH,IAAI;IAC1D,CAAC,CACF;EACH;EAEA,MAAM;IAAEI,OAAO;IAAEC,GAAG;IAAEC,GAAG;IAAEC;EAAM,CAAC,GAAGN,SAAS;EAE9C,OAAO,CACL;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAEP,sBAAsB,CAACU,GAAG,EAAEN,IAAI;EAAE,CAAC,EAC1D;IAAEE,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAEP,sBAAsB,CAACS,GAAG,EAAEL,IAAI;EAAE,CAAC,EAC1D;IAAEE,KAAK,EAAE,SAAS;IAAEC,KAAK,EAAEP,sBAAsB,CAACQ,OAAO,EAAEJ,IAAI;EAAE,CAAC,EAClE;IAAEE,KAAK,EAAE,OAAO;IAAEC,KAAK,EAAEI;EAAM,CAAC,CACjC;AACH,CAAC"},"metadata":{},"sourceType":"module"}