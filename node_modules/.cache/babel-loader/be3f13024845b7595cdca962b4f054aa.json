{"ast":null,"code":"import { aggregate } from '@cognite/sdk-react-query-hooks';\nexport const getAggregateByIds = (sdk, type, dataSets) => {\n  const makePromises = dataSets.map(async dataSet => {\n    const filter = {\n      dataSetIds: [{\n        id: dataSet.id\n      }]\n    };\n    const {\n      count\n    } = await aggregate(sdk, type, filter);\n    return {\n      ...dataSet,\n      count\n    };\n  });\n  return Promise.all(makePromises);\n};","map":{"version":3,"names":["aggregate","getAggregateByIds","sdk","type","dataSets","makePromises","map","dataSet","filter","dataSetIds","id","count","Promise","all"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/dataSets/service/network/getAggregateById.ts"],"sourcesContent":["import { CogniteClient, DataSet } from '@cognite/sdk';\nimport { aggregate, SdkResourceType } from '@cognite/sdk-react-query-hooks';\n\nimport { DataSetWithCount } from '../../internal';\n\nexport const getAggregateByIds = (\n  sdk: CogniteClient,\n  type: SdkResourceType,\n  dataSets: DataSet[]\n) => {\n  const makePromises = dataSets.map(async (dataSet) => {\n    const filter = { dataSetIds: [{ id: dataSet.id }] };\n    const { count } = await aggregate(sdk, type, filter);\n\n    return {\n      ...dataSet,\n      count,\n    };\n  });\n\n  return Promise.all<Promise<DataSetWithCount>>(makePromises);\n};\n"],"mappings":"AACA,SAASA,SAAS,QAAyB,gCAAgC;AAI3E,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,GAAkB,EAClBC,IAAqB,EACrBC,QAAmB,KAChB;EACH,MAAMC,YAAY,GAAGD,QAAQ,CAACE,GAAG,CAAC,MAAOC,OAAO,IAAK;IACnD,MAAMC,MAAM,GAAG;MAAEC,UAAU,EAAE,CAAC;QAAEC,EAAE,EAAEH,OAAO,CAACG;MAAG,CAAC;IAAE,CAAC;IACnD,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMX,SAAS,CAACE,GAAG,EAAEC,IAAI,EAAEK,MAAM,CAAC;IAEpD,OAAO;MACL,GAAGD,OAAO;MACVI;IACF,CAAC;EACH,CAAC,CAAC;EAEF,OAAOC,OAAO,CAACC,GAAG,CAA4BR,YAAY,CAAC;AAC7D,CAAC"},"metadata":{},"sourceType":"module"}