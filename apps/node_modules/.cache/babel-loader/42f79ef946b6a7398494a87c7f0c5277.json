{"ast":null,"code":"import { getCluster, getEnv } from '@cognite/cdf-utilities';\nimport { JOURNEY_FIELD, JOURNEY_ITEM_SEPARATOR, SELECTED_TAB_FIELD } from '../constants';\nimport { ResourceTypes } from '../types';\n\n// We have these functions in case in the future we would like to set ...\n// ... different journey types than resource types.\n// i.e. 'a-123' instead of 'asset-123'\nconst getJourneyItemTypeFromResourceType = resourceType => {\n  switch (resourceType) {\n    case 'asset':\n      return ResourceTypes.Asset;\n    case 'timeSeries':\n      return ResourceTypes.TimeSeries;\n    case 'file':\n      return ResourceTypes.File;\n    case 'event':\n      return ResourceTypes.Event;\n    case 'sequence':\n      return ResourceTypes.Sequence;\n    case 'threeD':\n      return ResourceTypes.ThreeD;\n    default:\n      return 'unknown-resource-type';\n  }\n};\nconst getResourceTypeFromJourneyItemType = itemType => {\n  switch (itemType) {\n    case ResourceTypes.Asset:\n      return 'asset';\n    case ResourceTypes.TimeSeries:\n      return 'timeSeries';\n    case ResourceTypes.File:\n      return 'file';\n    case ResourceTypes.Event:\n      return 'event';\n    case ResourceTypes.Sequence:\n      return 'sequence';\n    case ResourceTypes.ThreeD:\n      return 'threeD';\n    default:\n      return undefined;\n  }\n};\nexport const getStringFromJourneyItem = item => {\n  const itemType = getJourneyItemTypeFromResourceType(item.type);\n  return `${itemType}${JOURNEY_ITEM_SEPARATOR}${item.id}`;\n};\nexport const getJourneyItemFromString = item => {\n  const rawItem = item.split(JOURNEY_ITEM_SEPARATOR);\n  return {\n    type: getResourceTypeFromJourneyItemType(rawItem[0]),\n    id: Number(rawItem[1])\n  };\n};\nexport const getSearchParamsWithJourney = journeyItem => {\n  return `?cluster=${getCluster()}&env=${getEnv()}&${JOURNEY_FIELD}=${getStringFromJourneyItem(journeyItem)}`;\n};\nexport const getSearchParamsWithJourneyAndSelectedTab = (journeyItem, selectedTab) => {\n  return `?cluster=${getCluster()}&env=${getEnv()}&${JOURNEY_FIELD}=${getStringFromJourneyItem(journeyItem)}&${SELECTED_TAB_FIELD}=${selectedTab}`;\n};\nexport const getSelectedResourceId = (selectedResourceType, journeyItem) => {\n  if (journeyItem && journeyItem.type === selectedResourceType) {\n    return journeyItem.id;\n  }\n  return undefined;\n};","map":{"version":3,"names":["getCluster","getEnv","JOURNEY_FIELD","JOURNEY_ITEM_SEPARATOR","SELECTED_TAB_FIELD","ResourceTypes","getJourneyItemTypeFromResourceType","resourceType","Asset","TimeSeries","File","Event","Sequence","ThreeD","getResourceTypeFromJourneyItemType","itemType","undefined","getStringFromJourneyItem","item","type","id","getJourneyItemFromString","rawItem","split","Number","getSearchParamsWithJourney","journeyItem","getSearchParamsWithJourneyAndSelectedTab","selectedTab","getSelectedResourceId","selectedResourceType"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/core/src/utils/journey.ts"],"sourcesContent":["import { getCluster, getEnv } from '@cognite/cdf-utilities';\n\nimport {\n  JOURNEY_FIELD,\n  JOURNEY_ITEM_SEPARATOR,\n  SELECTED_TAB_FIELD,\n} from '../constants';\nimport { JourneyItem, ResourceType, ResourceTypes } from '../types';\n\n// We have these functions in case in the future we would like to set ...\n// ... different journey types than resource types.\n// i.e. 'a-123' instead of 'asset-123'\nconst getJourneyItemTypeFromResourceType = (\n  resourceType: ResourceType | undefined\n): string => {\n  switch (resourceType) {\n    case 'asset':\n      return ResourceTypes.Asset;\n    case 'timeSeries':\n      return ResourceTypes.TimeSeries;\n    case 'file':\n      return ResourceTypes.File;\n    case 'event':\n      return ResourceTypes.Event;\n    case 'sequence':\n      return ResourceTypes.Sequence;\n    case 'threeD':\n      return ResourceTypes.ThreeD;\n    default:\n      return 'unknown-resource-type';\n  }\n};\n\nconst getResourceTypeFromJourneyItemType = (\n  itemType: string\n): ResourceType | undefined => {\n  switch (itemType) {\n    case ResourceTypes.Asset:\n      return 'asset';\n    case ResourceTypes.TimeSeries:\n      return 'timeSeries';\n    case ResourceTypes.File:\n      return 'file';\n    case ResourceTypes.Event:\n      return 'event';\n    case ResourceTypes.Sequence:\n      return 'sequence';\n    case ResourceTypes.ThreeD:\n      return 'threeD';\n    default:\n      return undefined;\n  }\n};\n\nexport const getStringFromJourneyItem = (item: JourneyItem): string => {\n  const itemType = getJourneyItemTypeFromResourceType(item.type);\n  return `${itemType}${JOURNEY_ITEM_SEPARATOR}${item.id}`;\n};\n\nexport const getJourneyItemFromString = (item: string): JourneyItem => {\n  const rawItem = item.split(JOURNEY_ITEM_SEPARATOR);\n  return {\n    type: getResourceTypeFromJourneyItemType(rawItem[0]),\n    id: Number(rawItem[1]),\n  };\n};\n\nexport const getSearchParamsWithJourney = (journeyItem: JourneyItem) => {\n  return `?cluster=${getCluster()}&env=${getEnv()}&${JOURNEY_FIELD}=${getStringFromJourneyItem(\n    journeyItem\n  )}`;\n};\n\nexport const getSearchParamsWithJourneyAndSelectedTab = (\n  journeyItem: JourneyItem,\n  selectedTab: string\n) => {\n  return `?cluster=${getCluster()}&env=${getEnv()}&${JOURNEY_FIELD}=${getStringFromJourneyItem(\n    journeyItem\n  )}&${SELECTED_TAB_FIELD}=${selectedTab}`;\n};\n\nexport const getSelectedResourceId = (\n  selectedResourceType: ResourceType,\n  journeyItem?: JourneyItem\n) => {\n  if (journeyItem && journeyItem.type === selectedResourceType) {\n    return journeyItem.id;\n  }\n\n  return undefined;\n};\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,QAAQ,wBAAwB;AAE3D,SACEC,aAAa,EACbC,sBAAsB,EACtBC,kBAAkB,QACb,cAAc;AACrB,SAAoCC,aAAa,QAAQ,UAAU;;AAEnE;AACA;AACA;AACA,MAAMC,kCAAkC,GACtCC,YAAsC,IAC3B;EACX,QAAQA,YAAY;IAClB,KAAK,OAAO;MACV,OAAOF,aAAa,CAACG,KAAK;IAC5B,KAAK,YAAY;MACf,OAAOH,aAAa,CAACI,UAAU;IACjC,KAAK,MAAM;MACT,OAAOJ,aAAa,CAACK,IAAI;IAC3B,KAAK,OAAO;MACV,OAAOL,aAAa,CAACM,KAAK;IAC5B,KAAK,UAAU;MACb,OAAON,aAAa,CAACO,QAAQ;IAC/B,KAAK,QAAQ;MACX,OAAOP,aAAa,CAACQ,MAAM;IAC7B;MACE,OAAO,uBAAuB;EAAC;AAErC,CAAC;AAED,MAAMC,kCAAkC,GACtCC,QAAgB,IACa;EAC7B,QAAQA,QAAQ;IACd,KAAKV,aAAa,CAACG,KAAK;MACtB,OAAO,OAAO;IAChB,KAAKH,aAAa,CAACI,UAAU;MAC3B,OAAO,YAAY;IACrB,KAAKJ,aAAa,CAACK,IAAI;MACrB,OAAO,MAAM;IACf,KAAKL,aAAa,CAACM,KAAK;MACtB,OAAO,OAAO;IAChB,KAAKN,aAAa,CAACO,QAAQ;MACzB,OAAO,UAAU;IACnB,KAAKP,aAAa,CAACQ,MAAM;MACvB,OAAO,QAAQ;IACjB;MACE,OAAOG,SAAS;EAAC;AAEvB,CAAC;AAED,OAAO,MAAMC,wBAAwB,GAAIC,IAAiB,IAAa;EACrE,MAAMH,QAAQ,GAAGT,kCAAkC,CAACY,IAAI,CAACC,IAAI,CAAC;EAC9D,OAAQ,GAAEJ,QAAS,GAAEZ,sBAAuB,GAAEe,IAAI,CAACE,EAAG,EAAC;AACzD,CAAC;AAED,OAAO,MAAMC,wBAAwB,GAAIH,IAAY,IAAkB;EACrE,MAAMI,OAAO,GAAGJ,IAAI,CAACK,KAAK,CAACpB,sBAAsB,CAAC;EAClD,OAAO;IACLgB,IAAI,EAAEL,kCAAkC,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAC;IACpDF,EAAE,EAAEI,MAAM,CAACF,OAAO,CAAC,CAAC,CAAC;EACvB,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,0BAA0B,GAAIC,WAAwB,IAAK;EACtE,OAAQ,YAAW1B,UAAU,EAAG,QAAOC,MAAM,EAAG,IAAGC,aAAc,IAAGe,wBAAwB,CAC1FS,WAAW,CACX,EAAC;AACL,CAAC;AAED,OAAO,MAAMC,wCAAwC,GAAG,CACtDD,WAAwB,EACxBE,WAAmB,KAChB;EACH,OAAQ,YAAW5B,UAAU,EAAG,QAAOC,MAAM,EAAG,IAAGC,aAAc,IAAGe,wBAAwB,CAC1FS,WAAW,CACX,IAAGtB,kBAAmB,IAAGwB,WAAY,EAAC;AAC1C,CAAC;AAED,OAAO,MAAMC,qBAAqB,GAAG,CACnCC,oBAAkC,EAClCJ,WAAyB,KACtB;EACH,IAAIA,WAAW,IAAIA,WAAW,CAACP,IAAI,KAAKW,oBAAoB,EAAE;IAC5D,OAAOJ,WAAW,CAACN,EAAE;EACvB;EAEA,OAAOJ,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module"}