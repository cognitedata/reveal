{"ast":null,"code":"/* eslint-disable import/no-webpack-loader-syntax */\n\n/**  This is the built in way how to load the web workers using webpack is with worker-loader */\n\nimport MonacoEditorWorker from 'worker-loader?esModule=true&inline=fallback!monaco-editor/esm/vs/editor/editor.worker?worker';\n\n// point here so the context can be used\n\nself.MonacoEnvironment = {\n  getWorker(_, _label) {\n    // otherwise, load the default web worker from monaco\n    return new MonacoEditorWorker();\n  }\n};","map":{"version":3,"names":["MonacoEditorWorker","self","MonacoEnvironment","getWorker","_","_label"],"sources":["/Volumes/csvol/fusion/apps/copilot/src/app/utils/setupMonaco.ts"],"sourcesContent":["/* eslint-disable import/no-webpack-loader-syntax */\n\n/**  This is the built in way how to load the web workers using webpack is with worker-loader */\nimport { Environment as MonacoEditorEnvironment } from 'monaco-editor';\nimport MonacoEditorWorker from 'worker-loader?esModule=true&inline=fallback!monaco-editor/esm/vs/editor/editor.worker?worker';\n\n// point here so the context can be used\ndeclare const self: any;\n\n(self as any).MonacoEnvironment = {\n  getWorker(_: string, _label: string) {\n    // otherwise, load the default web worker from monaco\n    return new MonacoEditorWorker();\n  },\n} as MonacoEditorEnvironment;\n"],"mappings":"AAAA;;AAEA;;AAEA,OAAOA,kBAAkB,MAAM,8FAA8F;;AAE7H;;AAGCC,IAAI,CAASC,iBAAiB,GAAG;EAChCC,SAAS,CAACC,CAAS,EAAEC,MAAc,EAAE;IACnC;IACA,OAAO,IAAIL,kBAAkB,EAAE;EACjC;AACF,CAA4B"},"metadata":{},"sourceType":"module"}