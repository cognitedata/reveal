{"ast":null,"code":"import isEmpty from 'lodash/isEmpty';\nexport const getTimeseriesDatapoints = (sdk, query) => {\n  const {\n    id,\n    ...rest\n  } = query;\n  return sdk.datapoints.retrieve({\n    items: [{\n      id\n    }],\n    ...rest\n  }).then(items => {\n    if (isEmpty(items)) {\n      return [];\n    }\n    return items[0].datapoints;\n  }).catch(() => {\n    return [];\n  });\n};","map":{"version":3,"names":["isEmpty","getTimeseriesDatapoints","sdk","query","id","rest","datapoints","retrieve","items","then","catch"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/TimeseriesChart/domain/service/network/getTimeseriesDatapoints.ts"],"sourcesContent":["import isEmpty from 'lodash/isEmpty';\n\nimport { CogniteClient } from '@cognite/sdk';\n\nimport { TimeseriesDatapoint, TimeseriesDatapointsQuery } from '../types';\n\nexport const getTimeseriesDatapoints = (\n  sdk: CogniteClient,\n  query: TimeseriesDatapointsQuery\n): Promise<TimeseriesDatapoint[]> => {\n  const { id, ...rest } = query;\n\n  return sdk.datapoints\n    .retrieve({\n      items: [{ id }],\n      ...rest,\n    })\n    .then((items) => {\n      if (isEmpty(items)) {\n        return [];\n      }\n\n      return items[0].datapoints;\n    })\n    .catch(() => {\n      return [];\n    });\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,gBAAgB;AAMpC,OAAO,MAAMC,uBAAuB,GAAG,CACrCC,GAAkB,EAClBC,KAAgC,KACG;EACnC,MAAM;IAAEC,EAAE;IAAE,GAAGC;EAAK,CAAC,GAAGF,KAAK;EAE7B,OAAOD,GAAG,CAACI,UAAU,CAClBC,QAAQ,CAAC;IACRC,KAAK,EAAE,CAAC;MAAEJ;IAAG,CAAC,CAAC;IACf,GAAGC;EACL,CAAC,CAAC,CACDI,IAAI,CAAED,KAAK,IAAK;IACf,IAAIR,OAAO,CAACQ,KAAK,CAAC,EAAE;MAClB,OAAO,EAAE;IACX;IAEA,OAAOA,KAAK,CAAC,CAAC,CAAC,CAACF,UAAU;EAC5B,CAAC,CAAC,CACDI,KAAK,CAAC,MAAM;IACX,OAAO,EAAE;EACX,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module"}