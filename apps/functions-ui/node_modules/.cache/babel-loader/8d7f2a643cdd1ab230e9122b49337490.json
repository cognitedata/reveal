{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as React from 'react';\nimport { EMPTY_OBJECT, useDeepMemo } from '@data-exploration-lib/core';\nimport { getSearchConfig } from '../../../utils';\nimport { extractMatchingLabels } from '../../../utils/extractMatchingLabels';\nimport { extractMatchingLabelsFromCogniteLabels } from '../../../utils/extractMatchingLabelsFromCogniteLabels';\nimport { documentNameAndContentMatcher } from '../transformers/documentNameAndContentMatcher';\nimport { useDocumentSearchResultQuery } from './useDocumentSearchResultQuery';\nexport const useDocumentSearchResultWithMatchingLabelsQuery = ({\n  filter = EMPTY_OBJECT,\n  limit,\n  query,\n  sortBy\n} = {}, options = {}, searchConfig = getSearchConfig().file) => {\n  _s();\n  const {\n    results,\n    ...rest\n  } = useDocumentSearchResultQuery({\n    filter,\n    limit,\n    query,\n    sortBy\n  }, options, searchConfig);\n  const properties = React.useMemo(() => {\n    const arr = [\n    // this takes care of name and content labels\n    {\n      key: 'highlight',\n      customMatcher: documentNameAndContentMatcher\n    }];\n    if (searchConfig.id.enabled) {\n      arr.push({\n        key: 'id',\n        label: 'ID'\n      });\n    }\n    if (searchConfig['sourceFile|metadata'].enabled) {\n      arr.push({\n        key: 'sourceFile.metadata',\n        label: 'Metadata'\n      });\n    }\n    if (searchConfig['sourceFile|source'].enabled) {\n      arr.push({\n        key: 'sourceFile.source',\n        label: 'Source'\n      });\n    }\n    if (searchConfig.externalId.enabled) {\n      arr.push({\n        key: 'externalId',\n        label: 'External ID'\n      });\n    }\n    if (searchConfig.labels.enabled) {\n      arr.push({\n        key: 'labels',\n        customMatcher: extractMatchingLabelsFromCogniteLabels\n      });\n    }\n    return arr;\n  }, [searchConfig]);\n  const mappedData = useDeepMemo(() => {\n    if (results && query) {\n      return results.map(item => {\n        return {\n          ...item,\n          matchingLabels: extractMatchingLabels(item, query, properties)\n        };\n      });\n    }\n    return results;\n  }, [results, query]);\n  return {\n    ...rest,\n    results: mappedData\n  };\n};\n_s(useDocumentSearchResultWithMatchingLabelsQuery, \"rYgpMBqSScAw2rFWbELTOgIQe8g=\", false, function () {\n  return [useDocumentSearchResultQuery, useDeepMemo];\n});","map":{"version":3,"names":["React","EMPTY_OBJECT","useDeepMemo","getSearchConfig","extractMatchingLabels","extractMatchingLabelsFromCogniteLabels","documentNameAndContentMatcher","useDocumentSearchResultQuery","useDocumentSearchResultWithMatchingLabelsQuery","filter","limit","query","sortBy","options","searchConfig","file","results","rest","properties","useMemo","arr","key","customMatcher","id","enabled","push","label","externalId","labels","mappedData","map","item","matchingLabels"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/documents/internal/queries/useDocumentSearchResultWithMatchingLabelsQuery.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { UseInfiniteQueryOptions } from '@tanstack/react-query';\n\nimport {\n  EMPTY_OBJECT,\n  FileConfigType,\n  InternalDocumentFilter,\n  useDeepMemo,\n} from '@data-exploration-lib/core';\n\nimport { TableSortBy } from '../../../types';\nimport { getSearchConfig } from '../../../utils';\nimport {\n  extractMatchingLabels,\n  MatchingLabelPropertyType,\n} from '../../../utils/extractMatchingLabels';\nimport { extractMatchingLabelsFromCogniteLabels } from '../../../utils/extractMatchingLabelsFromCogniteLabels';\nimport { documentNameAndContentMatcher } from '../transformers/documentNameAndContentMatcher';\n\nimport { useDocumentSearchResultQuery } from './useDocumentSearchResultQuery';\n\nexport const useDocumentSearchResultWithMatchingLabelsQuery = (\n  {\n    filter = EMPTY_OBJECT,\n    limit,\n    query,\n    sortBy,\n  }: {\n    filter?: InternalDocumentFilter;\n    query?: string;\n    limit?: number;\n    sortBy?: TableSortBy[];\n  } = {},\n  options: UseInfiniteQueryOptions = {},\n  searchConfig: FileConfigType = getSearchConfig().file\n) => {\n  const { results, ...rest } = useDocumentSearchResultQuery(\n    { filter, limit, query, sortBy },\n    options,\n    searchConfig\n  );\n\n  const properties = React.useMemo(() => {\n    const arr: MatchingLabelPropertyType[] = [\n      // this takes care of name and content labels\n      {\n        key: 'highlight',\n        customMatcher: documentNameAndContentMatcher,\n      },\n    ];\n\n    if (searchConfig.id.enabled) {\n      arr.push({\n        key: 'id',\n        label: 'ID',\n      });\n    }\n\n    if (searchConfig['sourceFile|metadata'].enabled) {\n      arr.push({\n        key: 'sourceFile.metadata',\n        label: 'Metadata',\n      });\n    }\n    if (searchConfig['sourceFile|source'].enabled) {\n      arr.push({\n        key: 'sourceFile.source',\n        label: 'Source',\n      });\n    }\n\n    if (searchConfig.externalId.enabled) {\n      arr.push({\n        key: 'externalId',\n        label: 'External ID',\n      });\n    }\n\n    if (searchConfig.labels.enabled) {\n      arr.push({\n        key: 'labels',\n        customMatcher: extractMatchingLabelsFromCogniteLabels,\n      });\n    }\n\n    return arr;\n  }, [searchConfig]);\n\n  const mappedData = useDeepMemo(() => {\n    if (results && query) {\n      return results.map((item) => {\n        return {\n          ...item,\n          matchingLabels: extractMatchingLabels(item, query, properties),\n        };\n      });\n    }\n\n    return results;\n  }, [results, query]);\n\n  return { ...rest, results: mappedData };\n};\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAI9B,SACEC,YAAY,EAGZC,WAAW,QACN,4BAA4B;AAGnC,SAASC,eAAe,QAAQ,gBAAgB;AAChD,SACEC,qBAAqB,QAEhB,sCAAsC;AAC7C,SAASC,sCAAsC,QAAQ,uDAAuD;AAC9G,SAASC,6BAA6B,QAAQ,+CAA+C;AAE7F,SAASC,4BAA4B,QAAQ,gCAAgC;AAE7E,OAAO,MAAMC,8CAA8C,GAAG,CAC5D;EACEC,MAAM,GAAGR,YAAY;EACrBS,KAAK;EACLC,KAAK;EACLC;AAMF,CAAC,GAAG,CAAC,CAAC,EACNC,OAAgC,GAAG,CAAC,CAAC,EACrCC,YAA4B,GAAGX,eAAe,EAAE,CAACY,IAAI,KAClD;EAAA;EACH,MAAM;IAAEC,OAAO;IAAE,GAAGC;EAAK,CAAC,GAAGV,4BAA4B,CACvD;IAAEE,MAAM;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAO,CAAC,EAChCC,OAAO,EACPC,YAAY,CACb;EAED,MAAMI,UAAU,GAAGlB,KAAK,CAACmB,OAAO,CAAC,MAAM;IACrC,MAAMC,GAAgC,GAAG;IACvC;IACA;MACEC,GAAG,EAAE,WAAW;MAChBC,aAAa,EAAEhB;IACjB,CAAC,CACF;IAED,IAAIQ,YAAY,CAACS,EAAE,CAACC,OAAO,EAAE;MAC3BJ,GAAG,CAACK,IAAI,CAAC;QACPJ,GAAG,EAAE,IAAI;QACTK,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IAEA,IAAIZ,YAAY,CAAC,qBAAqB,CAAC,CAACU,OAAO,EAAE;MAC/CJ,GAAG,CAACK,IAAI,CAAC;QACPJ,GAAG,EAAE,qBAAqB;QAC1BK,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IACA,IAAIZ,YAAY,CAAC,mBAAmB,CAAC,CAACU,OAAO,EAAE;MAC7CJ,GAAG,CAACK,IAAI,CAAC;QACPJ,GAAG,EAAE,mBAAmB;QACxBK,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IAEA,IAAIZ,YAAY,CAACa,UAAU,CAACH,OAAO,EAAE;MACnCJ,GAAG,CAACK,IAAI,CAAC;QACPJ,GAAG,EAAE,YAAY;QACjBK,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IAEA,IAAIZ,YAAY,CAACc,MAAM,CAACJ,OAAO,EAAE;MAC/BJ,GAAG,CAACK,IAAI,CAAC;QACPJ,GAAG,EAAE,QAAQ;QACbC,aAAa,EAAEjB;MACjB,CAAC,CAAC;IACJ;IAEA,OAAOe,GAAG;EACZ,CAAC,EAAE,CAACN,YAAY,CAAC,CAAC;EAElB,MAAMe,UAAU,GAAG3B,WAAW,CAAC,MAAM;IACnC,IAAIc,OAAO,IAAIL,KAAK,EAAE;MACpB,OAAOK,OAAO,CAACc,GAAG,CAAEC,IAAI,IAAK;QAC3B,OAAO;UACL,GAAGA,IAAI;UACPC,cAAc,EAAE5B,qBAAqB,CAAC2B,IAAI,EAAEpB,KAAK,EAAEO,UAAU;QAC/D,CAAC;MACH,CAAC,CAAC;IACJ;IAEA,OAAOF,OAAO;EAChB,CAAC,EAAE,CAACA,OAAO,EAAEL,KAAK,CAAC,CAAC;EAEpB,OAAO;IAAE,GAAGM,IAAI;IAAED,OAAO,EAAEa;EAAW,CAAC;AACzC,CAAC;AAAC,GAjFWrB,8CAA8C;EAAA,QAe5BD,4BAA4B,EAoDtCL,WAAW;AAAA"},"metadata":{},"sourceType":"module"}