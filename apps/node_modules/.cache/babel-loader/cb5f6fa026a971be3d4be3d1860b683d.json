{"ast":null,"code":"var _s = $RefreshSig$();\nimport { isDateInDateRange } from '@data-exploration-lib/core';\nimport { useTimeseriesSearchResultWithLabelsQuery } from './useTimeseriesSearchResultWithLabelsQuery';\nimport { useTimeseriesWithDatapointsQuery } from './useTimeseriesWithDatapointsQuery';\nexport const useTimeseriesWithAvailableDatapointsQuery = ({\n  query,\n  filter,\n  sortBy,\n  dateRange\n}, searchConfig, options) => {\n  _s();\n  const {\n    data: timeseries,\n    ...rest\n  } = useTimeseriesSearchResultWithLabelsQuery({\n    query,\n    filter,\n    sortBy\n  }, options, searchConfig);\n\n  // We need end date from dateRange to see if the range has any datapoints.\n  const {\n    data: timeseriesWithDataPointMap\n  } = useTimeseriesWithDatapointsQuery(timeseries.map(item => item.id), dateRange ? dateRange[1] : undefined);\n\n  // We do not care about the dateRange to show the date of latest datepoints since backend uses 'now' as default before date.\n  const {\n    data: timeseriesWithLatestDataPointMap\n  } = useTimeseriesWithDatapointsQuery(timeseries.map(item => item.id));\n  const timeseriesHasDatapoints = timeseries.map(item => ({\n    ...item,\n    hasDatapoints: isDateInDateRange(timeseriesWithDataPointMap[item.id], dateRange),\n    latestDatapointDate: timeseriesWithLatestDataPointMap[item.id]\n  }));\n  return {\n    data: timeseriesHasDatapoints,\n    ...rest\n  };\n};\n_s(useTimeseriesWithAvailableDatapointsQuery, \"PpBq66RvaIRO6R47gWeK4lnjM64=\", false, function () {\n  return [useTimeseriesSearchResultWithLabelsQuery, useTimeseriesWithDatapointsQuery, useTimeseriesWithDatapointsQuery];\n});","map":{"version":3,"names":["isDateInDateRange","useTimeseriesSearchResultWithLabelsQuery","useTimeseriesWithDatapointsQuery","useTimeseriesWithAvailableDatapointsQuery","query","filter","sortBy","dateRange","searchConfig","options","data","timeseries","rest","timeseriesWithDataPointMap","map","item","id","undefined","timeseriesWithLatestDataPointMap","timeseriesHasDatapoints","hasDatapoints","latestDatapointDate"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/domain-layer/src/timeseries/internal/queries/useTimeseriesWithAvailableDatapointsQuery.ts"],"sourcesContent":["import { UseInfiniteQueryOptions } from '@tanstack/react-query';\n\nimport {\n  InternalTimeseriesFilters,\n  isDateInDateRange,\n  TimeseriesConfigType,\n} from '@data-exploration-lib/core';\n\nimport { TableSortBy } from '../../../types';\n\nimport { useTimeseriesSearchResultWithLabelsQuery } from './useTimeseriesSearchResultWithLabelsQuery';\nimport { useTimeseriesWithDatapointsQuery } from './useTimeseriesWithDatapointsQuery';\n\nexport const useTimeseriesWithAvailableDatapointsQuery = (\n  {\n    query,\n    filter,\n    sortBy,\n    dateRange,\n  }: {\n    filter: InternalTimeseriesFilters;\n    query?: string;\n    sortBy?: TableSortBy[];\n    dateRange?: [Date, Date];\n  },\n  searchConfig?: TimeseriesConfigType,\n  options?: UseInfiniteQueryOptions\n) => {\n  const { data: timeseries, ...rest } =\n    useTimeseriesSearchResultWithLabelsQuery(\n      {\n        query,\n        filter,\n        sortBy,\n      },\n      options,\n      searchConfig\n    );\n\n  // We need end date from dateRange to see if the range has any datapoints.\n  const { data: timeseriesWithDataPointMap } = useTimeseriesWithDatapointsQuery(\n    timeseries.map((item) => item.id),\n    dateRange ? dateRange[1] : undefined\n  );\n\n  // We do not care about the dateRange to show the date of latest datepoints since backend uses 'now' as default before date.\n  const { data: timeseriesWithLatestDataPointMap } =\n    useTimeseriesWithDatapointsQuery(timeseries.map((item) => item.id));\n\n  const timeseriesHasDatapoints = timeseries.map((item) => ({\n    ...item,\n    hasDatapoints: isDateInDateRange(\n      timeseriesWithDataPointMap[item.id],\n      dateRange\n    ),\n    latestDatapointDate: timeseriesWithLatestDataPointMap[item.id],\n  }));\n\n  return {\n    data: timeseriesHasDatapoints,\n    ...rest,\n  };\n};\n"],"mappings":";AAEA,SAEEA,iBAAiB,QAEZ,4BAA4B;AAInC,SAASC,wCAAwC,QAAQ,4CAA4C;AACrG,SAASC,gCAAgC,QAAQ,oCAAoC;AAErF,OAAO,MAAMC,yCAAyC,GAAG,CACvD;EACEC,KAAK;EACLC,MAAM;EACNC,MAAM;EACNC;AAMF,CAAC,EACDC,YAAmC,EACnCC,OAAiC,KAC9B;EAAA;EACH,MAAM;IAAEC,IAAI,EAAEC,UAAU;IAAE,GAAGC;EAAK,CAAC,GACjCX,wCAAwC,CACtC;IACEG,KAAK;IACLC,MAAM;IACNC;EACF,CAAC,EACDG,OAAO,EACPD,YAAY,CACb;;EAEH;EACA,MAAM;IAAEE,IAAI,EAAEG;EAA2B,CAAC,GAAGX,gCAAgC,CAC3ES,UAAU,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,CAAC,EACjCT,SAAS,GAAGA,SAAS,CAAC,CAAC,CAAC,GAAGU,SAAS,CACrC;;EAED;EACA,MAAM;IAAEP,IAAI,EAAEQ;EAAiC,CAAC,GAC9ChB,gCAAgC,CAACS,UAAU,CAACG,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,CAAC,CAAC;EAErE,MAAMG,uBAAuB,GAAGR,UAAU,CAACG,GAAG,CAAEC,IAAI,KAAM;IACxD,GAAGA,IAAI;IACPK,aAAa,EAAEpB,iBAAiB,CAC9Ba,0BAA0B,CAACE,IAAI,CAACC,EAAE,CAAC,EACnCT,SAAS,CACV;IACDc,mBAAmB,EAAEH,gCAAgC,CAACH,IAAI,CAACC,EAAE;EAC/D,CAAC,CAAC,CAAC;EAEH,OAAO;IACLN,IAAI,EAAES,uBAAuB;IAC7B,GAAGP;EACL,CAAC;AACH,CAAC;AAAC,GAjDWT,yCAAyC;EAAA,QAgBlDF,wCAAwC,EAWGC,gCAAgC,EAO3EA,gCAAgC;AAAA"},"metadata":{},"sourceType":"module"}