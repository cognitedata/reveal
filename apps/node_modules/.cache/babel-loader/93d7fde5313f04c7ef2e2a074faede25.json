{"ast":null,"code":"var _jsxFileName = \"/Volumes/csvol/fusion/libs/shared/plotting-components/src/TimeseriesChart/TimeseriesChart.tsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport { useEffect, useMemo, useState } from 'react';\nimport difference from 'lodash/difference';\nimport { DateRangePicker } from './components/DateRangePicker';\nimport { OpenInChartsButton } from './components/OpenInChartsButton';\nimport { TimePeriods } from './components/TimePeriods';\nimport { TimePeriodSelect } from './components/TimePeriodSelect';\nimport { TIME_PERIOD_OPTIONS } from './constants';\nimport { useTimeseriesChartData } from './domain/internal/hooks/useTimeseriesChartData';\nimport { formatDateRangeForAxis } from './utils/formatDateRangeForAxis';\nimport { getChartByVariant } from './utils/getChartByVariant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TimeseriesChart = ({\n  timeseriesId,\n  variant = 'large',\n  numberOfPoints,\n  quickTimePeriodOptions = [],\n  dateRange: dateRangeProp,\n  height,\n  dataFetchOptions,\n  autoRange,\n  onChangeTimePeriod,\n  onChangeDateRange,\n  hideActions,\n  styles\n}) => {\n  _s();\n  const [selectedTimePeriod, setSelectedTimePeriod] = useState();\n  const [dateRange, setDateRange] = useState(dateRangeProp);\n  const {\n    data,\n    metadata,\n    isLoading\n  } = useTimeseriesChartData({\n    query: {\n      timeseriesId,\n      dateRange,\n      numberOfPoints\n    },\n    dataFetchOptions\n  });\n  const timePeriodSelectOptions = useMemo(() => {\n    return difference(TIME_PERIOD_OPTIONS, quickTimePeriodOptions);\n  }, [quickTimePeriodOptions]);\n  const chartRange = useMemo(() => {\n    if (autoRange || !dateRange) {\n      return undefined;\n    }\n    return {\n      x: formatDateRangeForAxis(dateRange)\n    };\n  }, [autoRange, dateRange]);\n  const handleChangeTimePeriod = props => {\n    setSelectedTimePeriod(props.timePeriod);\n    setDateRange(props.dateRange);\n    onChangeTimePeriod?.(props);\n  };\n  const handleChangeDateRange = newDateRange => {\n    setSelectedTimePeriod(undefined);\n    setDateRange(newDateRange);\n    onChangeDateRange?.(newDateRange);\n  };\n  const handleRangeChange = range => {\n    const [from, to] = range.x;\n    setSelectedTimePeriod(undefined);\n    setDateRange([new Date(from), new Date(to)]);\n  };\n  useEffect(() => {\n    setSelectedTimePeriod(undefined);\n    setDateRange(dateRangeProp);\n  }, [dateRangeProp, timeseriesId]);\n  const Chart = getChartByVariant(variant);\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    data: data,\n    metadata: metadata,\n    dataRevision: timeseriesId,\n    isLoading: isLoading,\n    range: chartRange,\n    style: {\n      height,\n      ...styles\n    },\n    onRangeChange: handleRangeChange,\n    renderFilters: () => [/*#__PURE__*/_jsxDEV(TimePeriods, {\n      options: quickTimePeriodOptions,\n      value: selectedTimePeriod,\n      onChange: handleChangeTimePeriod\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TimePeriodSelect, {\n      options: timePeriodSelectOptions,\n      value: selectedTimePeriod,\n      onChange: handleChangeTimePeriod\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DateRangePicker, {\n      value: dateRange,\n      onChange: handleChangeDateRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this)],\n    renderActions: hideActions ? undefined : () => [/*#__PURE__*/_jsxDEV(OpenInChartsButton, {\n      timeseriesId: timeseriesId,\n      dateRange: dateRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }, this)]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(TimeseriesChart, \"ib6lGqUaoS+fVF19eR3SCqUh3U0=\", false, function () {\n  return [useTimeseriesChartData];\n});\n_c = TimeseriesChart;\nvar _c;\n$RefreshReg$(_c, \"TimeseriesChart\");","map":{"version":3,"names":["React","useEffect","useMemo","useState","difference","DateRangePicker","OpenInChartsButton","TimePeriods","TimePeriodSelect","TIME_PERIOD_OPTIONS","useTimeseriesChartData","formatDateRangeForAxis","getChartByVariant","TimeseriesChart","timeseriesId","variant","numberOfPoints","quickTimePeriodOptions","dateRange","dateRangeProp","height","dataFetchOptions","autoRange","onChangeTimePeriod","onChangeDateRange","hideActions","styles","selectedTimePeriod","setSelectedTimePeriod","setDateRange","data","metadata","isLoading","query","timePeriodSelectOptions","chartRange","undefined","x","handleChangeTimePeriod","props","timePeriod","handleChangeDateRange","newDateRange","handleRangeChange","range","from","to","Date","Chart"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/TimeseriesChart/TimeseriesChart.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport difference from 'lodash/difference';\n\nimport { PlotRange } from '../LineChart';\n\nimport { DateRangePicker } from './components/DateRangePicker';\nimport { OpenInChartsButton } from './components/OpenInChartsButton';\nimport { TimePeriods } from './components/TimePeriods';\nimport { TimePeriodSelect } from './components/TimePeriodSelect';\nimport { TIME_PERIOD_OPTIONS } from './constants';\nimport { useTimeseriesChartData } from './domain/internal/hooks/useTimeseriesChartData';\nimport {\n  DateRange,\n  TimePeriod,\n  TimeseriesChartProps,\n  UpdateTimePeriodProps,\n} from './types';\nimport { formatDateRangeForAxis } from './utils/formatDateRangeForAxis';\nimport { getChartByVariant } from './utils/getChartByVariant';\n\nexport const TimeseriesChart: React.FC<TimeseriesChartProps> = ({\n  timeseriesId,\n  variant = 'large',\n  numberOfPoints,\n  quickTimePeriodOptions = [],\n  dateRange: dateRangeProp,\n  height,\n  dataFetchOptions,\n  autoRange,\n  onChangeTimePeriod,\n  onChangeDateRange,\n  hideActions,\n  styles,\n}) => {\n  const [selectedTimePeriod, setSelectedTimePeriod] = useState<TimePeriod>();\n  const [dateRange, setDateRange] = useState<DateRange | undefined>(\n    dateRangeProp\n  );\n\n  const { data, metadata, isLoading } = useTimeseriesChartData({\n    query: {\n      timeseriesId,\n      dateRange,\n      numberOfPoints,\n    },\n    dataFetchOptions,\n  });\n\n  const timePeriodSelectOptions = useMemo(() => {\n    return difference(TIME_PERIOD_OPTIONS, quickTimePeriodOptions);\n  }, [quickTimePeriodOptions]);\n\n  const chartRange = useMemo(() => {\n    if (autoRange || !dateRange) {\n      return undefined;\n    }\n    return {\n      x: formatDateRangeForAxis(dateRange),\n    };\n  }, [autoRange, dateRange]);\n\n  const handleChangeTimePeriod = (props: UpdateTimePeriodProps) => {\n    setSelectedTimePeriod(props.timePeriod);\n    setDateRange(props.dateRange);\n    onChangeTimePeriod?.(props);\n  };\n\n  const handleChangeDateRange = (newDateRange: DateRange) => {\n    setSelectedTimePeriod(undefined);\n    setDateRange(newDateRange);\n    onChangeDateRange?.(newDateRange);\n  };\n\n  const handleRangeChange = (range: PlotRange) => {\n    const [from, to] = range.x;\n    setSelectedTimePeriod(undefined);\n    setDateRange([new Date(from), new Date(to)]);\n  };\n\n  useEffect(() => {\n    setSelectedTimePeriod(undefined);\n    setDateRange(dateRangeProp);\n  }, [dateRangeProp, timeseriesId]);\n\n  const Chart = getChartByVariant(variant);\n\n  return (\n    <Chart\n      data={data}\n      metadata={metadata}\n      dataRevision={timeseriesId}\n      isLoading={isLoading}\n      range={chartRange}\n      style={{ height, ...styles }}\n      onRangeChange={handleRangeChange}\n      renderFilters={() => [\n        <TimePeriods\n          options={quickTimePeriodOptions}\n          value={selectedTimePeriod}\n          onChange={handleChangeTimePeriod}\n        />,\n        <TimePeriodSelect\n          options={timePeriodSelectOptions}\n          value={selectedTimePeriod}\n          onChange={handleChangeTimePeriod}\n        />,\n        <DateRangePicker value={dateRange} onChange={handleChangeDateRange} />,\n      ]}\n      renderActions={\n        hideActions\n          ? undefined\n          : () => [\n              <OpenInChartsButton\n                timeseriesId={timeseriesId}\n                dateRange={dateRange}\n              />,\n            ]\n      }\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}