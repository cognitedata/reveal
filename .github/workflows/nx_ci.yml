name: NX - CI
on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  NX_CLOUD_ACCESS_TOKEN: ${{secrets.NX_CLOUD_ACCESS_TOKEN}}
  NX_VERBOSE_LOGGING: true

jobs:
  setup:
    name: 'Setup'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          # any jobs using the cache need to use the same path since path is considered
          # part of the key
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}
          restore-keys: cache-node-modules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_READONLY_TOKEN }}

      - run: git fetch --no-tags --prune --depth=1 origin ${{ github.base_ref }}

      - name: 'Get affected libs to build'
        id: affected-libs
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          projects: 'libs/**'

      - name: 'Get affected apps to build'
        id: affected-apps
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          projects: 'apps/**'
          exclude: '*shell'

      - name: 'Get affected shell apps to build'
        id: affected-shell-apps
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          projects: '*shell'

      - name: 'Get affected projects for lint'
        id: affected-lint
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          target: 'lint'

      - name: 'Get affected projects for test'
        id: affected-test
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          target: 'test'

      - name: 'Get affected projects for e2e'
        id: affected-e2e
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          target: 'e2e'
          # fusion-shell-e2e and platypus-cdf-cli run in their own jobs
          # the other excluded apps need additional work to successfully run
          exclude: 'fusion-shell, platypus-cdf-cli, data-exploration-e2e'

      - name: 'Get affected storybook projects to build'
        id: affected-storybook
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          target: 'build-storybook'

      - name: 'Get affected storybook projects to test'
        id: affected-test-storybook
        uses: './scripts/github-actions/nx-get-affected'
        with:
          base: origin/${{ github.base_ref }}
          target: 'test-storybook'

    outputs:
      affected-libs: ${{ steps.affected-libs.outputs.projects }}
      affected-libs-string: ${{ steps.affected-libs.outputs.projectsString }}
      affected-lint: ${{ steps.affected-lint.outputs.projects }}
      affected-lint-string: ${{ steps.affected-lint.outputs.projectsString }}
      affected-test: ${{ steps.affected-test.outputs.projects }}
      affected-test-string: ${{ steps.affected-test.outputs.projectsString }}
      affected-apps: ${{ steps.affected-apps.outputs.projects }}
      affected-shell-apps: ${{ steps.affected-shell-apps.outputs.projects }}
      affected-e2e: ${{ steps.affected-e2e.outputs.projects }}
      affected-storybook: ${{ steps.affected-storybook.outputs.projects }}
      affected-test-storybook: ${{ steps.affected-test-storybook.outputs.projects }}

  lint:
    name: 'Lint'
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.affected-lint != '' && toJson(fromJson(needs.setup.outputs.affected-lint)) != '[]' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Lint
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
        run: npx nx run-many --target=lint --parallel --nx-bail --projects ${{ needs.setup.outputs.affected-lint-string }}

  test:
    name: 'Test'
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ needs.setup.outputs.affected-test != '' && toJson(fromJson(needs.setup.outputs.affected-test)) != '[]' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Test
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
        run: npx nx run-many --target=test --parallel --nx-bail --projects ${{ needs.setup.outputs.affected-test-string }}

  build-libs:
    name: 'Build libs'
    runs-on: ubuntu-latest-m
    needs: setup
    if: ${{ needs.setup.outputs.affected-libs != '' && toJson(fromJson(needs.setup.outputs.affected-libs)) != '[]' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
          NODE_ENV: production
        run: npx nx run-many --target=build --parallel --nx-bail --configuration=production --projects ${{ needs.setup.outputs.affected-libs-string }}

  build:
    name: Build
    runs-on: ubuntu-20.04
    needs: [setup, build-libs]
    if: ${{ !cancelled() && !failure() && needs.build-libs.result != 'failure' && needs.build-libs.result != 'cancelled' && needs.setup.outputs.affected-apps != '' && toJson(fromJson(needs.setup.outputs.affected-apps)) != '[]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-apps)  }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
          NODE_ENV: production
        run: npx nx run ${{ matrix.project }}:build:${{ matrix.project == 'platypus' && 'fusion' || 'production'}}

      - name: 'Authenticate to google cloud'
        id: 'google-auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCS_JSON_KEY }}'

      - name: 'Upload to preview server'
        id: 'upload-preview'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: 'dist/apps/${{ matrix.project }}'
          destination: 'opint-pr-server/fusion-preview/${{matrix.project}}-${{github.event.number}}'
          parent: false

  build-shell:
    name: 'Build shell apps'
    runs-on: ubuntu-20.04
    needs: [setup, build]
    if: ${{ !cancelled() && !failure() && needs.setup.outputs.affected-shell-apps != '' && toJson(fromJson(needs.setup.outputs.affected-shell-apps)) != '[]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-shell-apps)  }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Get deploy environment
        id: deploy-environment
        uses: ./scripts/github-actions/get-deploy-environment
        with:
          project: ${{ matrix.project }}
          branch: ${{ github.ref_name }}

      - name: Build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
          NODE_ENV: production
        run: npx nx run ${{ matrix.project }}:build:${{ steps.deploy-environment.outputs.environment }}

      - name: 'Authenticate to google cloud'
        id: 'google-auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCS_JSON_KEY }}'

      - name: 'Upload to preview server'
        id: 'upload-preview'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: 'dist/apps/${{ matrix.project }}'
          destination: 'opint-pr-server/fusion-preview/${{matrix.project}}-${{github.event.number}}'
          parent: false

  build-storybook:
    name: Build storybook
    runs-on: ubuntu-20.04
    if: ${{ needs.setup.outputs.affected-storybook != '' && toJson(fromJson(needs.setup.outputs.affected-storybook)) != '[]' }}
    needs: setup
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-storybook)  }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
          NODE_ENV: production
        run: npx nx run ${{ matrix.project }}:build-storybook

      - name: 'Authenticate to google cloud'
        id: 'google-auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCS_JSON_KEY }}'

      - name: 'Upload to preview server'
        id: 'upload-preview'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: 'dist/storybook/${{ matrix.project }}'
          destination: 'opint-pr-server/fusion-preview/storybook-${{matrix.project}}-${{github.event.number}}'
          parent: false

  test-storybook:
    name: Test storybook
    runs-on: ubuntu-20.04
    if: ${{ needs.setup.outputs.affected-test-storybook != '' && toJson(fromJson(needs.setup.outputs.affected-test-storybook)) != '[]' }}
    needs: setup
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-test-storybook)  }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Install playwright
        run: npx playwright install

      - name: Test
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
          NODE_ENV: production
        run: |
          npx concurrently -k -s first -n "STORYBOOK,TEST" -c "magenta,blue" \
            "npx nx run ${{ matrix.project }}:static-storybook" \
            "npx wait-on http://localhost:4400 && npx nx run ${{ matrix.project }}:test-storybook"

  build-preview-comment:
    name: Comment build previews
    runs-on: ubuntu-20.04
    needs: [setup, build]
    if: ${{ !cancelled() && !failure() && needs.build.result != 'failure' && needs.build.result != 'cancelled' && needs.setup.outputs.affected-apps != '' && toJson(fromJson(needs.setup.outputs.affected-apps)) != '[]' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Get comment message
        id: get-comment
        uses: './scripts/github-actions/get-pr-comment'
        with:
          prNumber: ${{ github.event.number }}
          affected: ${{ needs.setup.outputs.affected-apps }}

      - name: Find previous comment
        uses: peter-evans/find-comment@v2
        id: storybook-comment
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## Build previews:'

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.storybook-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: ${{ steps.get-comment.outputs.message }}
          edit-mode: replace
          reactions: rocket

  build-shell-preview-comment:
    name: Comment build shell previews
    runs-on: ubuntu-20.04
    needs: [setup, build-shell]
    if: ${{ !cancelled() && !failure() && needs.build-shell.result != 'failure' && needs.build-shell.result != 'cancelled' && needs.setup.outputs.affected-shell-apps != '' && toJson(fromJson(needs.setup.outputs.affected-shell-apps)) != '[]' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Get comment message
        id: get-comment
        uses: './scripts/github-actions/get-pr-comment'
        with:
          prNumber: ${{ github.event.number }}
          affected: ${{ needs.setup.outputs.affected-shell-apps }}
          shell: true

      - name: Find previous comment
        uses: peter-evans/find-comment@v2
        id: storybook-comment
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## Build previews for shells:'

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.storybook-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: ${{ steps.get-comment.outputs.message }}
          edit-mode: replace
          reactions: rocket

  storybook-preview-comment:
    name: Comment storybook previews
    runs-on: ubuntu-20.04
    needs: [setup, build-storybook]
    if: ${{ !cancelled() && !failure() && needs.build-storybook.result != 'failure' && needs.build-storybook.result != 'cancelled' && needs.setup.outputs.affected-storybook != '' && toJson(fromJson(needs.setup.outputs.affected-storybook)) != '[]' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Get comment message
        id: get-comment
        uses: './scripts/github-actions/get-pr-comment'
        with:
          storybook: true
          prNumber: ${{ github.event.number }}
          affected: ${{ needs.setup.outputs.affected-storybook }}

      - name: Find previous comment
        uses: peter-evans/find-comment@v2
        id: storybook-comment
        with:
          issue-number: ${{ github.event.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '## Storybook previews:'

      - name: Create or update comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.storybook-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: ${{ steps.get-comment.outputs.message }}
          edit-mode: replace
          reactions: rocket

  fusion-shell-e2e:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: ${{ !cancelled() && !failure() && ((needs.setup.outputs.affected-shell-apps != '' && toJson(fromJson(needs.setup.outputs.affected-shell-apps)) != '[]') || (needs.setup.outputs.affected-apps != '' && toJson(fromJson(needs.setup.outputs.affected-apps)) != '[]')) }}
    strategy:
      matrix:
        configuration: ['e2e']
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Cypress run
        uses: cypress-io/github-action@v4.2.2
        # let's give this action an ID so we can refer
        # to its output values later
        id: cypress
        # Continue the build in case of an error, as we need to set the
        # commit status in the next step, both in case of success and failure
        continue-on-error: false
        env:
          AFFECTED_APPS: ${{ needs.setup.outputs.affected-apps }}
          PULL_REQUEST_NUMBER: ${{ github.event.number }}
          CYPRESS_FUSION_SHELL_E2E_AAD_PASSWORD: ${{ secrets.CYPRESS_FUSION_SHELL_E2E_AAD_PASSWORD }}
          NODE_OPTIONS: '--max_old_space_size=8192'
        # execute Cypress using a custom test command
        with:
          # let's make sure our tests pass on Chrome browser
          browser: chrome
          # Run the cypress tests
          command: yarn nx run fusion-shell:e2e:ci --skip-nx-cache

      - name: Upload cypress artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-snapshots
          path: dist/cypress/apps/fusion-shell

  e2e:
    runs-on: ubuntu-latest-m
    needs: setup
    if: ${{ needs.setup.outputs.affected-e2e != '' && toJson(fromJson(needs.setup.outputs.affected-e2e)) != '[]' }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-e2e) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/Cypress
          key: cache-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Cypress run
        uses: cypress-io/github-action@v4.2.2
        id: cypress
        env:
          CLIENT_ID: ${{ secrets.DATA_EXPLORER_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.DATA_EXPLORER_CLIENT_SECRET }}
          NODE_OPTIONS: '--max_old_space_size=8192'

          FDX_CLIENT_ID: ${{ secrets.COG_DEMO_CLIENT_ID }}
          FDX_CLIENT_SECRET: ${{ secrets.COG_DEMO_CLIENT_SECRET }}

          # used in simint
          CLIENT_ID_CHARTS_AZUREDEV: ${{ secrets.CLIENT_ID_CHARTS_AZUREDEV }}
          CLIENT_SECRET_CHARTS_AZUREDEV: ${{ secrets.CLIENT_SECRET_CHARTS_AZUREDEV }}

          CLIENT_SECRET_AZURE_DATA_ENABLERS_TEST: ${{ secrets.CLIENT_SECRET_AZURE_DATA_ENABLERS_TEST }}

          COG_E2E_AAD_USERNAME_1: ${{ secrets.COG_E2E_AAD_USERNAME_1 }}
          COG_E2E_AAD_PASSWORD_1: ${{ secrets.COG_E2E_AAD_PASSWORD_1 }}

          # needed for error with self signed certificate:
          # https://github.com/cypress-io/github-action/issues/154#issuecomment-693719925
          NODE_TLS_REJECT_UNAUTHORIZED: 0

        with:
          browser: chrome
          # start the shell and wait for it to be ready
          start: |
            yarn nx run fusion-shell:preview:production
            yarn nx serve mock-server
          wait-on: 'https://local.cognite.ai:4200, http://localhost:4002'
          wait-on-timeout: 300
          # run the e2e test target for the given project
          command: yarn nx run ${{ matrix.project }}:e2e:ci

      - name: Upload cypress artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.project }}-failed-cypress-tests-recordings
          path: dist/cypress/apps/${{ matrix.project }}/videos
          if-no-files-found: ignore # 'warn' or 'error' are also available, defaults to `warn`

  ci-passed:
    # see https://github.community/t/status-check-for-a-matrix-jobs/127354/7
    name: CI Passed
    needs:
      [
        setup,
        build-libs,
        build,
        build-shell,
        lint,
        test,
        build-storybook,
        fusion-shell-e2e,
      ]
    if: ${{ always() }}
    runs-on: ubuntu-20.04
    steps:
      - name: Check all job status
        # see https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#needs-context
        # see https://stackoverflow.com/a/67532120/4907315
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
          }}
        run: exit 1
#  e2e:
#    runs-on: ubuntu-latest
#    needs: distributed-task
#    services:
#      fusion-app-test:
#        image: eu.gcr.io/cognitedata/fusion-app/dev
#        credentials:
#          username: _json_key
#          password: ${{ secrets.GCR_ACTIONS_READONLY_JSON_KEY }}
#        ports:
#          - 8080:8080
#        options: --name fusion-app-test
#    strategy:
#      matrix:
#        target: ['e2e']
#        jobIndex: [1]
#    env:
#      jobCount: 1
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - uses: actions/setup-node@v3
#        with:
#          node-version: '18'
#
#      - name: Cache node modules
#        uses: actions/cache@v3
#        with:
#          path: |
#            node_modules
#            ~/.cache/Cypress
#          key: cache-node-modules-${{ hashFiles('yarn.lock') }}
#
#      - run: git fetch --no-tags --prune --depth=1 origin ${{ github.base_ref }}
#      - name: Derive appropriate SHAs for base and head for `nx affected` commands
#        uses: nrwl/nx-set-shas@v3
#        with:
#          main-branch-name: ${{ github.base_ref }}
#
#      - name: Override nginx config
#        run: |
#          docker cp ./nginx.conf fusion-app-test:/etc/nginx/conf.d/default.conf
#          docker exec -u 0 fusion-app-test nginx -s reload
#
#      - name: Download the build folders
#        uses: actions/download-artifact@v3
#        with:
#          name: build
#          path: dist
#
#      - name: Start local HTTP server to host built apps
#        run: yarn serve dist/apps -p 3010 --cors &
#        id: serve
#
#      - name: Cypress run
#        uses: cypress-io/github-action@v4.2.2
#        id: cypress
#        continue-on-error: false
#        env:
#          PROJECT: ${{ secrets.CLI_E2E_PROJECT }}
#          TENANT: ${{ secrets.CLI_E2E_TENANT }}
#          CLUSTER: ${{ secrets.CLI_E2E_CLUSTER }}
#          CLIENT_ID: ${{ secrets.CLI_E2E_CLIENT_ID }}
#          CLIENT_SECRET: ${{ secrets.CLI_E2E_CLIENT_SECRET }}
#          DATA_EXPLORER_CLIENT_ID: ${{ secrets.DATA_EXPLORER_CLIENT_ID }}
#          DATA_EXPLORER_CLIENT_SECRET: ${{ secrets.DATA_EXPLORER_CLIENT_SECRET }}
#          TESTING_BASE_URL: http://localhost:4002
#        with:
#          command: node ./scripts/run-many.js ${{ matrix.target }} ${{ matrix.jobIndex }} ${{ env.jobCount }} ${{ env.NX_BASE }} ${{ env.NX_HEAD }} ${{ secrets.CODECOV_TOKEN }} ${{github.base_ref}}
#
#      - name: Stop HTTP server
#        if: always()
#        run: kill $(lsof -t -i :3010)

