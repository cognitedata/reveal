{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Volumes/csvol/fusion/libs/copilot-core/src/lib/types.ts"],"sourcesContent":["export type CopilotSupportedFeatureType = 'Streamlit' | 'IndustryCanvas';\n\ntype DefaultMessage = {\n  actions?: CopilotAction[];\n};\n\nexport type CopilotTextMessage = {\n  type: 'text';\n  content: string;\n} & DefaultMessage;\n\nexport type CopilotCodeMessage = {\n  type: 'code';\n  content: string;\n  prevContent?: string;\n  highlightLines?: [number, number][]; // [start, end]\n  language: 'python';\n} & DefaultMessage;\n\nexport type CopilotUserMessage = CopilotTextMessage;\nexport type CopilotBotMessage = CopilotTextMessage | CopilotCodeMessage;\n\nexport type CopilotMessage =\n  | (CopilotUserMessage & { source: 'user' })\n  | (CopilotBotMessage & {\n      source: 'bot';\n    });\n\nexport type CopilotAction = { onClick: () => void; content: string };\n\n/**\n * @returns whether to accept more inputs\n */\nexport type ProcessMessageFunc = (\n  message: string,\n  pastMessages: CopilotMessage[],\n  sendMessage: (message: CopilotBotMessage) => Promise<void>\n) => Promise<boolean>;\n\n/**\n * @returns a list of actions to present to users\n */\nexport type GetActionsFunc = (\n  pastMessages: CopilotMessage[],\n  sendMessage: (message: CopilotBotMessage) => Promise<void>\n) => Promise<CopilotAction[]>;\n\nexport interface CopilotEvents {\n  FromCopilot: { [key in string]: unknown };\n  ToCopilot: { [key in string]: unknown };\n}\n"],"mappings":""},"metadata":{},"sourceType":"module"}