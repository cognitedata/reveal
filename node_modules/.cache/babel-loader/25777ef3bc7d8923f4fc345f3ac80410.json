{"ast":null,"code":"export const post = (sdk, path, data) => sdk.post(`/api/v1/projects/${sdk.project}${path}`, {\n  data\n}).then(response => response.data);\n\n/**\n * The aggregate APIs are a bit strange, filtering on irrelevant data\n * set ids results in { items: [{ count: 0 }]} and invalid data set\n * ids results in { items: [] }.\n */\nexport const aggregateApi = (sdk, type, filter) => post(sdk, `/${type}/aggregate`, {\n  filter\n}).then(data => data?.items[0] || {\n  count: 0\n});\nexport const listApi = (sdk, type, body) => post(sdk, `/${type}/list`, body).then(data => data?.items);\nconst getSearchArgs = (type, query) => {\n  switch (type) {\n    case 'files':\n      return {\n        name: query\n      };\n    case 'events':\n      return {\n        description: query\n      };\n    default:\n      return {\n        query\n      };\n  }\n};\nexport const searchApi = (sdk, type, query, body) => {\n  return post(sdk, `/${type}/search`, {\n    ...body,\n    search: getSearchArgs(type, query)\n  }).then(r => r?.items);\n};","map":{"version":3,"names":["post","sdk","path","data","project","then","response","aggregateApi","type","filter","items","count","listApi","body","getSearchArgs","query","name","description","searchApi","search","r"],"sources":["/Volumes/csvol/fusion/libs/shared/cdf-sdk-react-query-hooks/src/api.ts"],"sourcesContent":["import { AggregateResponse, CogniteClient } from '@cognite/sdk';\n\nimport { SdkResourceType } from './hooks';\n\nexport const post = (sdk: CogniteClient, path: string, data: any) =>\n  sdk\n    .post(`/api/v1/projects/${sdk.project}${path}`, { data })\n    .then((response) => response.data);\n\n/**\n * The aggregate APIs are a bit strange, filtering on irrelevant data\n * set ids results in { items: [{ count: 0 }]} and invalid data set\n * ids results in { items: [] }.\n */\nexport const aggregateApi = (\n  sdk: CogniteClient,\n  type: SdkResourceType,\n  filter: any\n): Promise<AggregateResponse> =>\n  post(sdk, `/${type}/aggregate`, { filter }).then(\n    (data) => data?.items[0] || { count: 0 }\n  );\n\nexport const listApi = (sdk: CogniteClient, type: SdkResourceType, body: any) =>\n  post(sdk, `/${type}/list`, body).then((data) => data?.items);\n\nconst getSearchArgs = (type: SdkResourceType, query: string) => {\n  switch (type) {\n    case 'files':\n      return { name: query };\n    case 'events':\n      return { description: query };\n    default:\n      return { query };\n  }\n};\nexport const searchApi = <T>(\n  sdk: CogniteClient,\n  type: SdkResourceType,\n  query: string,\n  body?: any\n): Promise<T[]> => {\n  return post(sdk, `/${type}/search`, {\n    ...body,\n    search: getSearchArgs(type, query),\n  }).then((r) => r?.items);\n};\n"],"mappings":"AAIA,OAAO,MAAMA,IAAI,GAAG,CAACC,GAAkB,EAAEC,IAAY,EAAEC,IAAS,KAC9DF,GAAG,CACAD,IAAI,CAAE,oBAAmBC,GAAG,CAACG,OAAQ,GAAEF,IAAK,EAAC,EAAE;EAAEC;AAAK,CAAC,CAAC,CACxDE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACH,IAAI,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAG,CAC1BN,GAAkB,EAClBO,IAAqB,EACrBC,MAAW,KAEXT,IAAI,CAACC,GAAG,EAAG,IAAGO,IAAK,YAAW,EAAE;EAAEC;AAAO,CAAC,CAAC,CAACJ,IAAI,CAC7CF,IAAI,IAAKA,IAAI,EAAEO,KAAK,CAAC,CAAC,CAAC,IAAI;EAAEC,KAAK,EAAE;AAAE,CAAC,CACzC;AAEH,OAAO,MAAMC,OAAO,GAAG,CAACX,GAAkB,EAAEO,IAAqB,EAAEK,IAAS,KAC1Eb,IAAI,CAACC,GAAG,EAAG,IAAGO,IAAK,OAAM,EAAEK,IAAI,CAAC,CAACR,IAAI,CAAEF,IAAI,IAAKA,IAAI,EAAEO,KAAK,CAAC;AAE9D,MAAMI,aAAa,GAAG,CAACN,IAAqB,EAAEO,KAAa,KAAK;EAC9D,QAAQP,IAAI;IACV,KAAK,OAAO;MACV,OAAO;QAAEQ,IAAI,EAAED;MAAM,CAAC;IACxB,KAAK,QAAQ;MACX,OAAO;QAAEE,WAAW,EAAEF;MAAM,CAAC;IAC/B;MACE,OAAO;QAAEA;MAAM,CAAC;EAAC;AAEvB,CAAC;AACD,OAAO,MAAMG,SAAS,GAAG,CACvBjB,GAAkB,EAClBO,IAAqB,EACrBO,KAAa,EACbF,IAAU,KACO;EACjB,OAAOb,IAAI,CAACC,GAAG,EAAG,IAAGO,IAAK,SAAQ,EAAE;IAClC,GAAGK,IAAI;IACPM,MAAM,EAAEL,aAAa,CAACN,IAAI,EAAEO,KAAK;EACnC,CAAC,CAAC,CAACV,IAAI,CAAEe,CAAC,IAAKA,CAAC,EAAEV,KAAK,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module"}