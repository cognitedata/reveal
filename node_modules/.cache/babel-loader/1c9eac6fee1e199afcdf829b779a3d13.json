{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport isEqual from 'lodash/isEqual';\nimport { useDeepEffect } from './useDeep';\nexport const usePlotDataRangeInitial = ({\n  plotDataRange,\n  dataRevision\n}) => {\n  _s();\n  const [signal, setSignal] = useState(true);\n  const [initialRange, setInitialRange] = useState();\n  useEffect(() => {\n    setSignal(true);\n  }, [dataRevision]);\n\n  /**\n   * This side-effect should be executed only when,\n   * signal is `true` AND `plotDataRange` is changed.\n   * That's why the deep equality is checked below.\n   */\n  useDeepEffect(() => {\n    if (signal && plotDataRange && !isEqual(initialRange, plotDataRange)) {\n      setInitialRange(plotDataRange);\n      setSignal(false);\n    }\n  }, [signal, plotDataRange]);\n  return initialRange;\n};\n_s(usePlotDataRangeInitial, \"sEXKunhcLm7qamtddd4LxSJ9dyg=\", false, function () {\n  return [useDeepEffect];\n});","map":{"version":3,"names":["useEffect","useState","isEqual","useDeepEffect","usePlotDataRangeInitial","plotDataRange","dataRevision","signal","setSignal","initialRange","setInitialRange"],"sources":["/Volumes/csvol/fusion/libs/shared/plotting-components/src/LineChart/hooks/usePlotDataRangeInitial.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport isEqual from 'lodash/isEqual';\n\nimport { PlotRange } from '../types';\n\nimport { useDeepEffect } from './useDeep';\n\ninterface Props {\n  plotDataRange?: PlotRange;\n  dataRevision?: number | string;\n}\n\nexport const usePlotDataRangeInitial = ({\n  plotDataRange,\n  dataRevision,\n}: Props) => {\n  const [signal, setSignal] = useState(true);\n  const [initialRange, setInitialRange] = useState<PlotRange>();\n\n  useEffect(() => {\n    setSignal(true);\n  }, [dataRevision]);\n\n  /**\n   * This side-effect should be executed only when,\n   * signal is `true` AND `plotDataRange` is changed.\n   * That's why the deep equality is checked below.\n   */\n  useDeepEffect(() => {\n    if (signal && plotDataRange && !isEqual(initialRange, plotDataRange)) {\n      setInitialRange(plotDataRange);\n      setSignal(false);\n    }\n  }, [signal, plotDataRange]);\n\n  return initialRange;\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,OAAO,MAAM,gBAAgB;AAIpC,SAASC,aAAa,QAAQ,WAAW;AAOzC,OAAO,MAAMC,uBAAuB,GAAG,CAAC;EACtCC,aAAa;EACbC;AACK,CAAC,KAAK;EAAA;EACX,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,EAAa;EAE7DD,SAAS,CAAC,MAAM;IACdQ,SAAS,CAAC,IAAI,CAAC;EACjB,CAAC,EAAE,CAACF,YAAY,CAAC,CAAC;;EAElB;AACF;AACA;AACA;AACA;EACEH,aAAa,CAAC,MAAM;IAClB,IAAII,MAAM,IAAIF,aAAa,IAAI,CAACH,OAAO,CAACO,YAAY,EAAEJ,aAAa,CAAC,EAAE;MACpEK,eAAe,CAACL,aAAa,CAAC;MAC9BG,SAAS,CAAC,KAAK,CAAC;IAClB;EACF,CAAC,EAAE,CAACD,MAAM,EAAEF,aAAa,CAAC,CAAC;EAE3B,OAAOI,YAAY;AACrB,CAAC;AAAC,GAxBWL,uBAAuB;EAAA,QAgBlCD,aAAa;AAAA"},"metadata":{},"sourceType":"module"}