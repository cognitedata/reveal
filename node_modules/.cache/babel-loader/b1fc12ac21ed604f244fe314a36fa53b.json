{"ast":null,"code":"import sdk from '@cognite/cdf-sdk-singleton';\nimport { getChatCompletions } from '@data-exploration-lib/domain-layer';\nimport { sendFromCopilotEvent, createToCopilotEventHandler, addToCopilotEventListener } from '../../utils';\nimport { StreamlitActions } from './getActions';\nexport const processMessageStreamlit = async (message, pastMessages, sendMessage) => {\n  // first message\n  if (!message) {\n    await sendMessage({\n      type: 'text',\n      content: 'I see you are working on a Streamlit app, what would you like assistance with?'\n    });\n    return true;\n  }\n  const mostRecentBotMessage = pastMessages.slice().reverse().find(el => el.source === 'bot');\n  if (\n  // todo fix this to be more robust\n  mostRecentBotMessage && mostRecentBotMessage.source === 'bot' && mostRecentBotMessage.type === 'text' && mostRecentBotMessage.content === 'What kind of app do you want to build?') {\n    await sendMessage({\n      type: 'text',\n      content: 'Generating app...'\n    });\n    const {\n      newCode,\n      oldCode\n    } = await generateNewApp(message);\n    await sendMessage({\n      type: 'code',\n      content: newCode,\n      prevContent: oldCode,\n      language: 'python',\n      actions: [{\n        content: 'Use code',\n        onClick: () => {\n          sendFromCopilotEvent('SEND_CODE', {\n            content: newCode\n          });\n        }\n      }]\n    });\n  } else {\n    await sendMessage({\n      type: 'text',\n      content: 'Seeing what you need help with...'\n    });\n    const action = await identifyProblem(pastMessages);\n    if (action === -1) {\n      await sendMessage({\n        type: 'text',\n        content: `We cannot help with that at the moment, do you want to try something else?`\n      });\n    } else if (action === 0) {\n      await sendMessage({\n        type: 'text',\n        content: `What kind of app do you want to build?`\n      });\n    }\n  }\n  return true;\n};\nconst generateNewApp = async query => {\n  let oldCode = undefined;\n  const removeEventListener = addToCopilotEventListener('GET_CODE_RESPONSE', createToCopilotEventHandler(event => {\n    removeEventListener();\n    oldCode = event.content;\n  }));\n  sendFromCopilotEvent('GET_CODE', null);\n  const response = await getChatCompletions({\n    messages: [{\n      role: 'user',\n      content: 'You are Cognite CoPilot, an industrial copilot. You will help write streamlit code with data being access from Cognite Data Fusion.'\n    }, {\n      role: 'user',\n      content: `\nYou should always start with the following\nimport streamlit as st\nfrom cognite.client import CogniteClient\nclient = CogniteClient()\n\nwhere all authentication is already fixed.\n\nSome examples on what is possible to do using the cognite sdk:\n\\`\\`\\`\nassets = client.assets.list(limit=50)\ntime_series = client.time_series.list(limit=100)\nassets = client.assets.search(name=\"21PT1019\")\ntime_series = client.time_series.search(name=\"21PT1019\")\n\\`\\`\\`\nTo get the data frame, you can always do\n\\`\\`\\`\ndf = client.assets.search(name=\"21PT1019\").to_pandas()\n\\`\\`\\`\nTo find time series for an asset and to plot it, you can do\n\\`\\`\\`\nassets = client.assets.search(name=\"21PT1019\")\n\\`\\`\\`\nTo receive and plot data points, you always have to do it like this\n\\`\\`\\`\nclient.time_series.data.retrieve(id=time_series_id, start=\"52w-ago\").to_pandas().plot()\n\\`\\`\\`\nWhen receiving data points, \"start\" and \"end\" must be on format <integer>(s|m|h|d|w)-ago or 'now', so \"1y-ago\" and \"1M-ago\" are NOT valid. Default to \"52w-ago\".\nOther things you can do is\n\\`\\`\\`\nevents = client.events.list(limit=50)\ntime_series = client.time_series.list(limit=50)\nfiles = client.files.list(limit=50)\n\\`\\`\\`\nwhere you can do same type of search as for assets. If you define the app inside an app() function, remember to call it at the end.\nIf you create a data frame, remember to do\n\\`\\`\\`\ndf = df.fillna(0)\n\\`\\`\\`\nto make sure we don't have problems with NaN values.\n`\n    }, {\n      role: 'user',\n      content: `Now give me Streamlit code that uses the Cognite Python SDK to answer the following: ${query}. Only give pure python code, nothing else.`\n    }],\n    temperature: 0.0,\n    maxTokens: 2048\n  }, sdk);\n  let code = response[0].message.content;\n  const start = code.indexOf('```python') + 9;\n  const length = code.lastIndexOf('```') - start;\n  code = code.substr(start, length);\n  return {\n    newCode: code,\n    oldCode\n  };\n};\nconst identifyProblem = async messages => {\n  const response = await getChatCompletions({\n    messages: [{\n      role: 'user',\n      content: 'CONTEXT:\\nYou are Cognite CoPilot, an industrial copilot. You will help write streamlit code with data being access from Cognite Data Fusion.'\n    }, {\n      role: 'user',\n      content: `CONTEXT:\\nYou have recieved this following sequence of messages in JSON array. The last message is the most recent message from the user, and the first message is what you send. \n\\`\\`\\`\n${JSON.stringify(messages)}\n\\`\\`\\`\nthe source of \"bot\" indicates previous messages from you, the CoPilot, the source \"user\" implies what the user wants. \n`\n    }, {\n      role: 'user',\n      content: `CONTEXT:\\nThese are all of the actions you can help with. \\n\\`Actions\\`:\n\\`\\`\\`\n${JSON.stringify(StreamlitActions)}\n\\`\\`\\`\n`\n    }, {\n      role: 'user',\n      content: `Question:\\nIdentify the array index in \\`Actions\\` where the user intent matches the action (0 is the first item in the array, 1 is second and etc.). \\nResponse Format:\\nReturn -1 if non of the actions solves the user intent. The user expects the Copilot (you) to answer with just the array index as a number - no explaination. Respond with only the array index, or -1, as a number wrapped in a code block. \\nExample:\\n\\`\\`\\`0\\`\\`\\``\n    }],\n    temperature: 0.0,\n    maxTokens: 2048\n  }, sdk);\n  let code = response[0].message.content;\n  const start = code.indexOf('```') + 3;\n  const length = code.lastIndexOf('```') - start;\n  code = code.substring(start, start + length);\n  return Number(code.trim());\n};","map":{"version":3,"names":["sdk","getChatCompletions","sendFromCopilotEvent","createToCopilotEventHandler","addToCopilotEventListener","StreamlitActions","processMessageStreamlit","message","pastMessages","sendMessage","type","content","mostRecentBotMessage","slice","reverse","find","el","source","newCode","oldCode","generateNewApp","prevContent","language","actions","onClick","action","identifyProblem","query","undefined","removeEventListener","event","response","messages","role","temperature","maxTokens","code","start","indexOf","length","lastIndexOf","substr","JSON","stringify","substring","Number","trim"],"sources":["/Volumes/csvol/fusion/libs/copilot-core/src/lib/features/streamlit/processMessage.ts"],"sourcesContent":["import sdk from '@cognite/cdf-sdk-singleton';\n\nimport { getChatCompletions } from '@data-exploration-lib/domain-layer';\n\nimport { CopilotMessage, ProcessMessageFunc } from '../../types';\nimport {\n  sendFromCopilotEvent,\n  createToCopilotEventHandler,\n  addToCopilotEventListener,\n} from '../../utils';\n\nimport { StreamlitEvents } from './communication';\nimport { StreamlitActions } from './getActions';\n\nexport const processMessageStreamlit: ProcessMessageFunc = async (\n  message,\n  pastMessages,\n  sendMessage\n) => {\n  // first message\n  if (!message) {\n    await sendMessage({\n      type: 'text',\n      content:\n        'I see you are working on a Streamlit app, what would you like assistance with?',\n    });\n    return true;\n  }\n  const mostRecentBotMessage = pastMessages\n    .slice()\n    .reverse()\n    .find((el) => el.source === 'bot');\n  if (\n    // todo fix this to be more robust\n    mostRecentBotMessage &&\n    mostRecentBotMessage.source === 'bot' &&\n    mostRecentBotMessage.type === 'text' &&\n    mostRecentBotMessage.content === 'What kind of app do you want to build?'\n  ) {\n    await sendMessage({\n      type: 'text',\n      content: 'Generating app...',\n    });\n    const { newCode, oldCode } = await generateNewApp(message);\n    await sendMessage({\n      type: 'code',\n      content: newCode,\n      prevContent: oldCode,\n      language: 'python',\n      actions: [\n        {\n          content: 'Use code',\n          onClick: () => {\n            sendFromCopilotEvent('SEND_CODE', {\n              content: newCode,\n            });\n          },\n        },\n      ],\n    });\n  } else {\n    await sendMessage({\n      type: 'text',\n      content: 'Seeing what you need help with...',\n    });\n\n    const action = await identifyProblem(pastMessages);\n    if (action === -1) {\n      await sendMessage({\n        type: 'text',\n        content: `We cannot help with that at the moment, do you want to try something else?`,\n      });\n    } else if (action === 0) {\n      await sendMessage({\n        type: 'text',\n        content: `What kind of app do you want to build?`,\n      });\n    }\n  }\n\n  return true;\n};\n\nconst generateNewApp = async (query: string) => {\n  let oldCode: string | undefined = undefined;\n\n  const removeEventListener = addToCopilotEventListener<StreamlitEvents>(\n    'GET_CODE_RESPONSE',\n    createToCopilotEventHandler<StreamlitEvents, 'GET_CODE_RESPONSE'>(\n      (event) => {\n        removeEventListener();\n        oldCode = event.content;\n      }\n    )\n  );\n  sendFromCopilotEvent<StreamlitEvents, 'GET_CODE'>('GET_CODE', null);\n\n  const response = await getChatCompletions(\n    {\n      messages: [\n        {\n          role: 'user',\n          content:\n            'You are Cognite CoPilot, an industrial copilot. You will help write streamlit code with data being access from Cognite Data Fusion.',\n        },\n        {\n          role: 'user',\n          content: `\nYou should always start with the following\nimport streamlit as st\nfrom cognite.client import CogniteClient\nclient = CogniteClient()\n\nwhere all authentication is already fixed.\n\nSome examples on what is possible to do using the cognite sdk:\n\\`\\`\\`\nassets = client.assets.list(limit=50)\ntime_series = client.time_series.list(limit=100)\nassets = client.assets.search(name=\"21PT1019\")\ntime_series = client.time_series.search(name=\"21PT1019\")\n\\`\\`\\`\nTo get the data frame, you can always do\n\\`\\`\\`\ndf = client.assets.search(name=\"21PT1019\").to_pandas()\n\\`\\`\\`\nTo find time series for an asset and to plot it, you can do\n\\`\\`\\`\nassets = client.assets.search(name=\"21PT1019\")\n\\`\\`\\`\nTo receive and plot data points, you always have to do it like this\n\\`\\`\\`\nclient.time_series.data.retrieve(id=time_series_id, start=\"52w-ago\").to_pandas().plot()\n\\`\\`\\`\nWhen receiving data points, \"start\" and \"end\" must be on format <integer>(s|m|h|d|w)-ago or 'now', so \"1y-ago\" and \"1M-ago\" are NOT valid. Default to \"52w-ago\".\nOther things you can do is\n\\`\\`\\`\nevents = client.events.list(limit=50)\ntime_series = client.time_series.list(limit=50)\nfiles = client.files.list(limit=50)\n\\`\\`\\`\nwhere you can do same type of search as for assets. If you define the app inside an app() function, remember to call it at the end.\nIf you create a data frame, remember to do\n\\`\\`\\`\ndf = df.fillna(0)\n\\`\\`\\`\nto make sure we don't have problems with NaN values.\n`,\n        },\n        {\n          role: 'user',\n          content: `Now give me Streamlit code that uses the Cognite Python SDK to answer the following: ${query}. Only give pure python code, nothing else.`,\n        },\n      ],\n      temperature: 0.0,\n      maxTokens: 2048,\n    },\n    sdk\n  );\n  let code = response[0].message.content;\n  const start = code.indexOf('```python') + 9;\n  const length = code.lastIndexOf('```') - start;\n  code = code.substr(start, length);\n  return { newCode: code, oldCode };\n};\n\nconst identifyProblem = async (messages: CopilotMessage[]) => {\n  const response = await getChatCompletions(\n    {\n      messages: [\n        {\n          role: 'user',\n          content:\n            'CONTEXT:\\nYou are Cognite CoPilot, an industrial copilot. You will help write streamlit code with data being access from Cognite Data Fusion.',\n        },\n        {\n          role: 'user',\n          content: `CONTEXT:\\nYou have recieved this following sequence of messages in JSON array. The last message is the most recent message from the user, and the first message is what you send. \n\\`\\`\\`\n${JSON.stringify(messages)}\n\\`\\`\\`\nthe source of \"bot\" indicates previous messages from you, the CoPilot, the source \"user\" implies what the user wants. \n`,\n        },\n        {\n          role: 'user',\n          content: `CONTEXT:\\nThese are all of the actions you can help with. \\n\\`Actions\\`:\n\\`\\`\\`\n${JSON.stringify(StreamlitActions)}\n\\`\\`\\`\n`,\n        },\n        {\n          role: 'user',\n          content: `Question:\\nIdentify the array index in \\`Actions\\` where the user intent matches the action (0 is the first item in the array, 1 is second and etc.). \\nResponse Format:\\nReturn -1 if non of the actions solves the user intent. The user expects the Copilot (you) to answer with just the array index as a number - no explaination. Respond with only the array index, or -1, as a number wrapped in a code block. \\nExample:\\n\\`\\`\\`0\\`\\`\\``,\n        },\n      ],\n      temperature: 0.0,\n      maxTokens: 2048,\n    },\n    sdk\n  );\n  let code = response[0].message.content;\n  const start = code.indexOf('```') + 3;\n  const length = code.lastIndexOf('```') - start;\n  code = code.substring(start, start + length);\n  return Number(code.trim());\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}