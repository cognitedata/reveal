{"ast":null,"code":"import lowerCase from 'lodash/lowerCase';\nimport mime from 'mime-types';\nimport { isSupportedFileInfo } from '@cognite/unified-file-viewer';\nimport { DOCUMENT_ICON_FALLBACK_VALUE } from '../constants';\nexport const getMIMEType = fileURI => mime.lookup(fileURI);\nexport const PREVIEWABLE_IMAGE_TYPES = ['png', 'jpeg', 'jpg', 'svg', 'webp'];\nexport const PREVIEWABLE_FILE_TYPES = [...PREVIEWABLE_IMAGE_TYPES, 'tif', 'tiff', 'pdf', 'txt', 'json', 'csv'];\nexport const isDocument = item => {\n  return item.sourceFile !== undefined;\n};\nexport const isFilePreviewable = file => {\n  if (file === undefined) return false;\n  if (isDocument(file)) {\n    return isSupportedFileInfo(file.sourceFile);\n  }\n  return isSupportedFileInfo(file);\n};\nexport const isPreviewableImage = file => isFileOfType(file, PREVIEWABLE_IMAGE_TYPES);\nexport const isFileOfType = (file, type) => {\n  const {\n    mimeType = '',\n    name = ''\n  } = file || {};\n  const fileExt = name.includes('.') ? lowerCase(name.substring(name.lastIndexOf('.') + 1)) : undefined;\n  return (type || []).some(el => lowerCase(mimeType).includes(el) || fileExt === el);\n};\nexport async function fetchFilePreviewURL(sdk, file) {\n  if (!isFilePreviewable(file)) return undefined;\n\n  // Handle image url\n  if (isPreviewableImage(file)) {\n    const urls = await sdk.files.getDownloadUrls([{\n      id: file.id\n    }]);\n    const imageUrl = urls[0].downloadUrl;\n    return imageUrl;\n  }\n  return sdk.documents.preview.documentAsImage(file.id, 1).then(response => {\n    const icon = response;\n    const arrayBufferView = new Uint8Array(icon);\n    const blob = new Blob([arrayBufferView]);\n    const objectURL = URL.createObjectURL(blob);\n    return objectURL;\n  });\n}\nexport const APPLICATION = 'application';\nexport const TEXT = 'text';\nexport const IMAGE = 'image';\nexport const mapFileType = mimeType => {\n  if (mimeType.startsWith(APPLICATION) || mimeType.startsWith(TEXT)) {\n    const [, ...rest] = mimeType.split('/');\n    const fileType = rest.join('');\n    switch (fileType) {\n      case 'pdf':\n        return 'PDF';\n      case 'msword':\n        return 'Word Document';\n      case 'vnd.ms-excel':\n      case 'vnd.openxmlformats-officedocument.spreadsheetml.sheet':\n        return 'Excel Sheet';\n      case 'xml':\n        return 'XML';\n      case 'zip':\n      case '7z':\n      case 'vnd.rar':\n      case 'x-tar':\n        return 'Archive';\n      case 'json':\n        return 'JSON';\n      case 'octet-stream':\n        return 'Binary';\n      case 'txt':\n      case 'plain':\n        return 'Text';\n      case 'csv':\n        return 'CSV';\n      case 'x-cit':\n        return 'CIT';\n      default:\n        return fileType;\n    }\n  }\n  if (mimeType.startsWith(IMAGE)) {\n    const [, ...rest] = mimeType.split('/');\n    const fileType = rest.join('');\n    switch (fileType) {\n      case 'dwg':\n        return 'DWG';\n      case 'x-dfx':\n        return 'vnd.dgn';\n      case 'svg':\n      case 'svg+xml':\n        return 'SVG';\n      default:\n        return 'Image';\n    }\n  }\n  return mimeType;\n};\nexport const fileIconMapper = {\n  'image/png': 'file.png',\n  'image/jpeg': 'file.jpeg',\n  'image/gif': 'file.gif',\n  'image/tiff': 'file.tiff',\n  'application/pdf': 'file.pdf',\n  'application/msword': 'file.docx',\n  'application/vnd.ms-excel': 'file.xls',\n  'image/svg': 'file.png',\n  'image/svg+xml': 'file.png',\n  'application/xml': 'file.xml',\n  'text/xml': 'file.xml',\n  'text/html': 'file.js',\n  'application/zip': 'file.zip',\n  'application/7z': 'file.7zip',\n  'text/plain': 'file.txt',\n  'video/x-msvideo': 'file.avi',\n  'video/mp4': 'file.mp4',\n  'video/quicktime': 'file.mov',\n  'video/mpeg': 'file.mp4',\n  'application/json': 'file.json',\n  'image/dwg': 'file.dwg',\n  'image/x-dfx': 'file.dxf',\n  'image/vnd.dgn': 'file.dgn',\n  'application/x-cit': 'file.cit',\n  'text/csv': 'file.csv',\n  'application/txt': 'file.txt',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'file.xls',\n  'application/octet-stream': 'file.fbx'\n};\nexport const mapMimeTypeToDocumentType = mimeType => {\n  return fileIconMapper[mimeType || ''] || DOCUMENT_ICON_FALLBACK_VALUE;\n};\nexport const getObjectURL = data => {\n  const arrayBufferView = new Uint8Array(data);\n  const blob = new Blob([arrayBufferView]);\n  return URL.createObjectURL(blob);\n};","map":{"version":3,"names":["lowerCase","mime","isSupportedFileInfo","DOCUMENT_ICON_FALLBACK_VALUE","getMIMEType","fileURI","lookup","PREVIEWABLE_IMAGE_TYPES","PREVIEWABLE_FILE_TYPES","isDocument","item","sourceFile","undefined","isFilePreviewable","file","isPreviewableImage","isFileOfType","type","mimeType","name","fileExt","includes","substring","lastIndexOf","some","el","fetchFilePreviewURL","sdk","urls","files","getDownloadUrls","id","imageUrl","downloadUrl","documents","preview","documentAsImage","then","response","icon","arrayBufferView","Uint8Array","blob","Blob","objectURL","URL","createObjectURL","APPLICATION","TEXT","IMAGE","mapFileType","startsWith","rest","split","fileType","join","fileIconMapper","mapMimeTypeToDocumentType","getObjectURL","data"],"sources":["/Volumes/csvol/fusion/libs/data-exploration/core/src/utils/files.ts"],"sourcesContent":["import lowerCase from 'lodash/lowerCase';\nimport mime from 'mime-types';\n\nimport { CogniteClient, FileInfo } from '@cognite/sdk';\nimport { isSupportedFileInfo } from '@cognite/unified-file-viewer';\n\nimport { DOCUMENT_ICON_FALLBACK_VALUE } from '../constants';\nimport { InternalDocument } from '../types';\n\nexport const getMIMEType = (fileURI: string) => mime.lookup(fileURI);\n\nexport const PREVIEWABLE_IMAGE_TYPES = ['png', 'jpeg', 'jpg', 'svg', 'webp'];\nexport const PREVIEWABLE_FILE_TYPES = [\n  ...PREVIEWABLE_IMAGE_TYPES,\n  'tif',\n  'tiff',\n  'pdf',\n  'txt',\n  'json',\n  'csv',\n];\n\nexport const isDocument = (\n  item: InternalDocument | FileInfo\n): item is InternalDocument => {\n  return (item as InternalDocument).sourceFile !== undefined;\n};\n\nexport const isFilePreviewable = (file?: FileInfo | InternalDocument) => {\n  if (file === undefined) return false;\n\n  if (isDocument(file)) {\n    return isSupportedFileInfo(file.sourceFile);\n  }\n  return isSupportedFileInfo(file);\n};\n\nexport const isPreviewableImage = (file?: FileInfo | InternalDocument) =>\n  isFileOfType(file, PREVIEWABLE_IMAGE_TYPES);\n\nexport const isFileOfType = (\n  file?: FileInfo | InternalDocument,\n  type?: string[]\n) => {\n  const { mimeType = '', name = '' } = file || {};\n  const fileExt = name.includes('.')\n    ? lowerCase(name.substring(name.lastIndexOf('.') + 1))\n    : undefined;\n  return (type || []).some(\n    (el) => lowerCase(mimeType).includes(el) || fileExt === el\n  );\n};\n\nexport async function fetchFilePreviewURL(\n  sdk: CogniteClient,\n  file: FileInfo | InternalDocument\n) {\n  if (!isFilePreviewable(file)) return undefined;\n\n  // Handle image url\n  if (isPreviewableImage(file)) {\n    const urls = await sdk.files.getDownloadUrls([{ id: file.id }]);\n    const imageUrl = urls[0].downloadUrl;\n    return imageUrl;\n  }\n\n  return sdk.documents.preview.documentAsImage(file.id, 1).then((response) => {\n    const icon = response;\n    const arrayBufferView = new Uint8Array(icon);\n    const blob = new Blob([arrayBufferView]);\n    const objectURL = URL.createObjectURL(blob);\n    return objectURL;\n  });\n}\n\nexport const APPLICATION = 'application';\nexport const TEXT = 'text';\nexport const IMAGE = 'image';\n\nexport const mapFileType = (mimeType: string) => {\n  if (mimeType.startsWith(APPLICATION) || mimeType.startsWith(TEXT)) {\n    const [, ...rest] = mimeType.split('/');\n    const fileType = rest.join('');\n    switch (fileType) {\n      case 'pdf':\n        return 'PDF';\n      case 'msword':\n        return 'Word Document';\n      case 'vnd.ms-excel':\n      case 'vnd.openxmlformats-officedocument.spreadsheetml.sheet':\n        return 'Excel Sheet';\n      case 'xml':\n        return 'XML';\n      case 'zip':\n      case '7z':\n      case 'vnd.rar':\n      case 'x-tar':\n        return 'Archive';\n      case 'json':\n        return 'JSON';\n      case 'octet-stream':\n        return 'Binary';\n      case 'txt':\n      case 'plain':\n        return 'Text';\n      case 'csv':\n        return 'CSV';\n      case 'x-cit':\n        return 'CIT';\n      default:\n        return fileType;\n    }\n  }\n\n  if (mimeType.startsWith(IMAGE)) {\n    const [, ...rest] = mimeType.split('/');\n    const fileType = rest.join('');\n    switch (fileType) {\n      case 'dwg':\n        return 'DWG';\n      case 'x-dfx':\n        return 'vnd.dgn';\n      case 'svg':\n      case 'svg+xml':\n        return 'SVG';\n      default:\n        return 'Image';\n    }\n  }\n  return mimeType;\n};\n\ninterface FileIconMapper {\n  [k: string]: string;\n}\nexport const fileIconMapper: FileIconMapper = {\n  'image/png': 'file.png',\n  'image/jpeg': 'file.jpeg',\n  'image/gif': 'file.gif',\n  'image/tiff': 'file.tiff',\n  'application/pdf': 'file.pdf',\n  'application/msword': 'file.docx',\n  'application/vnd.ms-excel': 'file.xls',\n  'image/svg': 'file.png',\n  'image/svg+xml': 'file.png',\n  'application/xml': 'file.xml',\n  'text/xml': 'file.xml',\n  'text/html': 'file.js',\n  'application/zip': 'file.zip',\n  'application/7z': 'file.7zip',\n  'text/plain': 'file.txt',\n  'video/x-msvideo': 'file.avi',\n  'video/mp4': 'file.mp4',\n  'video/quicktime': 'file.mov',\n  'video/mpeg': 'file.mp4',\n  'application/json': 'file.json',\n  'image/dwg': 'file.dwg',\n  'image/x-dfx': 'file.dxf',\n  'image/vnd.dgn': 'file.dgn',\n  'application/x-cit': 'file.cit',\n  'text/csv': 'file.csv',\n  'application/txt': 'file.txt',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':\n    'file.xls',\n  'application/octet-stream': 'file.fbx',\n};\n\nexport const mapMimeTypeToDocumentType = (mimeType?: string) => {\n  return fileIconMapper[mimeType || ''] || DOCUMENT_ICON_FALLBACK_VALUE;\n};\n\nexport const getObjectURL = (data: ArrayBuffer): string => {\n  const arrayBufferView = new Uint8Array(data);\n  const blob = new Blob([arrayBufferView]);\n  return URL.createObjectURL(blob);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}