{"ast":null,"code":"var _jsxFileName = \"/Volumes/csvol/fusion/libs/shared/cdf-utilities/src/components/Notification/Notification.tsx\";\nimport React from 'react';\nimport { notification as _notification } from 'antd';\nimport { Icon } from '@cognite/cogs.js';\nimport 'antd/lib/notification/style/index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseArgs = {\n  closeIcon: /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"cogs-notification-close\",\n    children: /*#__PURE__*/_jsxDEV(Icon, {\n      type: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this)\n};\nconst applyArgs = argsProps => ({\n  ...baseArgs,\n  ...argsProps\n});\n\n/**\n * Override for the `antd/notification` object with styled\n * variants of the default notifications.\n */\nexport const notification = {\n  success: argsProps => _notification.success(applyArgs({\n    ...argsProps,\n    icon: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"anticon ant-notification-notice-icon-success\",\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        type: \"Checkmark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)\n  })),\n  info: argsProps => _notification.info(applyArgs({\n    ...argsProps,\n    icon: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"anticon ant-notification-notice-icon-info\",\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        type: \"Info\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this)\n  })),\n  warning: argsProps => _notification.warning(applyArgs({\n    ...argsProps,\n    icon: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"anticon ant-notification-notice-icon-warning\",\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        type: \"Warning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this)\n  })),\n  error: argsProps => _notification.error(applyArgs({\n    ...argsProps,\n    icon: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"anticon ant-notification-notice-icon-error\",\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        type: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this)\n  })),\n  open: argsProps => _notification.open(applyArgs(argsProps)),\n  config: (...args) => _notification.config(...args)\n};\nexport default notification;","map":{"version":3,"names":["React","notification","_notification","Icon","baseArgs","closeIcon","applyArgs","argsProps","success","icon","info","warning","error","open","config","args"],"sources":["/Volumes/csvol/fusion/libs/shared/cdf-utilities/src/components/Notification/Notification.tsx"],"sourcesContent":["import React from 'react';\n\nimport { notification as _notification } from 'antd';\nimport {\n  ArgsProps,\n  NotificationApi,\n  NotificationInstance,\n} from 'antd/lib/notification';\n\nimport { Icon } from '@cognite/cogs.js';\n\nimport 'antd/lib/notification/style/index.css';\n\nconst baseArgs: Partial<ArgsProps> = {\n  closeIcon: (\n    <span className=\"cogs-notification-close\">\n      <Icon type=\"Close\" />\n    </span>\n  ),\n};\n\nconst applyArgs = (argsProps: ArgsProps): ArgsProps => ({\n  ...baseArgs,\n  ...argsProps,\n});\n\n/**\n * Override for the `antd/notification` object with styled\n * variants of the default notifications.\n */\nexport const notification: NotificationInstance &\n  Pick<NotificationApi, 'config'> = {\n  success: (argsProps: ArgsProps) =>\n    _notification.success(\n      applyArgs({\n        ...argsProps,\n        icon: (\n          <span className=\"anticon ant-notification-notice-icon-success\">\n            <Icon type=\"Checkmark\" />\n          </span>\n        ),\n      })\n    ),\n  info: (argsProps: ArgsProps) =>\n    _notification.info(\n      applyArgs({\n        ...argsProps,\n        icon: (\n          <span className=\"anticon ant-notification-notice-icon-info\">\n            <Icon type=\"Info\" />\n          </span>\n        ),\n      })\n    ),\n  warning: (argsProps: ArgsProps) =>\n    _notification.warning(\n      applyArgs({\n        ...argsProps,\n        icon: (\n          <span className=\"anticon ant-notification-notice-icon-warning\">\n            <Icon type=\"Warning\" />\n          </span>\n        ),\n      })\n    ),\n  error: (argsProps: ArgsProps) =>\n    _notification.error(\n      applyArgs({\n        ...argsProps,\n        icon: (\n          <span className=\"anticon ant-notification-notice-icon-error\">\n            <Icon type=\"Error\" />\n          </span>\n        ),\n      })\n    ),\n  open: (argsProps: ArgsProps) => _notification.open(applyArgs(argsProps)),\n  config: (...args) => _notification.config(...args),\n};\n\nexport default notification;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,YAAY,IAAIC,aAAa,QAAQ,MAAM;AAOpD,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,OAAO,uCAAuC;AAAC;AAE/C,MAAMC,QAA4B,GAAG;EACnCC,SAAS,eACP;IAAM,SAAS,EAAC,yBAAyB;IAAA,uBACvC,QAAC,IAAI;MAAC,IAAI,EAAC;IAAO;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA;AAG3B,CAAC;AAED,MAAMC,SAAS,GAAIC,SAAoB,KAAiB;EACtD,GAAGH,QAAQ;EACX,GAAGG;AACL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMN,YACoB,GAAG;EAClCO,OAAO,EAAGD,SAAoB,IAC5BL,aAAa,CAACM,OAAO,CACnBF,SAAS,CAAC;IACR,GAAGC,SAAS;IACZE,IAAI,eACF;MAAM,SAAS,EAAC,8CAA8C;MAAA,uBAC5D,QAAC,IAAI;QAAC,IAAI,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAG/B,CAAC,CAAC,CACH;EACHC,IAAI,EAAGH,SAAoB,IACzBL,aAAa,CAACQ,IAAI,CAChBJ,SAAS,CAAC;IACR,GAAGC,SAAS;IACZE,IAAI,eACF;MAAM,SAAS,EAAC,2CAA2C;MAAA,uBACzD,QAAC,IAAI;QAAC,IAAI,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAG1B,CAAC,CAAC,CACH;EACHE,OAAO,EAAGJ,SAAoB,IAC5BL,aAAa,CAACS,OAAO,CACnBL,SAAS,CAAC;IACR,GAAGC,SAAS;IACZE,IAAI,eACF;MAAM,SAAS,EAAC,8CAA8C;MAAA,uBAC5D,QAAC,IAAI;QAAC,IAAI,EAAC;MAAS;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAG7B,CAAC,CAAC,CACH;EACHG,KAAK,EAAGL,SAAoB,IAC1BL,aAAa,CAACU,KAAK,CACjBN,SAAS,CAAC;IACR,GAAGC,SAAS;IACZE,IAAI,eACF;MAAM,SAAS,EAAC,4CAA4C;MAAA,uBAC1D,QAAC,IAAI;QAAC,IAAI,EAAC;MAAO;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EAG3B,CAAC,CAAC,CACH;EACHI,IAAI,EAAGN,SAAoB,IAAKL,aAAa,CAACW,IAAI,CAACP,SAAS,CAACC,SAAS,CAAC,CAAC;EACxEO,MAAM,EAAE,CAAC,GAAGC,IAAI,KAAKb,aAAa,CAACY,MAAM,CAAC,GAAGC,IAAI;AACnD,CAAC;AAED,eAAed,YAAY"},"metadata":{},"sourceType":"module"}